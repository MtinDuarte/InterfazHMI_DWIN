
Proyecto_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb8  08007cb8  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb8  08007cb8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00000444  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000544  20000544  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001103f  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003335  00000000  00000000  0003116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  000344a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b80  00000000  00000000  000351b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b47  00000000  00000000  00035d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152e8  00000000  00000000  00059877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3848  00000000  00000000  0006eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001323a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb4  00000000  00000000  001323f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007670 	.word	0x08007670

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	08007670 	.word	0x08007670

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ToLittleEndian>:

/************************************************************************/
/* Private utility functions 	                                                */
/************************************************************************/
static uint32_t ToLittleEndian (uint32_t Word)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t b0,b1,b2,b3;
	uint32_t res;

	b0 = (Word & 0x000000ff) << 24u;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	061b      	lsls	r3, r3, #24
 800028c:	61fb      	str	r3, [r7, #28]
	b1 = (Word & 0x0000ff00) << 8u;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	021b      	lsls	r3, r3, #8
 8000292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000296:	61bb      	str	r3, [r7, #24]
	b2 = (Word & 0x00ff0000) >> 8u;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	0a1b      	lsrs	r3, r3, #8
 800029c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80002a0:	617b      	str	r3, [r7, #20]
	b3 = (Word & 0xff000000) >> 24u;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	0e1b      	lsrs	r3, r3, #24
 80002a6:	613b      	str	r3, [r7, #16]

	res = b0 | b1 | b2 | b3;
 80002a8:	69fa      	ldr	r2, [r7, #28]
 80002aa:	69bb      	ldr	r3, [r7, #24]
 80002ac:	431a      	orrs	r2, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	693a      	ldr	r2, [r7, #16]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
	return res;
 80002b8:	68fb      	ldr	r3, [r7, #12]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <getSpeakerVp>:
static uint16_t getSpeakerVp (uint8_t SpeakerId)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	switch(SpeakerId)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	2b0b      	cmp	r3, #11
 80002d8:	d83e      	bhi.n	8000358 <getSpeakerVp+0x90>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <getSpeakerVp+0x18>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	08000311 	.word	0x08000311
 80002e4:	08000317 	.word	0x08000317
 80002e8:	0800031d 	.word	0x0800031d
 80002ec:	08000323 	.word	0x08000323
 80002f0:	08000329 	.word	0x08000329
 80002f4:	0800032f 	.word	0x0800032f
 80002f8:	08000335 	.word	0x08000335
 80002fc:	0800033b 	.word	0x0800033b
 8000300:	08000341 	.word	0x08000341
 8000304:	08000347 	.word	0x08000347
 8000308:	0800034d 	.word	0x0800034d
 800030c:	08000353 	.word	0x08000353
	{
		case Speaker_1:		return SPEAKER_ICON_VP_1;
 8000310:	f241 0310 	movw	r3, #4112	; 0x1010
 8000314:	e021      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_2:		return SPEAKER_ICON_VP_2;
 8000316:	f241 0330 	movw	r3, #4144	; 0x1030
 800031a:	e01e      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_3:		return SPEAKER_ICON_VP_3;
 800031c:	f241 0350 	movw	r3, #4176	; 0x1050
 8000320:	e01b      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_4:		return SPEAKER_ICON_VP_4;
 8000322:	f241 0375 	movw	r3, #4213	; 0x1075
 8000326:	e018      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_5:		return SPEAKER_ICON_VP_5;
 8000328:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800032c:	e015      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_6:		return SPEAKER_ICON_VP_6;
 800032e:	f241 1325 	movw	r3, #4389	; 0x1125
 8000332:	e012      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_7:		return SPEAKER_ICON_VP_7;
 8000334:	f241 1350 	movw	r3, #4432	; 0x1150
 8000338:	e00f      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_8:		return SPEAKER_ICON_VP_8;
 800033a:	f241 1375 	movw	r3, #4469	; 0x1175
 800033e:	e00c      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_9:		return SPEAKER_ICON_VP_9;
 8000340:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000344:	e009      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_10:	return SPEAKER_ICON_VP_10;
 8000346:	f241 2325 	movw	r3, #4645	; 0x1225
 800034a:	e006      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_11:	return SPEAKER_ICON_VP_11;
 800034c:	f241 2350 	movw	r3, #4688	; 0x1250
 8000350:	e003      	b.n	800035a <getSpeakerVp+0x92>
		case Speaker_12: 	return SPEAKER_ICON_VP_12;
 8000352:	f241 2375 	movw	r3, #4725	; 0x1275
 8000356:	e000      	b.n	800035a <getSpeakerVp+0x92>
		default:			return 0;
 8000358:	2300      	movs	r3, #0
	}
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <Send_NoWait>:
/************************************************************************/
/* Private functions	                                                */
/************************************************************************/
static bool Send_NoWait (VP_Req *DataReq)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	USART1_Transmit(DataReq->req.header.header_H);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fc35 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.header.header_L);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fc30 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.ByteCount);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	789b      	ldrb	r3, [r3, #2]
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fc2b 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.Command);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	78db      	ldrb	r3, [r3, #3]
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fc26 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.VP_H);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	4618      	mov	r0, r3
 800039e:	f001 fc21 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.VP_L);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	795b      	ldrb	r3, [r3, #5]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fc1c 	bl	8001be4 <USART1_Transmit>
	for (int i = 0 ; i < DataReq->req.Datalen; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e00a      	b.n	80003c8 <Send_NoWait+0x60>
	{
		USART1_Transmit(DataReq->req.Data[i]);
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	4413      	add	r3, r2
 80003b8:	3307      	adds	r3, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fc11 	bl	8001be4 <USART1_Transmit>
	for (int i = 0 ; i < DataReq->req.Datalen; i++)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3301      	adds	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	799b      	ldrb	r3, [r3, #6]
 80003cc:	461a      	mov	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4293      	cmp	r3, r2
 80003d2:	dbee      	blt.n	80003b2 <Send_NoWait+0x4a>
	}
	HAL_Delay(50);
 80003d4:	2032      	movs	r0, #50	; 0x32
 80003d6:	f002 f9b7 	bl	8002748 <HAL_Delay>
	ClearBufferindexes();
 80003da:	f000 fd5f 	bl	8000e9c <ClearBufferindexes>
	return true;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <Send_Wait>:
static bool Send_Wait (VP_Req *DataReq)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
	ClearBufferindexes();
 80003f4:	f000 fd52 	bl	8000e9c <ClearBufferindexes>
	USART1_Transmit(DataReq->req.header.header_H);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fbf1 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.header.header_L);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	785b      	ldrb	r3, [r3, #1]
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fbec 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.ByteCount);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fbe7 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.Command);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	78db      	ldrb	r3, [r3, #3]
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fbe2 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.VP_H);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fbdd 	bl	8001be4 <USART1_Transmit>
	USART1_Transmit(DataReq->req.VP_L);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fbd8 	bl	8001be4 <USART1_Transmit>
	for (int i = 0 ; i < DataReq->req.Datalen; i++)
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	e00a      	b.n	8000450 <Send_Wait+0x68>
	{
		USART1_Transmit(DataReq->req.Data[i]);
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	4413      	add	r3, r2
 8000440:	3307      	adds	r3, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fbcd 	bl	8001be4 <USART1_Transmit>
	for (int i = 0 ; i < DataReq->req.Datalen; i++)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	3301      	adds	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	799b      	ldrb	r3, [r3, #6]
 8000454:	461a      	mov	r2, r3
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	4293      	cmp	r3, r2
 800045a:	dbee      	blt.n	800043a <Send_Wait+0x52>
	}
	/*	As serial data is being received in ring buffer,
	this delay will give time to catch answer	*/
	HAL_Delay(100);
 800045c:	2064      	movs	r0, #100	; 0x64
 800045e:	f002 f973 	bl	8002748 <HAL_Delay>



	if (true == Parser_startRequest(DataReq))
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 fe9a 	bl	800119c <Parser_startRequest>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <Send_Wait+0x8a>
		ret = true;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
	
	return ret;
 8000472:	7bfb      	ldrb	r3, [r7, #15]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <Request_writeVpNoWait>:


static bool Request_writeVpNoWait(uint16_t vp_Address, uint16_t value)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b092      	sub	sp, #72	; 0x48
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	80fb      	strh	r3, [r7, #6]
 8000488:	4613      	mov	r3, r2
 800048a:	80bb      	strh	r3, [r7, #4]
	VP_Req NewReq = {0};
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	223a      	movs	r2, #58	; 0x3a
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f005 fe1d 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	647b      	str	r3, [r7, #68]	; 0x44

	pData->req.header.header_H = HEADER_H;
 80004a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a2:	225a      	movs	r2, #90	; 0x5a
 80004a4:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 80004a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a8:	22a5      	movs	r2, #165	; 0xa5
 80004aa:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(value);
 80004ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ae:	2205      	movs	r2, #5
 80004b0:	709a      	strb	r2, [r3, #2]
	pData->req.Command = WRITE_VP_COMMAND;
 80004b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004b4:	2282      	movs	r2, #130	; 0x82
 80004b6:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(vp_Address & 0xFF00)>>8;
 80004b8:	88fb      	ldrh	r3, [r7, #6]
 80004ba:	0a1b      	lsrs	r3, r3, #8
 80004bc:	b29b      	uxth	r3, r3
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004c2:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(vp_Address & 0xFF);
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ca:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = sizeof(uint16_t);
 80004cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ce:	2202      	movs	r2, #2
 80004d0:	719a      	strb	r2, [r3, #6]
	//memcpy(pData->req.Data,&value,pData->req.Datalen);
	pData->req.Data[0] = (value & 0xFF00)>>8;
 80004d2:	88bb      	ldrh	r3, [r7, #4]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004dc:	71da      	strb	r2, [r3, #7]
	pData->req.Data[1] = (value & 0xFF);
 80004de:	88bb      	ldrh	r3, [r7, #4]
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004e4:	721a      	strb	r2, [r3, #8]

	return  Send_NoWait(pData);
 80004e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80004e8:	f7ff ff3e 	bl	8000368 <Send_NoWait>
 80004ec:	4603      	mov	r3, r0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3748      	adds	r7, #72	; 0x48
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <Request_writeGenericText>:
	pData->req.Datalen = sizeof(SelectNumber);
	memcpy(pData->req.Data,SelectNumber,pData->req.Datalen);
	return Send_NoWait(pData);
}
static bool Request_writeGenericText(uint16_t GenericVP, char* text, uint8_t length)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b092      	sub	sp, #72	; 0x48
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	4603      	mov	r3, r0
 80004fe:	6039      	str	r1, [r7, #0]
 8000500:	80fb      	strh	r3, [r7, #6]
 8000502:	4613      	mov	r3, r2
 8000504:	717b      	strb	r3, [r7, #5]
	VP_Req NewReq = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	223a      	movs	r2, #58	; 0x3a
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f005 fde0 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	647b      	str	r3, [r7, #68]	; 0x44

	pData->req.header.header_H = HEADER_H;
 800051a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800051c:	225a      	movs	r2, #90	; 0x5a
 800051e:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 8000520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000522:	22a5      	movs	r2, #165	; 0xa5
 8000524:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + length;
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	3303      	adds	r3, #3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800052e:	709a      	strb	r2, [r3, #2]
	pData->req.Command = WRITE_VP_COMMAND;
 8000530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000532:	2282      	movs	r2, #130	; 0x82
 8000534:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H = GenericVP>>8;
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000540:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L = GenericVP & 0x00FF;
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000548:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = length;
 800054a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	719a      	strb	r2, [r3, #6]
	memcpy(pData->req.Data,text,pData->req.Datalen);
 8000550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000552:	1dd8      	adds	r0, r3, #7
 8000554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	461a      	mov	r2, r3
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	f005 fdac 	bl	80060b8 <memcpy>
	return Send_NoWait(pData);
 8000560:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000562:	f7ff ff01 	bl	8000368 <Send_NoWait>
 8000566:	4603      	mov	r3, r0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3748      	adds	r7, #72	; 0x48
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Request_pageId>:
}


/* Write functions for textBoxes	                                    */
static bool Request_pageId(uint16_t* pageId)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	volatile bool ret;
	VP_Req NewReq = {0};
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	223a      	movs	r2, #58	; 0x3a
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f005 fda7 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t DataCode = 0x1;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
	pData->req.header.header_H = HEADER_H;
 8000590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000592:	225a      	movs	r2, #90	; 0x5a
 8000594:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 8000596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000598:	22a5      	movs	r2, #165	; 0xa5
 800059a:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(DataCode);
 800059c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059e:	2204      	movs	r2, #4
 80005a0:	709a      	strb	r2, [r3, #2]
	pData->req.Command = READ_VP_COMMAND;
 80005a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a4:	2283      	movs	r2, #131	; 0x83
 80005a6:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(PAGE_ID_REQUEST_CODE & 0xFF00)>>8;
 80005a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005aa:	2200      	movs	r2, #0
 80005ac:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(PAGE_ID_REQUEST_CODE & 0xFF);
 80005ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b0:	2214      	movs	r2, #20
 80005b2:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = sizeof(DataCode);
 80005b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b6:	2201      	movs	r2, #1
 80005b8:	719a      	strb	r2, [r3, #6]
	memcpy(pData->req.Data,&DataCode,pData->req.Datalen);
 80005ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005bc:	1dd8      	adds	r0, r3, #7
 80005be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005c0:	799b      	ldrb	r3, [r3, #6]
 80005c2:	461a      	mov	r2, r3
 80005c4:	f107 030f 	add.w	r3, r7, #15
 80005c8:	4619      	mov	r1, r3
 80005ca:	f005 fd75 	bl	80060b8 <memcpy>
	
	if (true ==  Send_Wait(pData))
 80005ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80005d0:	f7ff ff0a 	bl	80003e8 <Send_Wait>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <Request_pageId+0x78>
	{
		*pageId = pData->resp.value;
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	881a      	ldrh	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	801a      	strh	r2, [r3, #0]
		ret = true;
 80005e2:	2301      	movs	r3, #1
 80005e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	}
	return ret;
 80005e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <Request_firmwareVersion>:
static bool Request_firmwareVersion(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b092      	sub	sp, #72	; 0x48
 80005fa:	af00      	add	r7, sp, #0
	VP_Req NewReq = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	223a      	movs	r2, #58	; 0x3a
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 fd65 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t DataCode = 0x1;
 8000610:	2301      	movs	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
	pData->req.header.header_H = HEADER_H;
 8000614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000616:	225a      	movs	r2, #90	; 0x5a
 8000618:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 800061a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800061c:	22a5      	movs	r2, #165	; 0xa5
 800061e:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(DataCode);
 8000620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000622:	2204      	movs	r2, #4
 8000624:	709a      	strb	r2, [r3, #2]
	pData->req.Command = READ_VP_COMMAND;
 8000626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000628:	2283      	movs	r2, #131	; 0x83
 800062a:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(FIRMWARE_VERSION_CODE & 0xFF00)>>8;
 800062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062e:	2200      	movs	r2, #0
 8000630:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(FIRMWARE_VERSION_CODE & 0xFF);
 8000632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000634:	220f      	movs	r2, #15
 8000636:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = sizeof(DataCode);
 8000638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800063a:	2201      	movs	r2, #1
 800063c:	719a      	strb	r2, [r3, #6]
	memcpy(pData->req.Data,&DataCode,pData->req.Datalen);
 800063e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000640:	1dd8      	adds	r0, r3, #7
 8000642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000644:	799b      	ldrb	r3, [r3, #6]
 8000646:	461a      	mov	r2, r3
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	4619      	mov	r1, r3
 800064c:	f005 fd34 	bl	80060b8 <memcpy>
	
	return Send_Wait(pData);
 8000650:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000652:	f7ff fec9 	bl	80003e8 <Send_Wait>
 8000656:	4603      	mov	r3, r0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3748      	adds	r7, #72	; 0x48
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <Request_changePage>:
static bool Request_changePage(uint32_t PageId)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	VP_Req NewReq = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	223a      	movs	r2, #58	; 0x3a
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fd2f 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t DataCode = CHANGE_PAGE_DATACODE;
 800067c:	f645 2301 	movw	r3, #23041	; 0x5a01
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t Data = ( PageId << 24)					|
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	061a      	lsls	r2, r3, #24
					((PageId	 & 0x0000FF00) << 8)|
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	uint32_t Data = ( PageId << 24)					|
 800068e:	431a      	orrs	r2, r3
					((DataCode   & 0x000000FF) << 8)|
 8000690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
					((PageId	 & 0x0000FF00) << 8)|
 8000696:	431a      	orrs	r2, r3
					( DataCode	 >>8);
 8000698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800069a:	0a1b      	lsrs	r3, r3, #8
					((DataCode   & 0x000000FF) << 8)|
 800069c:	4313      	orrs	r3, r2
	uint32_t Data = ( PageId << 24)					|
 800069e:	60bb      	str	r3, [r7, #8]
	
	pData->req.Datalen = sizeof(Data);
 80006a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a2:	2204      	movs	r2, #4
 80006a4:	719a      	strb	r2, [r3, #6]
	pData->req.header.header_H = HEADER_H;
 80006a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a8:	225a      	movs	r2, #90	; 0x5a
 80006aa:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 80006ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ae:	22a5      	movs	r2, #165	; 0xa5
 80006b0:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(DataCode);
 80006b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006b4:	2207      	movs	r2, #7
 80006b6:	709a      	strb	r2, [r3, #2]
	pData->req.Command = WRITE_VP_COMMAND;
 80006b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ba:	2282      	movs	r2, #130	; 0x82
 80006bc:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(CHANGE_PAGE_CODE & 0xFF00)>>8;
 80006be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006c0:	2200      	movs	r2, #0
 80006c2:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(CHANGE_PAGE_CODE & 0xFF);
 80006c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006c6:	2284      	movs	r2, #132	; 0x84
 80006c8:	715a      	strb	r2, [r3, #5]
	memcpy(pData->req.Data,&Data,sizeof(Data));
 80006ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006cc:	3307      	adds	r3, #7
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	601a      	str	r2, [r3, #0]
	return  Send_NoWait(pData);
 80006d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80006d4:	f7ff fe48 	bl	8000368 <Send_NoWait>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Request_restartScreenNoWait>:
static bool Request_restartScreenNoWait(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b092      	sub	sp, #72	; 0x48
 80006e8:	af00      	add	r7, sp, #0
	VP_Req NewReq = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	223a      	movs	r2, #58	; 0x3a
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f005 fcef 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DataCode = RESTART_SCREEN_DATACODE;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <Request_restartScreenNoWait+0x70>)
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Data = ToLittleEndian(DataCode);
 80006fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000700:	f7ff fdbe 	bl	8000280 <ToLittleEndian>
 8000704:	4603      	mov	r3, r0
 8000706:	603b      	str	r3, [r7, #0]
	pData->req.header.header_H = HEADER_H;
 8000708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800070a:	225a      	movs	r2, #90	; 0x5a
 800070c:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 800070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000710:	22a5      	movs	r2, #165	; 0xa5
 8000712:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(DataCode);
 8000714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000716:	2207      	movs	r2, #7
 8000718:	709a      	strb	r2, [r3, #2]
	pData->req.Command = WRITE_VP_COMMAND;
 800071a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800071c:	2282      	movs	r2, #130	; 0x82
 800071e:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(RESTART_SCREEN_CODE & 0xFF00)>>8;
 8000720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000722:	2200      	movs	r2, #0
 8000724:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(RESTART_SCREEN_CODE & 0xFF);
 8000726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000728:	2204      	movs	r2, #4
 800072a:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = sizeof(DataCode);
 800072c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800072e:	2204      	movs	r2, #4
 8000730:	719a      	strb	r2, [r3, #6]
	memcpy(pData->req.Data,&Data,pData->req.Datalen);
 8000732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000734:	1dd8      	adds	r0, r3, #7
 8000736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	461a      	mov	r2, r3
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	f005 fcba 	bl	80060b8 <memcpy>
	return  Send_NoWait(pData);
 8000744:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000746:	f7ff fe0f 	bl	8000368 <Send_NoWait>
 800074a:	4603      	mov	r3, r0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3748      	adds	r7, #72	; 0x48
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	55aa5aa5 	.word	0x55aa5aa5

08000758 <Request_initialState>:
static bool Request_initialState(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	bool ret =  false;
 800075e:	2300      	movs	r3, #0
 8000760:	71fb      	strb	r3, [r7, #7]

	/*	This is the only function which waits to an answer */
	if (true == ao1_control_requestChangePage_Wait(PAGE_ID_0))
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f91a 	bl	800099c <ao1_control_requestChangePage_Wait>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <Request_initialState+0x1a>
		ret = true;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]
	//ao1_control_requestWriteVpNoWait(page_ID_0_VP_ADDRESS,0);
	//ao1_control_requestWriteVpNoWait(page_ID_2_VP_ADDRESS,0);
	//Request_cleanVpAddress(STATUS_VP,sizeof(uint16_t));
	//Request_writeSelectNumber();
	//Request_writeSelectLetter();
	return ret;
 8000772:	79fb      	ldrb	r3, [r7, #7]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Request_writeFirstPageTextBoxesTittles>:
	Request_writeSelectNumber();
	Request_writeSelectLetter();
	return true;
}
static bool Request_writeFirstPageTextBoxesTittles(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Request_writeGenericText(SPEAKER_1_TEXT_VP, Speaker_1_Text, sizeof(Speaker_1_Text));
 8000780:	220a      	movs	r2, #10
 8000782:	4925      	ldr	r1, [pc, #148]	; (8000818 <Request_writeFirstPageTextBoxesTittles+0x9c>)
 8000784:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8000788:	f7ff feb5 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_2_TEXT_VP, Speaker_2_Text, sizeof(Speaker_2_Text));
 800078c:	220a      	movs	r2, #10
 800078e:	4923      	ldr	r1, [pc, #140]	; (800081c <Request_writeFirstPageTextBoxesTittles+0xa0>)
 8000790:	f241 5050 	movw	r0, #5456	; 0x1550
 8000794:	f7ff feaf 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_3_TEXT_VP, Speaker_3_Text, sizeof(Speaker_3_Text));
 8000798:	220a      	movs	r2, #10
 800079a:	4921      	ldr	r1, [pc, #132]	; (8000820 <Request_writeFirstPageTextBoxesTittles+0xa4>)
 800079c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80007a0:	f7ff fea9 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_4_TEXT_VP, Speaker_4_Text, sizeof(Speaker_4_Text));
 80007a4:	220a      	movs	r2, #10
 80007a6:	491f      	ldr	r1, [pc, #124]	; (8000824 <Request_writeFirstPageTextBoxesTittles+0xa8>)
 80007a8:	f241 6050 	movw	r0, #5712	; 0x1650
 80007ac:	f7ff fea3 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_5_TEXT_VP, Speaker_5_Text, sizeof(Speaker_5_Text));
 80007b0:	220a      	movs	r2, #10
 80007b2:	491d      	ldr	r1, [pc, #116]	; (8000828 <Request_writeFirstPageTextBoxesTittles+0xac>)
 80007b4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80007b8:	f7ff fe9d 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_6_TEXT_VP, Speaker_6_Text, sizeof(Speaker_6_Text));
 80007bc:	220a      	movs	r2, #10
 80007be:	491b      	ldr	r1, [pc, #108]	; (800082c <Request_writeFirstPageTextBoxesTittles+0xb0>)
 80007c0:	f241 7050 	movw	r0, #5968	; 0x1750
 80007c4:	f7ff fe97 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_7_TEXT_VP, Speaker_7_Text, sizeof(Speaker_7_Text));
 80007c8:	220a      	movs	r2, #10
 80007ca:	4919      	ldr	r1, [pc, #100]	; (8000830 <Request_writeFirstPageTextBoxesTittles+0xb4>)
 80007cc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80007d0:	f7ff fe91 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_8_TEXT_VP, Speaker_8_Text, sizeof(Speaker_8_Text));
 80007d4:	220a      	movs	r2, #10
 80007d6:	4917      	ldr	r1, [pc, #92]	; (8000834 <Request_writeFirstPageTextBoxesTittles+0xb8>)
 80007d8:	f641 0050 	movw	r0, #6224	; 0x1850
 80007dc:	f7ff fe8b 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_9_TEXT_VP, Speaker_9_Text, sizeof(Speaker_9_Text));
 80007e0:	220a      	movs	r2, #10
 80007e2:	4915      	ldr	r1, [pc, #84]	; (8000838 <Request_writeFirstPageTextBoxesTittles+0xbc>)
 80007e4:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80007e8:	f7ff fe85 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_10_TEXT_VP, Speaker_10_Text, sizeof(Speaker_10_Text));
 80007ec:	220b      	movs	r2, #11
 80007ee:	4913      	ldr	r1, [pc, #76]	; (800083c <Request_writeFirstPageTextBoxesTittles+0xc0>)
 80007f0:	f641 1050 	movw	r0, #6480	; 0x1950
 80007f4:	f7ff fe7f 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_11_TEXT_VP, Speaker_11_Text, sizeof(Speaker_11_Text));
 80007f8:	220b      	movs	r2, #11
 80007fa:	4911      	ldr	r1, [pc, #68]	; (8000840 <Request_writeFirstPageTextBoxesTittles+0xc4>)
 80007fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000800:	f7ff fe79 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_12_TEXT_VP, Speaker_12_Text, sizeof(Speaker_12_Text));
 8000804:	220b      	movs	r2, #11
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <Request_writeFirstPageTextBoxesTittles+0xc8>)
 8000808:	f242 0050 	movw	r0, #8272	; 0x2050
 800080c:	f7ff fe73 	bl	80004f6 <Request_writeGenericText>

	return true;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000018 	.word	0x20000018
 8000824:	20000024 	.word	0x20000024
 8000828:	20000030 	.word	0x20000030
 800082c:	2000003c 	.word	0x2000003c
 8000830:	20000048 	.word	0x20000048
 8000834:	20000054 	.word	0x20000054
 8000838:	20000060 	.word	0x20000060
 800083c:	2000006c 	.word	0x2000006c
 8000840:	20000078 	.word	0x20000078
 8000844:	20000084 	.word	0x20000084

08000848 <Request_IconState>:
/* Icon functions	                                    */
static bool Request_IconState(uint16_t vp_Address, uint16_t* value)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	80fb      	strh	r3, [r7, #6]
	VP_Req NewReq = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	223a      	movs	r2, #58	; 0x3a
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fc39 	bl	80060d4 <memset>
	VP_Req* pData = &NewReq;
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t data = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	72fb      	strb	r3, [r7, #11]
	bool ret = false;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	pData->req.header.header_H = HEADER_H;
 8000872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000874:	225a      	movs	r2, #90	; 0x5a
 8000876:	701a      	strb	r2, [r3, #0]
	pData->req.header.header_L = HEADER_L;
 8000878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800087a:	22a5      	movs	r2, #165	; 0xa5
 800087c:	705a      	strb	r2, [r3, #1]
	pData->req.ByteCount = COMMAND_LENGTH + VP_LENGTH + sizeof(data);
 800087e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000880:	2204      	movs	r2, #4
 8000882:	709a      	strb	r2, [r3, #2]
	pData->req.Command = READ_VP_COMMAND;
 8000884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000886:	2283      	movs	r2, #131	; 0x83
 8000888:	70da      	strb	r2, [r3, #3]
	pData->req.VP_H =(vp_Address & 0xFF00)>>8;
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000894:	711a      	strb	r2, [r3, #4]
	pData->req.VP_L =(vp_Address & 0xFF);
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800089c:	715a      	strb	r2, [r3, #5]
	pData->req.Datalen = sizeof(data);
 800089e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008a0:	2201      	movs	r2, #1
 80008a2:	719a      	strb	r2, [r3, #6]
	memcpy(pData->req.Data,&data,pData->req.Datalen);
 80008a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008a6:	1dd8      	adds	r0, r3, #7
 80008a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	461a      	mov	r2, r3
 80008ae:	f107 030b 	add.w	r3, r7, #11
 80008b2:	4619      	mov	r1, r3
 80008b4:	f005 fc00 	bl	80060b8 <memcpy>
	if (true == Send_Wait(pData))
 80008b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80008ba:	f7ff fd95 	bl	80003e8 <Send_Wait>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <Request_IconState+0x8a>
	{
		*value = (pData->resp.value);
 80008c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008c6:	881a      	ldrh	r2, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	801a      	strh	r2, [r3, #0]
		ret = true;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
	return ret;
 80008d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Fetch_userAction>:

/*	private program control functions	*/
static bool Fetch_userAction(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
	return Parser_fetchUserInteraction();
 80008e2:	f000 fc79 	bl	80011d8 <Parser_fetchUserInteraction>
 80008e6:	4603      	mov	r3, r0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	bd80      	pop	{r7, pc}

080008ec <ao1_control_waitForUserInput>:
/************************************************************************/
/* Public functions		                                                */
/************************************************************************/
bool ao1_control_waitForUserInput(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	return Fetch_userAction();
 80008f0:	f7ff fff5 	bl	80008de <Fetch_userAction>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <ao1_control_fetchScreen>:
bool ao1_control_fetchScreen(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	bool screenIsResponding = false, page_fetched = false;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	2300      	movs	r3, #0
 8000908:	71bb      	strb	r3, [r7, #6]

	do
	{
		/*	This request will ask for Screen firmware version,
			is the way to ask if the screen is responding	*/
		screenIsResponding = ao1_control_requestStartHandshake();
 800090a:	f000 f81d 	bl	8000948 <ao1_control_requestStartHandshake>
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
		
		if (screenIsResponding)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00a      	beq.n	800092e <ao1_control_fetchScreen+0x32>
		{
			/*	Being here means screen responded with firmware version,
				this functions will set up to initial page for starting
				the application	*/

			page_fetched = ao1_control_requestPageId(&g_actualPage);
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <ao1_control_fetchScreen+0x48>)
 800091a:	f000 f832 	bl	8000982 <ao1_control_requestPageId>
 800091e:	4603      	mov	r3, r0
 8000920:	71bb      	strb	r3, [r7, #6]

			if (g_actualPage != PAGE_ID_0)
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <ao1_control_fetchScreen+0x48>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <ao1_control_fetchScreen+0x32>
			{
				Request_initialState();
 800092a:	f7ff ff15 	bl	8000758 <Request_initialState>
			}
		}
	}while(screenIsResponding != true);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e7      	bne.n	800090a <ao1_control_fetchScreen+0xe>
	
	return true;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000011c 	.word	0x2000011c

08000948 <ao1_control_requestStartHandshake>:
		ret = true;
	}
	return ret;
}
bool ao1_control_requestStartHandshake(void)
{	
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	bool ScreenIsResponding = false;
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
	
	if (false == Request_firmwareVersion())
 8000952:	f7ff fe50 	bl	80005f6 <Request_firmwareVersion>
 8000956:	4603      	mov	r3, r0
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <ao1_control_requestStartHandshake+0x2c>
	{
		/*	Being here means screen is not responding,
			so this will try to restart screen, and repeat de process	*/
		Request_restartScreenNoWait();
 8000962:	f7ff febf 	bl	80006e4 <Request_restartScreenNoWait>

		/*	To avoid continuous restarts, this delay will give time
			to the screen to recover	*/
		HAL_Delay(2000);
 8000966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800096a:	f001 feed 	bl	8002748 <HAL_Delay>
		ScreenIsResponding = false;
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <ao1_control_requestStartHandshake+0x30>
	}
	else
		ScreenIsResponding = true;
 8000974:	2301      	movs	r3, #1
 8000976:	71fb      	strb	r3, [r7, #7]

	return ScreenIsResponding;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <ao1_control_requestPageId>:
bool ao1_control_requestPageId(uint16_t* pageId)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
	return Request_pageId(pageId);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fdf0 	bl	8000570 <Request_pageId>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <ao1_control_requestChangePage_Wait>:
bool ao1_control_requestChangePage_Wait (uint32_t pageId)
{	
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	uint16_t currentPage = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	81bb      	strh	r3, [r7, #12]
	bool	 pageChanged = false; 
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]
	{
		if (true == Request_pageId(&currentPage))
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fddd 	bl	8000570 <Request_pageId>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d010      	beq.n	80009de <ao1_control_requestChangePage_Wait+0x42>
		{
			if (pageId != currentPage)
 80009bc:	89bb      	ldrh	r3, [r7, #12]
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00b      	beq.n	80009de <ao1_control_requestChangePage_Wait+0x42>
			{
				if (true ==  Request_changePage(pageId))
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe4a 	bl	8000660 <Request_changePage>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d005      	beq.n	80009de <ao1_control_requestChangePage_Wait+0x42>
				{
					g_actualPage = pageId;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <ao1_control_requestChangePage_Wait+0x4c>)
 80009d8:	801a      	strh	r2, [r3, #0]
					pageChanged  = true;						
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
				}					
			}
		}			
	}
	return pageChanged;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000011c 	.word	0x2000011c

080009ec <ao1_control_requestWriteVpNoWait>:
bool ao1_control_requestChangePage_NoWait (uint32_t pageId)
{
	return Request_changePage(pageId);
}
bool ao1_control_requestWriteVpNoWait(uint16_t vp_Address, uint16_t value)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
	return Request_writeVpNoWait(vp_Address, value);
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd3a 	bl	800047c <Request_writeVpNoWait>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <ao1_control_changeSpeakerState>:
bool ao1_control_changeSpeakerState(uint16_t SpeakerId)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	80fb      	strh	r3, [r7, #6]
	uint16_t speakerState = 0, NextState = 0, SpeakerVp = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	813b      	strh	r3, [r7, #8]
 8000a20:	2300      	movs	r3, #0
 8000a22:	81fb      	strh	r3, [r7, #14]
 8000a24:	2300      	movs	r3, #0
 8000a26:	81bb      	strh	r3, [r7, #12]
	bool ret = false;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	72fb      	strb	r3, [r7, #11]
	SpeakerVp = getSpeakerVp(SpeakerId);
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fc49 	bl	80002c8 <getSpeakerVp>
 8000a36:	4603      	mov	r3, r0
 8000a38:	81bb      	strh	r3, [r7, #12]
	Request_IconState(SpeakerVp, &speakerState);
 8000a3a:	f107 0208 	add.w	r2, r7, #8
 8000a3e:	89bb      	ldrh	r3, [r7, #12]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff00 	bl	8000848 <Request_IconState>

	if (speakerState == 0)	/*	SpeakerState is offline, don't change state	*/
 8000a48:	893b      	ldrh	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <ao1_control_changeSpeakerState+0x40>
		return ret;
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	e017      	b.n	8000a82 <ao1_control_changeSpeakerState+0x70>
	else if (speakerState < SPEAKER_OFFLINE || speakerState == SPEAKER_EMERGENCY )
 8000a52:	893b      	ldrh	r3, [r7, #8]
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	d108      	bne.n	8000a6a <ao1_control_changeSpeakerState+0x58>
	{
		/* Return false because icon state is out of bounds.*/
		ret = ao1_control_requestWriteVpNoWait(SpeakerVp, 1);
 8000a58:	89bb      	ldrh	r3, [r7, #12]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffc5 	bl	80009ec <ao1_control_requestWriteVpNoWait>
 8000a62:	4603      	mov	r3, r0
 8000a64:	72fb      	strb	r3, [r7, #11]
		return ret;
 8000a66:	7afb      	ldrb	r3, [r7, #11]
 8000a68:	e00b      	b.n	8000a82 <ao1_control_changeSpeakerState+0x70>
	}
	else
	{
		/* Change speaker state */
		NextState =  speakerState + 1;
 8000a6a:	893b      	ldrh	r3, [r7, #8]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	81fb      	strh	r3, [r7, #14]
		ret = ao1_control_requestWriteVpNoWait(SpeakerVp, NextState);
 8000a70:	89fa      	ldrh	r2, [r7, #14]
 8000a72:	89bb      	ldrh	r3, [r7, #12]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffb8 	bl	80009ec <ao1_control_requestWriteVpNoWait>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	72fb      	strb	r3, [r7, #11]
	}
	return ret;
 8000a80:	7afb      	ldrb	r3, [r7, #11]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <ao1_control_changeMicprophoneState>:
bool ao1_control_changeMicprophoneState(uint16_t MicId)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	80fb      	strh	r3, [r7, #6]
	uint16_t MicrophoneState = 0, NextState = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	817b      	strh	r3, [r7, #10]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	737b      	strb	r3, [r7, #13]
	Request_IconState(MICROPHONE_ICON_VP, &MicrophoneState);
 8000aa0:	f107 030a 	add.w	r3, r7, #10
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000aaa:	f7ff fecd 	bl	8000848 <Request_IconState>

	if (MicrophoneState == 0 || MicrophoneState < MICROPHONE_SPEAKING || MicrophoneState > MICROPHONE_ACTIVE )
 8000aae:	897b      	ldrh	r3, [r7, #10]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <ao1_control_changeMicprophoneState+0x30>
 8000ab4:	897b      	ldrh	r3, [r7, #10]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d908      	bls.n	8000acc <ao1_control_changeMicprophoneState+0x42>
	{
		ret = ao1_control_requestWriteVpNoWait(MICROPHONE_ICON_VP, MICROPHONE_ACTIVE);
 8000aba:	2102      	movs	r1, #2
 8000abc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000ac0:	f7ff ff94 	bl	80009ec <ao1_control_requestWriteVpNoWait>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	737b      	strb	r3, [r7, #13]
		return ret;	// Return false because icon state is out of bounds.
 8000ac8:	7b7b      	ldrb	r3, [r7, #13]
 8000aca:	e00b      	b.n	8000ae4 <ao1_control_changeMicprophoneState+0x5a>
	}
	else
	{

		NextState =  MicrophoneState - 1;
 8000acc:	897b      	ldrh	r3, [r7, #10]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	81fb      	strh	r3, [r7, #14]
		ret = ao1_control_requestWriteVpNoWait(MICROPHONE_ICON_VP, NextState);
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000ada:	f7ff ff87 	bl	80009ec <ao1_control_requestWriteVpNoWait>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	737b      	strb	r3, [r7, #13]
	}
	return ret;
 8000ae2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ao1_control_doNothing>:
		}
	}
	return ret;
}
bool ao1_control_doNothing(uint32_t value)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	// Nothing... Just return true
	return true;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <ao1_control_requestWriteInitialText>:
bool ao1_control_requestWriteInitialText(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
	char numberOfPages [5] = {'\0'};
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	753b      	strb	r3, [r7, #20]
	sprintf(numberOfPages,"1/%i",PAGES_DEFINED);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2201      	movs	r2, #1
 8000b18:	4916      	ldr	r1, [pc, #88]	; (8000b74 <ao1_control_requestWriteInitialText+0x70>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fae2 	bl	80060e4 <siprintf>
	char speakerSelection [5] = {"0"};
 8000b20:	2330      	movs	r3, #48	; 0x30
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	2300      	movs	r3, #0
 8000b26:	733b      	strb	r3, [r7, #12]
	char SpeakerOfflineCounter [3] = {"12"};
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <ao1_control_requestWriteInitialText+0x74>)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	8019      	strh	r1, [r3, #0]
 8000b32:	3302      	adds	r3, #2
 8000b34:	0c12      	lsrs	r2, r2, #16
 8000b36:	701a      	strb	r2, [r3, #0]

	Request_writeFirstPageTextBoxesTittles();
 8000b38:	f7ff fe20 	bl	800077c <Request_writeFirstPageTextBoxesTittles>

	Request_writeGenericText(SPEAKER_PAGE_COUNTER,numberOfPages, sizeof (numberOfPages));
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2205      	movs	r2, #5
 8000b42:	4619      	mov	r1, r3
 8000b44:	f242 0070 	movw	r0, #8304	; 0x2070
 8000b48:	f7ff fcd5 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_SELECTION_COUNTER,speakerSelection, sizeof(speakerSelection));
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2205      	movs	r2, #5
 8000b52:	4619      	mov	r1, r3
 8000b54:	f242 0075 	movw	r0, #8309	; 0x2075
 8000b58:	f7ff fccd 	bl	80004f6 <Request_writeGenericText>
	Request_writeGenericText(SPEAKER_OFFLINE_COUNTER,SpeakerOfflineCounter,sizeof(SpeakerOfflineCounter));
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2203      	movs	r2, #3
 8000b60:	4619      	mov	r1, r3
 8000b62:	f242 0077 	movw	r0, #8311	; 0x2077
 8000b66:	f7ff fcc6 	bl	80004f6 <Request_writeGenericText>

	return true;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08007688 	.word	0x08007688
 8000b78:	08007690 	.word	0x08007690

08000b7c <ao1_control_setSpeakerState>:
bool ao1_control_setSpeakerState(MQTT_t* Message)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if(Message->Status < SPEAKER_ICON_MAX && Message->Status < SPEAKER_ICON_MAX)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	2b09      	cmp	r3, #9
 8000b8a:	dc17      	bgt.n	8000bbc <ao1_control_setSpeakerState+0x40>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	2b09      	cmp	r3, #9
 8000b92:	dc13      	bgt.n	8000bbc <ao1_control_setSpeakerState+0x40>
	{
		uint16_t status = (uint16_t) Message->Status;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	81fb      	strh	r3, [r7, #14]
		uint16_t speakerVp = getSpeakerVp(Message->SpeakerNumber);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb91 	bl	80002c8 <getSpeakerVp>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81bb      	strh	r3, [r7, #12]
		if(speakerVp != 0)
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d005      	beq.n	8000bbc <ao1_control_setSpeakerState+0x40>
			ao1_control_requestWriteVpNoWait(speakerVp,status);
 8000bb0:	89fa      	ldrh	r2, [r7, #14]
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff18 	bl	80009ec <ao1_control_requestWriteVpNoWait>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <ao1_control_changePagebyButton>:
bool ao1_control_changePagebyButton(uint16_t direction)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	char numberOfPages [4] = {'\0'};
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
	bool ret = false;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
	if(direction == Left && g_actualPage != 0)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b0e      	cmp	r3, #14
 8000bde:	d121      	bne.n	8000c24 <ao1_control_changePagebyButton+0x5c>
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01d      	beq.n	8000c24 <ao1_control_changePagebyButton+0x5c>
	{
		uint8_t nextPage = (g_actualPage + 1) - 1;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	73bb      	strb	r3, [r7, #14]
		sprintf(numberOfPages,"%i/%i",nextPage,PAGES_DEFINED);
 8000bee:	7bba      	ldrb	r2, [r7, #14]
 8000bf0:	f107 0008 	add.w	r0, r7, #8
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4924      	ldr	r1, [pc, #144]	; (8000c88 <ao1_control_changePagebyButton+0xc0>)
 8000bf8:	f005 fa74 	bl	80060e4 <siprintf>
		ret = Request_writeGenericText(SPEAKER_PAGE_COUNTER,numberOfPages, sizeof (numberOfPages));
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2204      	movs	r2, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	f242 0070 	movw	r0, #8304	; 0x2070
 8000c08:	f7ff fc75 	bl	80004f6 <Request_writeGenericText>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
		if(ret)
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d02f      	beq.n	8000c76 <ao1_control_changePagebyButton+0xae>
			g_actualPage -= 1;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c20:	801a      	strh	r2, [r3, #0]
	{
 8000c22:	e028      	b.n	8000c76 <ao1_control_changePagebyButton+0xae>
	}
	else if (direction == Right)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d126      	bne.n	8000c78 <ao1_control_changePagebyButton+0xb0>
	{
		if((g_actualPage + 1) == PAGES_DEFINED)
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <ao1_control_changePagebyButton+0x6e>
			return ret;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	e021      	b.n	8000c7a <ao1_control_changePagebyButton+0xb2>

		uint8_t nextPage = (g_actualPage + 1) + 1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	737b      	strb	r3, [r7, #13]
		sprintf(numberOfPages,"%i/%i",nextPage,PAGES_DEFINED);
 8000c40:	7b7a      	ldrb	r2, [r7, #13]
 8000c42:	f107 0008 	add.w	r0, r7, #8
 8000c46:	2301      	movs	r3, #1
 8000c48:	490f      	ldr	r1, [pc, #60]	; (8000c88 <ao1_control_changePagebyButton+0xc0>)
 8000c4a:	f005 fa4b 	bl	80060e4 <siprintf>
		ret = Request_writeGenericText(SPEAKER_PAGE_COUNTER,numberOfPages, sizeof (numberOfPages));
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2204      	movs	r2, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	f242 0070 	movw	r0, #8304	; 0x2070
 8000c5a:	f7ff fc4c 	bl	80004f6 <Request_writeGenericText>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
		if(ret)
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <ao1_control_changePagebyButton+0xb0>
			g_actualPage += 1;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <ao1_control_changePagebyButton+0xbc>)
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e000      	b.n	8000c78 <ao1_control_changePagebyButton+0xb0>
	{
 8000c76:	bf00      	nop
	}

	return ret;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	08007694 	.word	0x08007694

08000c8c <ao1_control_fetchButtonStates>:


bool ao1_control_fetchButtonStates (void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
	uint16_t speakerState = 0, NextState = 0, SpeakerVp = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	807b      	strh	r3, [r7, #2]
 8000c96:	2300      	movs	r3, #0
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	80bb      	strh	r3, [r7, #4]

	for (int page = 0 ; page< PAGES_DEFINED; page++ )
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e017      	b.n	8000cd4 <ao1_control_fetchButtonStates+0x48>
	{
		for (int SpakerId = 1; SpakerId <= SPEAKERS_PER_PAGE; SpakerId++)
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	e00e      	b.n	8000cc8 <ao1_control_fetchButtonStates+0x3c>
		{
			g_IconStates[page].iconLastState[SpakerId - 1] = 0;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1e59      	subs	r1, r3, #1
 8000cae:	4825      	ldr	r0, [pc, #148]	; (8000d44 <ao1_control_fetchButtonStates+0xb8>)
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int SpakerId = 1; SpakerId <= SPEAKERS_PER_PAGE; SpakerId++)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	dded      	ble.n	8000caa <ao1_control_fetchButtonStates+0x1e>
	for (int page = 0 ; page< PAGES_DEFINED; page++ )
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dde4      	ble.n	8000ca4 <ao1_control_fetchButtonStates+0x18>
		}
	}

	for (int page = 0 ; page < PAGES_DEFINED ; page ++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e028      	b.n	8000d32 <ao1_control_fetchButtonStates+0xa6>
	{
		for (int SpeakerId  = 1 ; SpeakerId <= SPEAKERS_PER_PAGE; SpeakerId ++  )
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	e01f      	b.n	8000d26 <ao1_control_fetchButtonStates+0x9a>
		{
			SpeakerVp = getSpeakerVp(SpeakerId);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff faec 	bl	80002c8 <getSpeakerVp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80bb      	strh	r3, [r7, #4]
			if ( true == Request_IconState(SpeakerVp, &speakerState))
 8000cf4:	1cba      	adds	r2, r7, #2
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fda4 	bl	8000848 <Request_IconState>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00c      	beq.n	8000d20 <ao1_control_fetchButtonStates+0x94>
				g_IconStates[page].iconLastState[SpeakerId - 1] = speakerState;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1e59      	subs	r1, r3, #1
 8000d0a:	887c      	ldrh	r4, [r7, #2]
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <ao1_control_fetchButtonStates+0xb8>)
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int SpeakerId  = 1 ; SpeakerId <= SPEAKERS_PER_PAGE; SpeakerId ++  )
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b0c      	cmp	r3, #12
 8000d2a:	dddc      	ble.n	8000ce6 <ao1_control_fetchButtonStates+0x5a>
	for (int page = 0 ; page < PAGES_DEFINED ; page ++)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	ddd3      	ble.n	8000ce0 <ao1_control_fetchButtonStates+0x54>
		}
	}
	return true;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000120 	.word	0x20000120

08000d48 <request_changeSpeakerState>:
	//...
	return true;
}

bool request_changeSpeakerState(uint16_t SpeakerId)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	ao1_control_changeSpeakerState(SpeakerId);
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe5c 	bl	8000a12 <ao1_control_changeSpeakerState>
	HAL_Delay(10);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f001 fcf4 	bl	8002748 <HAL_Delay>
	ClearBufferindexes();
 8000d60:	f000 f89c 	bl	8000e9c <ClearBufferindexes>
	return true;
 8000d64:	2301      	movs	r3, #1

}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <request_changeMicrophoneState>:
bool request_changeMicrophoneState(uint16_t MicId)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
	ao1_control_changeMicprophoneState(MicId);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe85 	bl	8000a8a <ao1_control_changeMicprophoneState>
	HAL_Delay(10);
 8000d80:	200a      	movs	r0, #10
 8000d82:	f001 fce1 	bl	8002748 <HAL_Delay>
	ClearBufferindexes();
 8000d86:	f000 f889 	bl	8000e9c <ClearBufferindexes>
	return true;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <request_changePage>:

bool request_changePage(uint16_t direction)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	ao1_control_changePagebyButton(direction);
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff11 	bl	8000bc8 <ao1_control_changePagebyButton>
}
 8000da6:	bf00      	nop
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <MX_DMA_Init>:
bool ao0_app_CreatePages(void)
{
	return true;
}
static void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_DMA_Init+0x48>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <MX_DMA_Init+0x48>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MX_DMA_Init+0x48>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f001 fdb7 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dd8:	200d      	movs	r0, #13
 8000dda:	f001 fdd0 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200f      	movs	r0, #15
 8000de4:	f001 fdaf 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000de8:	200f      	movs	r0, #15
 8000dea:	f001 fdc8 	bl	800297e <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <ao0_appInit>:
	
	return true;
}

bool ao0_appInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	/*	Should be placed first	*/

	/*	Initialize ST HAL	*/
	if (HAL_OK != HAL_Init())
 8000e00:	f001 fc50 	bl	80026a4 <HAL_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <ao0_appInit+0x12>
		return false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e044      	b.n	8000e98 <ao0_appInit+0x9c>

	/*	Initialize Application Framework I/O Pins	*/
	if (!af_io_init())
 8000e0e:	f001 f89d 	bl	8001f4c <af_io_init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f083 0301 	eor.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <ao0_appInit+0x26>
		return false;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e03a      	b.n	8000e98 <ao0_appInit+0x9c>

	MX_DMA_Init();
 8000e22:	f7ff ffc5 	bl	8000db0 <MX_DMA_Init>

	/*	Initialize Communication betweeen pc and nucleo board	*/
	if (!USART2_Init(DEFAULT_BAUDRATE_USART_2))
 8000e26:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000e2a:	f000 ff11 	bl	8001c50 <USART2_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <ao0_appInit+0x42>
		return false;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e02c      	b.n	8000e98 <ao0_appInit+0x9c>

	/*	Initialize Communication betweeen nucleo and ESP8266 module	*/
	if (!USART3_Init(DEFAULT_BAUDRATE_USART_3))
 8000e3e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000e42:	f000 ffbd 	bl	8001dc0 <USART3_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f083 0301 	eor.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <ao0_appInit+0x5a>
		return false;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e020      	b.n	8000e98 <ao0_appInit+0x9c>

	if(!ESP8266_Init())
 8000e56:	f000 fa43 	bl	80012e0 <ESP8266_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <ao0_appInit+0x6e>
		return false;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e016      	b.n	8000e98 <ao0_appInit+0x9c>

	/*	Initialize Communication betweeen LCD screen	*/
	if (!USART1_Init(DEFAULT_BAUDRATE_USART_1))
 8000e6a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000e6e:	f000 fe5f 	bl	8001b30 <USART1_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <ao0_appInit+0x86>
		return false;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e00a      	b.n	8000e98 <ao0_appInit+0x9c>

	/*	Initialize Parser */
	if (!Parser_init())
 8000e82:	f000 f817 	bl	8000eb4 <Parser_init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <ao0_appInit+0x9a>
		return false;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <ao0_appInit+0x9c>
	
	//	if (!Timers_Initialize())
	//		return false;
	//

	return true;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ClearBufferindexes>:
/**
 * @brief HAL for clearing buffer indexes.
 * 
 */
void ClearBufferindexes(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	USART1_clearRingBuffer();
 8000ea0:	f000 fecc 	bl	8001c3c <USART1_clearRingBuffer>
	//memset(uart2_buf,0,sizeof(uart2_buf));
	Secuence = WAITING_FOR_HEADER_H;
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <ClearBufferindexes+0x14>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000138 	.word	0x20000138

08000eb4 <Parser_init>:
 * 
 * @return true 
 * @return false 
 */
bool Parser_init(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	Secuence = WAITING_FOR_HEADER_H;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <Parser_init+0x18>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
	return true;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000138 	.word	0x20000138

08000ed0 <Parser_getMessage>:
 * @param ControlData Structure pointer of the resulting message
 * @return true 
 * @return false 
 */
bool Parser_getMessage(SerialData* ControlData)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	uint8_t buff;
	static volatile uint8_t i, length, addr_flag=0;
	bool MsgRcv = false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
	static bool keepGoing = true;
	volatile bool Timeout = false;
 8000edc:	2300      	movs	r3, #0
 8000ede:	737b      	strb	r3, [r7, #13]
	
	
	while ( (keepGoing = USART1_readByteNoWait(&buff)) && MsgRcv == false && !Timeout)
 8000ee0:	e139      	b.n	8001156 <Parser_getMessage+0x286>
//		{
//			Timeout = true;
//			ao1_control_requestSetInitialState();
//			break;
//		}
			switch (Secuence)
 8000ee2:	4b97      	ldr	r3, [pc, #604]	; (8001140 <Parser_getMessage+0x270>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b07      	cmp	r3, #7
 8000ee8:	f200 8134 	bhi.w	8001154 <Parser_getMessage+0x284>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Parser_getMessage+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08001157 	.word	0x08001157
 8000ef8:	08000f15 	.word	0x08000f15
 8000efc:	08000f41 	.word	0x08000f41
 8000f00:	08000f7d 	.word	0x08000f7d
 8000f04:	08000fa7 	.word	0x08000fa7
 8000f08:	08001009 	.word	0x08001009
 8000f0c:	08001099 	.word	0x08001099
 8000f10:	080010d1 	.word	0x080010d1

				case WAITING_FOR_HEADER_H:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						if (buff == HEADER_H)
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	2b5a      	cmp	r3, #90	; 0x5a
 8000f18:	f040 811d 	bne.w	8001156 <Parser_getMessage+0x286>
						{
							uart2_buf[i] = buff;
 8000f1c:	4b89      	ldr	r3, [pc, #548]	; (8001144 <Parser_getMessage+0x274>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	7bb9      	ldrb	r1, [r7, #14]
 8000f26:	4b88      	ldr	r3, [pc, #544]	; (8001148 <Parser_getMessage+0x278>)
 8000f28:	5499      	strb	r1, [r3, r2]
							i++;
 8000f2a:	4b86      	ldr	r3, [pc, #536]	; (8001144 <Parser_getMessage+0x274>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b83      	ldr	r3, [pc, #524]	; (8001144 <Parser_getMessage+0x274>)
 8000f36:	701a      	strb	r2, [r3, #0]
							Secuence = WAITING_FOR_HEADER_L;
 8000f38:	4b81      	ldr	r3, [pc, #516]	; (8001140 <Parser_getMessage+0x270>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
							//swTimer_set(TIMEOUT_TIMER);
						}
					}
					break;
 8000f3e:	e10a      	b.n	8001156 <Parser_getMessage+0x286>
				}
				case WAITING_FOR_HEADER_L:
				{
					//if (true == USART1_readByteNoWait(&buff))
						{
							if (buff == HEADER_L)
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2ba5      	cmp	r3, #165	; 0xa5
 8000f44:	d111      	bne.n	8000f6a <Parser_getMessage+0x9a>
							{
								uart2_buf[i] = buff;
 8000f46:	4b7f      	ldr	r3, [pc, #508]	; (8001144 <Parser_getMessage+0x274>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	7bb9      	ldrb	r1, [r7, #14]
 8000f50:	4b7d      	ldr	r3, [pc, #500]	; (8001148 <Parser_getMessage+0x278>)
 8000f52:	5499      	strb	r1, [r3, r2]
								i++;
 8000f54:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <Parser_getMessage+0x274>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <Parser_getMessage+0x274>)
 8000f60:	701a      	strb	r2, [r3, #0]
								Secuence = WAITING_FOR_BYTE_COUNT;
 8000f62:	4b77      	ldr	r3, [pc, #476]	; (8001140 <Parser_getMessage+0x270>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e0f5      	b.n	8001156 <Parser_getMessage+0x286>
								//swTimer_set(TIMEOUT_TIMER);
							}
							else
							{
								Secuence = WAITING_FOR_HEADER_H;
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <Parser_getMessage+0x270>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
								ClearBufferindexes();
 8000f70:	f7ff ff94 	bl	8000e9c <ClearBufferindexes>
								i = 0;
 8000f74:	4b73      	ldr	r3, [pc, #460]	; (8001144 <Parser_getMessage+0x274>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8000f7a:	e0ec      	b.n	8001156 <Parser_getMessage+0x286>
				case WAITING_FOR_BYTE_COUNT:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						//USART1_readByteNoWait(&buff);
						length = buff;
 8000f7c:	7bba      	ldrb	r2, [r7, #14]
 8000f7e:	4b73      	ldr	r3, [pc, #460]	; (800114c <Parser_getMessage+0x27c>)
 8000f80:	701a      	strb	r2, [r3, #0]
						uart2_buf[i] = buff;
 8000f82:	4b70      	ldr	r3, [pc, #448]	; (8001144 <Parser_getMessage+0x274>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7bb9      	ldrb	r1, [r7, #14]
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <Parser_getMessage+0x278>)
 8000f8e:	5499      	strb	r1, [r3, r2]
						i++;
 8000f90:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <Parser_getMessage+0x274>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <Parser_getMessage+0x274>)
 8000f9c:	701a      	strb	r2, [r3, #0]
						Secuence = WAITING_FOR_COMMAND;
 8000f9e:	4b68      	ldr	r3, [pc, #416]	; (8001140 <Parser_getMessage+0x270>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	701a      	strb	r2, [r3, #0]
						//swTimer_set(TIMEOUT_TIMER);
					}
					break;
 8000fa4:	e0d7      	b.n	8001156 <Parser_getMessage+0x286>
				}
				case WAITING_FOR_COMMAND:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						if (buff == WRITE_VP_COMMAND ||
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b82      	cmp	r3, #130	; 0x82
 8000faa:	d008      	beq.n	8000fbe <Parser_getMessage+0xee>
							buff == READ_VP_COMMAND	 ||
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
						if (buff == WRITE_VP_COMMAND ||
 8000fae:	2b83      	cmp	r3, #131	; 0x83
 8000fb0:	d005      	beq.n	8000fbe <Parser_getMessage+0xee>
							buff == WRITE_REG_COMMAND||
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
							buff == READ_VP_COMMAND	 ||
 8000fb4:	2b80      	cmp	r3, #128	; 0x80
 8000fb6:	d002      	beq.n	8000fbe <Parser_getMessage+0xee>
							buff == READ_REGISTER_COMMAND)
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
							buff == WRITE_REG_COMMAND||
 8000fba:	2b81      	cmp	r3, #129	; 0x81
 8000fbc:	d11b      	bne.n	8000ff6 <Parser_getMessage+0x126>
						{
							uart2_buf[i] = buff;
 8000fbe:	4b61      	ldr	r3, [pc, #388]	; (8001144 <Parser_getMessage+0x274>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	7bb9      	ldrb	r1, [r7, #14]
 8000fc8:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <Parser_getMessage+0x278>)
 8000fca:	5499      	strb	r1, [r3, r2]
							i++;
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <Parser_getMessage+0x274>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <Parser_getMessage+0x274>)
 8000fd8:	701a      	strb	r2, [r3, #0]
							length--;
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <Parser_getMessage+0x27c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <Parser_getMessage+0x27c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
							ControlData->cmdId = buff;
 8000fe8:	7bba      	ldrb	r2, [r7, #14]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	701a      	strb	r2, [r3, #0]
							Secuence = WAITING_FOR_ADDRESS;
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <Parser_getMessage+0x270>)
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e007      	b.n	8001006 <Parser_getMessage+0x136>
							//swTimer_set(TIMEOUT_TIMER);
						}
						else
						{
							ClearBufferindexes();
 8000ff6:	f7ff ff51 	bl	8000e9c <ClearBufferindexes>
							Secuence = WAITING_FOR_HEADER_H;
 8000ffa:	4b51      	ldr	r3, [pc, #324]	; (8001140 <Parser_getMessage+0x270>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
							i = 0;
 8001000:	4b50      	ldr	r3, [pc, #320]	; (8001144 <Parser_getMessage+0x274>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 8001006:	e0a6      	b.n	8001156 <Parser_getMessage+0x286>
				}
				case WAITING_FOR_ADDRESS:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						if (addr_flag == 0)
 8001008:	4b51      	ldr	r3, [pc, #324]	; (8001150 <Parser_getMessage+0x280>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d11e      	bne.n	8001050 <Parser_getMessage+0x180>
						{
							uart2_buf[i] = buff;
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <Parser_getMessage+0x274>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	7bb9      	ldrb	r1, [r7, #14]
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <Parser_getMessage+0x278>)
 800101e:	5499      	strb	r1, [r3, r2]
							i++;
 8001020:	4b48      	ldr	r3, [pc, #288]	; (8001144 <Parser_getMessage+0x274>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <Parser_getMessage+0x274>)
 800102c:	701a      	strb	r2, [r3, #0]
							length--;
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <Parser_getMessage+0x27c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b44      	ldr	r3, [pc, #272]	; (800114c <Parser_getMessage+0x27c>)
 800103a:	701a      	strb	r2, [r3, #0]
							ControlData->address = buff << 8;
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	b29b      	uxth	r3, r3
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	805a      	strh	r2, [r3, #2]
							addr_flag = 1;	// flag first time
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <Parser_getMessage+0x280>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e082      	b.n	8001156 <Parser_getMessage+0x286>
							//swTimer_set(TIMEOUT_TIMER);
						}
						else
						{
							//swTimer_set(TIMEOUT_TIMER);
							addr_flag = 0;
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <Parser_getMessage+0x280>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
							uart2_buf[i] = buff;
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <Parser_getMessage+0x274>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	7bb9      	ldrb	r1, [r7, #14]
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <Parser_getMessage+0x278>)
 8001062:	5499      	strb	r1, [r3, r2]
							i++;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <Parser_getMessage+0x274>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <Parser_getMessage+0x274>)
 8001070:	701a      	strb	r2, [r3, #0]
							ControlData->address |= buff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	885a      	ldrh	r2, [r3, #2]
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	805a      	strh	r2, [r3, #2]
							Secuence = WAITING_PY_WORD_LEN;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <Parser_getMessage+0x270>)
 8001084:	2206      	movs	r2, #6
 8001086:	701a      	strb	r2, [r3, #0]
							length--;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <Parser_getMessage+0x27c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3b01      	subs	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <Parser_getMessage+0x27c>)
 8001094:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 8001096:	e05e      	b.n	8001156 <Parser_getMessage+0x286>
				case WAITING_PY_WORD_LEN:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						//swTimer_set(TIMEOUT_TIMER);
						uart2_buf[i] = buff;
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <Parser_getMessage+0x274>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	7bb9      	ldrb	r1, [r7, #14]
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <Parser_getMessage+0x278>)
 80010a4:	5499      	strb	r1, [r3, r2]
						ControlData->py_wlen = buff;
 80010a6:	7bba      	ldrb	r2, [r7, #14]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	711a      	strb	r2, [r3, #4]
						Secuence = WAITING_FOR_PAYLOAD;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <Parser_getMessage+0x270>)
 80010ae:	2207      	movs	r2, #7
 80010b0:	701a      	strb	r2, [r3, #0]
						length--;
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <Parser_getMessage+0x27c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <Parser_getMessage+0x27c>)
 80010be:	701a      	strb	r2, [r3, #0]
						i++;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <Parser_getMessage+0x274>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <Parser_getMessage+0x274>)
 80010cc:	701a      	strb	r2, [r3, #0]
					}
					break;
 80010ce:	e042      	b.n	8001156 <Parser_getMessage+0x286>
				case WAITING_FOR_PAYLOAD:
				{
					//if (true == USART1_readByteNoWait(&buff))
					{
						//swTimer_set(TIMEOUT_TIMER);
						uart2_buf[i] = buff;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <Parser_getMessage+0x274>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	7bb9      	ldrb	r1, [r7, #14]
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <Parser_getMessage+0x278>)
 80010dc:	5499      	strb	r1, [r3, r2]
						i++;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <Parser_getMessage+0x274>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <Parser_getMessage+0x274>)
 80010ea:	701a      	strb	r2, [r3, #0]

						if (length > 1)
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <Parser_getMessage+0x27c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d90d      	bls.n	8001112 <Parser_getMessage+0x242>
						{
							ControlData->value = ((uint16_t)buff << 8);
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	80da      	strh	r2, [r3, #6]
							length--;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <Parser_getMessage+0x27c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <Parser_getMessage+0x27c>)
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e021      	b.n	8001156 <Parser_getMessage+0x286>
						}
						else
						{
							// Process last data in uart buffer
							ControlData->value |= buff;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	88da      	ldrh	r2, [r3, #6]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	80da      	strh	r2, [r3, #6]
							// Set MEF to first state:
							//swTimer_disable(TIMEOUT_TIMER);
							ClearBufferindexes();
 8001122:	f7ff febb 	bl	8000e9c <ClearBufferindexes>
							Secuence = WAITING_FOR_HEADER_L;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <Parser_getMessage+0x270>)
 8001128:	2202      	movs	r2, #2
 800112a:	701a      	strb	r2, [r3, #0]
							length=0;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <Parser_getMessage+0x27c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
							i = 0;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <Parser_getMessage+0x274>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
							MsgRcv = true;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
						}
					}
					break;
 800113c:	e00b      	b.n	8001156 <Parser_getMessage+0x286>
 800113e:	bf00      	nop
 8001140:	20000138 	.word	0x20000138
 8001144:	200001a0 	.word	0x200001a0
 8001148:	2000013c 	.word	0x2000013c
 800114c:	200001a1 	.word	0x200001a1
 8001150:	200001a2 	.word	0x200001a2
				}
				default:
					break;
 8001154:	bf00      	nop
	while ( (keepGoing = USART1_readByteNoWait(&buff)) && MsgRcv == false && !Timeout)
 8001156:	f107 030e 	add.w	r3, r7, #14
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd54 	bl	8001c08 <USART1_readByteNoWait>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <Parser_getMessage+0x2c8>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <Parser_getMessage+0x2c8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00d      	beq.n	800118c <Parser_getMessage+0x2bc>
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <Parser_getMessage+0x2bc>
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f083 0301 	eor.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f aeab 	bne.w	8000ee2 <Parser_getMessage+0x12>
			}
		}
		return MsgRcv;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000008f 	.word	0x2000008f

0800119c <Parser_startRequest>:
 * @param DataReq Structure pointer where incoming data will be saved
 * @return true   Response successfuly received
 * @return false  Timeout expired
 */
bool Parser_startRequest(VP_Req *DataReq)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	bool MsgReceived = false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
	SerialData ControlData = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
	
	//swTimer_set(TIMEOUT_TIMER);
		
	if (true == Parser_getMessage(&ControlData))
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe8a 	bl	8000ed0 <Parser_getMessage>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <Parser_startRequest+0x30>
	{
		DataReq->resp.value = ControlData.value;
 80011c2:	8a7a      	ldrh	r2, [r7, #18]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	801a      	strh	r2, [r3, #0]
		MsgReceived = true;
 80011c8:	2301      	movs	r3, #1
 80011ca:	75fb      	strb	r3, [r7, #23]
	}

	return MsgReceived;						
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <Parser_fetchUserInteraction>:
 * response and executes control/execution callbacks according to a table.
 * @return true   
 * @return false 
 */
bool Parser_fetchUserInteraction(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
	SerialData ControlData;
	bool ret = false;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
	Secuence = WAITING_FOR_HEADER_H;
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <Parser_fetchUserInteraction+0xd0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]

	if (true == Parser_getMessage(&ControlData))
 80011e8:	463b      	mov	r3, r7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe70 	bl	8000ed0 <Parser_getMessage>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d052      	beq.n	800129c <Parser_fetchUserInteraction+0xc4>
	{
		/*	Initialize/Restart Session Timer because of user interaction */
		//swTimer_set(TIMEOUT_TIMER);

			for (int i = 0 ; i < TableSize; i ++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	e049      	b.n	8001290 <Parser_fetchUserInteraction+0xb8>
			{
				//if (ScreeenBehaviour[i].Page == g_actualPage)				// ... if we are in this page
				{
					if (ScreeenBehaviour[i].Address == ControlData.address) // .. and we received a message with this address
 80011fc:	492b      	ldr	r1, [pc, #172]	; (80012ac <Parser_fetchUserInteraction+0xd4>)
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3302      	adds	r3, #2
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	429a      	cmp	r2, r3
 8001212:	d13a      	bne.n	800128a <Parser_fetchUserInteraction+0xb2>
					{
						switch (ControlData.address)						// .. identify address
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
 800121a:	2b03      	cmp	r3, #3
 800121c:	d831      	bhi.n	8001282 <Parser_fetchUserInteraction+0xaa>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <Parser_fetchUserInteraction+0x4c>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001235 	.word	0x08001235
 8001228:	0800124f 	.word	0x0800124f
 800122c:	08001269 	.word	0x08001269
 8001230:	08001283 	.word	0x08001283
						{													// .. PageControl addresses.
							case Speakers:
								ScreeenBehaviour[i].FunctionCb(ControlData.value);
 8001234:	491d      	ldr	r1, [pc, #116]	; (80012ac <Parser_fetchUserInteraction+0xd4>)
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	4610      	mov	r0, r2
 800124a:	4798      	blx	r3
								break;
 800124c:	e01a      	b.n	8001284 <Parser_fetchUserInteraction+0xac>
							case Microphone:
								ScreeenBehaviour[i].FunctionCb(ControlData.value);
 800124e:	4917      	ldr	r1, [pc, #92]	; (80012ac <Parser_fetchUserInteraction+0xd4>)
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	4610      	mov	r0, r2
 8001264:	4798      	blx	r3
								break;
 8001266:	e00d      	b.n	8001284 <Parser_fetchUserInteraction+0xac>
							case PagingControl:
								ScreeenBehaviour[i].FunctionCb(ControlData.value);
 8001268:	4910      	ldr	r1, [pc, #64]	; (80012ac <Parser_fetchUserInteraction+0xd4>)
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	3304      	adds	r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	4610      	mov	r0, r2
 800127e:	4798      	blx	r3
								break;
 8001280:	e000      	b.n	8001284 <Parser_fetchUserInteraction+0xac>
							case Emergency:
								break;
							default:										// .. Execution addresses
								//(ScreeenBehaviour[i].FunctionCb)(ControlData.value);
							break;
 8001282:	bf00      	nop
						}
						/*	if the current page is 0, catch the case of 2 digits input and swap page */
						ret = true;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
						break;
 8001288:	e008      	b.n	800129c <Parser_fetchUserInteraction+0xc4>
			for (int i = 0 ; i < TableSize; i ++)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3301      	adds	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <Parser_fetchUserInteraction+0xd8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4293      	cmp	r3, r2
 800129a:	dbaf      	blt.n	80011fc <Parser_fetchUserInteraction+0x24>
					}
				}
			}
	}
	return ret;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000138 	.word	0x20000138
 80012ac:	08007a04 	.word	0x08007a04
 80012b0:	08007a34 	.word	0x08007a34

080012b4 <ESP_Send>:
	CONNECTED,
}Esp8266_states_e;
Esp8266_states_e Secuence;

static void ESP_Send(char* data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	_USART3_TransmitData((uint8_t*)data);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fdf1 	bl	8001ea4 <_USART3_TransmitData>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <PC_Send>:
static void PC_Send(char* data)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	_USART2_TransmitData((uint8_t*)data);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fd08 	bl	8001ce8 <_USART2_TransmitData>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <ESP8266_Init>:
{
	USART3_readData((uint8_t*)data, len, timeout);
}

bool ESP8266_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	/*	Initialization:	*/

#ifdef USART_3_DMA_DRIVEN_MODE
	Secuence = AT;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <ESP8266_Init+0x14>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	701a      	strb	r2, [r3, #0]
	sm_initByDMA();
 80012ea:	f000 f805 	bl	80012f8 <sm_initByDMA>
#else
	sm_initByPolling();
#endif

	return true;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001a3 	.word	0x200001a3

080012f8 <sm_initByDMA>:

void sm_initByDMA (void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a0      	sub	sp, #128	; 0x80
 80012fc:	af00      	add	r7, sp, #0
	uint8_t data[80] = {0};
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001306:	224c      	movs	r2, #76	; 0x4c
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fee2 	bl	80060d4 <memset>
	char dataWifiCfg[40]= {0};
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2224      	movs	r2, #36	; 0x24
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fed9 	bl	80060d4 <memset>
	bool connected = false;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	while(!connected)
 8001328:	e216      	b.n	8001758 <sm_initByDMA+0x460>
	{
		switch(Secuence)
 800132a:	4bbe      	ldr	r3, [pc, #760]	; (8001624 <sm_initByDMA+0x32c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b09      	cmp	r3, #9
 8001330:	f200 8212 	bhi.w	8001758 <sm_initByDMA+0x460>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <sm_initByDMA+0x44>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	08001365 	.word	0x08001365
 8001340:	080013c3 	.word	0x080013c3
 8001344:	0800140d 	.word	0x0800140d
 8001348:	0800146b 	.word	0x0800146b
 800134c:	080014c9 	.word	0x080014c9
 8001350:	08001527 	.word	0x08001527
 8001354:	080015b5 	.word	0x080015b5
 8001358:	08001695 	.word	0x08001695
 800135c:	08001703 	.word	0x08001703
 8001360:	0800174b 	.word	0x0800174b
		{
			case RESTORE:
			{
				memset(data,'\0',sizeof(data));
 8001364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001368:	2250      	movs	r2, #80	; 0x50
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f004 feb1 	bl	80060d4 <memset>
				do
				{
					PC_Send("Restore command:\r\n");
 8001372:	48ad      	ldr	r0, [pc, #692]	; (8001628 <sm_initByDMA+0x330>)
 8001374:	f7ff ffa9 	bl	80012ca <PC_Send>
					ESP_Send("AT+RESTORE\r\n");
 8001378:	48ac      	ldr	r0, [pc, #688]	; (800162c <sm_initByDMA+0x334>)
 800137a:	f7ff ff9b 	bl	80012b4 <ESP_Send>
					HAL_Delay(5000);
 800137e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001382:	f001 f9e1 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 8001386:	f000 fda3 	bl	8001ed0 <USART3_isFrameReady>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ed      	bne.n	8001372 <sm_initByDMA+0x7a>
				Secuence = AT;
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <sm_initByDMA+0x32c>)
 8001398:	2202      	movs	r2, #2
 800139a:	701a      	strb	r2, [r3, #0]
				USART3_getFrame(data);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fdad 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"ready"))
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	49a1      	ldr	r1, [pc, #644]	; (8001630 <sm_initByDMA+0x338>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 feb9 	bl	8006124 <strstr>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 81cf 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("ESP8266 factory reset completed\r\n");
 80013ba:	489e      	ldr	r0, [pc, #632]	; (8001634 <sm_initByDMA+0x33c>)
 80013bc:	f7ff ff85 	bl	80012ca <PC_Send>

				}
			}break;
 80013c0:	e1ca      	b.n	8001758 <sm_initByDMA+0x460>
			case RESET_MODULE:
			{
				memset(data,'\0',sizeof(data));
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	2250      	movs	r2, #80	; 0x50
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fe82 	bl	80060d4 <memset>
				do
				{
					PC_Send("Reset command:\r\n");
 80013d0:	4899      	ldr	r0, [pc, #612]	; (8001638 <sm_initByDMA+0x340>)
 80013d2:	f7ff ff7a 	bl	80012ca <PC_Send>
					ESP_Send("AT+RST\r\n");
 80013d6:	4899      	ldr	r0, [pc, #612]	; (800163c <sm_initByDMA+0x344>)
 80013d8:	f7ff ff6c 	bl	80012b4 <ESP_Send>
					HAL_Delay(5000);
 80013dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80013e0:	f001 f9b2 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 80013e4:	f000 fd74 	bl	8001ed0 <USART3_isFrameReady>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ed      	bne.n	80013d0 <sm_initByDMA+0xd8>
				Secuence = AT;
 80013f4:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <sm_initByDMA+0x32c>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
				USART3_getFrame(data);
 80013fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fd7e 	bl	8001f00 <USART3_getFrame>
				//if(strstr((char*)data,"ready"))
				{
					PC_Send("ESP8266 reseted successfuly\r\n");
 8001404:	488e      	ldr	r0, [pc, #568]	; (8001640 <sm_initByDMA+0x348>)
 8001406:	f7ff ff60 	bl	80012ca <PC_Send>

				}
			}break;
 800140a:	e1a5      	b.n	8001758 <sm_initByDMA+0x460>
			case AT:
			{
				memset(data,'\0',sizeof(data));
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	2250      	movs	r2, #80	; 0x50
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fe5d 	bl	80060d4 <memset>
				do
				{
					PC_Send("Sending AT command:\r\n");
 800141a:	488a      	ldr	r0, [pc, #552]	; (8001644 <sm_initByDMA+0x34c>)
 800141c:	f7ff ff55 	bl	80012ca <PC_Send>
					ESP_Send("AT\r\n");
 8001420:	4889      	ldr	r0, [pc, #548]	; (8001648 <sm_initByDMA+0x350>)
 8001422:	f7ff ff47 	bl	80012b4 <ESP_Send>
					HAL_Delay(3000);
 8001426:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800142a:	f001 f98d 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 800142e:	f000 fd4f 	bl	8001ed0 <USART3_isFrameReady>
 8001432:	4603      	mov	r3, r0
 8001434:	f083 0301 	eor.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ed      	bne.n	800141a <sm_initByDMA+0x122>

				USART3_getFrame(data);
 800143e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fd5c 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"AT\r\n\r\nOK\r\n"))
 8001448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144c:	497f      	ldr	r1, [pc, #508]	; (800164c <sm_initByDMA+0x354>)
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fe68 	bl	8006124 <strstr>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 817e 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("AT---->OK\r\n");
 800145c:	487c      	ldr	r0, [pc, #496]	; (8001650 <sm_initByDMA+0x358>)
 800145e:	f7ff ff34 	bl	80012ca <PC_Send>
					Secuence = CWMODE;
 8001462:	4b70      	ldr	r3, [pc, #448]	; (8001624 <sm_initByDMA+0x32c>)
 8001464:	2203      	movs	r2, #3
 8001466:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8001468:	e176      	b.n	8001758 <sm_initByDMA+0x460>
			case CWMODE:
			{
				memset(data,'\0',sizeof(data));
 800146a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146e:	2250      	movs	r2, #80	; 0x50
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fe2e 	bl	80060d4 <memset>
				do
				{
					PC_Send("Sending CWMODE command:\r\n");
 8001478:	4876      	ldr	r0, [pc, #472]	; (8001654 <sm_initByDMA+0x35c>)
 800147a:	f7ff ff26 	bl	80012ca <PC_Send>
					ESP_Send("AT+CWMODE=1\r\n");
 800147e:	4876      	ldr	r0, [pc, #472]	; (8001658 <sm_initByDMA+0x360>)
 8001480:	f7ff ff18 	bl	80012b4 <ESP_Send>
					HAL_Delay(2000);
 8001484:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001488:	f001 f95e 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 800148c:	f000 fd20 	bl	8001ed0 <USART3_isFrameReady>
 8001490:	4603      	mov	r3, r0
 8001492:	f083 0301 	eor.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ed      	bne.n	8001478 <sm_initByDMA+0x180>

				USART3_getFrame(data);
 800149c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd2d 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"AT+CWMODE=1\r\n\r\nOK\r\n"))
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	496c      	ldr	r1, [pc, #432]	; (800165c <sm_initByDMA+0x364>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fe39 	bl	8006124 <strstr>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 814f 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("AT+CWMODE---->OK\r\n");
 80014ba:	4869      	ldr	r0, [pc, #420]	; (8001660 <sm_initByDMA+0x368>)
 80014bc:	f7ff ff05 	bl	80012ca <PC_Send>
					Secuence = CWJAP;
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <sm_initByDMA+0x32c>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80014c6:	e147      	b.n	8001758 <sm_initByDMA+0x460>
			case CWJAP:
			{
				memset(data,'\0',sizeof(data));
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	2250      	movs	r2, #80	; 0x50
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fdff 	bl	80060d4 <memset>
				do
				{
					PC_Send("Sending CWJAP command:\r\n");
 80014d6:	4863      	ldr	r0, [pc, #396]	; (8001664 <sm_initByDMA+0x36c>)
 80014d8:	f7ff fef7 	bl	80012ca <PC_Send>
					ESP_Send("AT+CWJAP=\"Tim Gabi-2.4Ghz\",\"17761395\"\r\n");
 80014dc:	4862      	ldr	r0, [pc, #392]	; (8001668 <sm_initByDMA+0x370>)
 80014de:	f7ff fee9 	bl	80012b4 <ESP_Send>
					HAL_Delay(5000);
 80014e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e6:	f001 f92f 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 80014ea:	f000 fcf1 	bl	8001ed0 <USART3_isFrameReady>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ed      	bne.n	80014d6 <sm_initByDMA+0x1de>

				USART3_getFrame(data);
 80014fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fcfe 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"WIFI GOT IP\r\n\r\nOK\r\n"))
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	4958      	ldr	r1, [pc, #352]	; (800166c <sm_initByDMA+0x374>)
 800150a:	4618      	mov	r0, r3
 800150c:	f004 fe0a 	bl	8006124 <strstr>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8120 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("CONNECTED!\r\n");
 8001518:	4855      	ldr	r0, [pc, #340]	; (8001670 <sm_initByDMA+0x378>)
 800151a:	f7ff fed6 	bl	80012ca <PC_Send>
					Secuence = MQTTUSERCFG;
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <sm_initByDMA+0x32c>)
 8001520:	2205      	movs	r2, #5
 8001522:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8001524:	e118      	b.n	8001758 <sm_initByDMA+0x460>
			case MQTTUSERCFG:
			{
				memset(data,'\0',sizeof(data));
 8001526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152a:	2250      	movs	r2, #80	; 0x50
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fdd0 	bl	80060d4 <memset>
				do
				{
					PC_Send("Sending MQTTUSERCFG command:\r\n");
 8001534:	484f      	ldr	r0, [pc, #316]	; (8001674 <sm_initByDMA+0x37c>)
 8001536:	f7ff fec8 	bl	80012ca <PC_Send>
					sprintf((char*)data,"AT+MQTTUSERCFG=0,1,\"ESP8266\",\"admin\",\"admin\",0,0,\"\"\r\n");
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	494e      	ldr	r1, [pc, #312]	; (8001678 <sm_initByDMA+0x380>)
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fdcf 	bl	80060e4 <siprintf>
					ESP_Send(data);
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff feb2 	bl	80012b4 <ESP_Send>
					HAL_Delay(5000);
 8001550:	f241 3088 	movw	r0, #5000	; 0x1388
 8001554:	f001 f8f8 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 8001558:	f000 fcba 	bl	8001ed0 <USART3_isFrameReady>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e5      	bne.n	8001534 <sm_initByDMA+0x23c>

				USART3_getFrame(data);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fcc7 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"OK\r\n"))
 8001572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001576:	4941      	ldr	r1, [pc, #260]	; (800167c <sm_initByDMA+0x384>)
 8001578:	4618      	mov	r0, r3
 800157a:	f004 fdd3 	bl	8006124 <strstr>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <sm_initByDMA+0x29a>
				{
					PC_Send("MQTTUSERCFG---->OK\r\n");
 8001584:	483e      	ldr	r0, [pc, #248]	; (8001680 <sm_initByDMA+0x388>)
 8001586:	f7ff fea0 	bl	80012ca <PC_Send>
					Secuence = MQTTCONN;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <sm_initByDMA+0x32c>)
 800158c:	2206      	movs	r2, #6
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e0e2      	b.n	8001758 <sm_initByDMA+0x460>
				}
				else if (strstr((char*)data,"ERROR"))
 8001592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001596:	493b      	ldr	r1, [pc, #236]	; (8001684 <sm_initByDMA+0x38c>)
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fdc3 	bl	8006124 <strstr>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80d9 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("MQTTUSERCFG---->OK\r\n");
 80015a6:	4836      	ldr	r0, [pc, #216]	; (8001680 <sm_initByDMA+0x388>)
 80015a8:	f7ff fe8f 	bl	80012ca <PC_Send>
					Secuence = RESET_MODULE;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <sm_initByDMA+0x32c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80015b2:	e0d1      	b.n	8001758 <sm_initByDMA+0x460>
			case MQTTCONN:
			{
				memset(data,'\0',sizeof(data));
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	2250      	movs	r2, #80	; 0x50
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fd89 	bl	80060d4 <memset>
				sprintf((char*)data,"AT+MQTTCONN=0,\"192.168.1.6\",1883,0\r\n");
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	4930      	ldr	r1, [pc, #192]	; (8001688 <sm_initByDMA+0x390>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fd8b 	bl	80060e4 <siprintf>
				do
				{
					PC_Send("Sending MQTTCONN command:\r\n");
 80015ce:	482f      	ldr	r0, [pc, #188]	; (800168c <sm_initByDMA+0x394>)
 80015d0:	f7ff fe7b 	bl	80012ca <PC_Send>
					ESP_Send(data);
 80015d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe6b 	bl	80012b4 <ESP_Send>
					HAL_Delay(2000);
 80015de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015e2:	f001 f8b1 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 80015e6:	f000 fc73 	bl	8001ed0 <USART3_isFrameReady>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1eb      	bne.n	80015ce <sm_initByDMA+0x2d6>

				USART3_getFrame(data);
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fc80 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"OK\r\n"))
 8001600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001604:	491d      	ldr	r1, [pc, #116]	; (800167c <sm_initByDMA+0x384>)
 8001606:	4618      	mov	r0, r3
 8001608:	f004 fd8c 	bl	8006124 <strstr>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a2 	beq.w	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("MQTTCONN---->OK\r\n");
 8001614:	481e      	ldr	r0, [pc, #120]	; (8001690 <sm_initByDMA+0x398>)
 8001616:	f7ff fe58 	bl	80012ca <PC_Send>
					Secuence = MQTTSUB;
 800161a:	4b02      	ldr	r3, [pc, #8]	; (8001624 <sm_initByDMA+0x32c>)
 800161c:	2207      	movs	r2, #7
 800161e:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8001620:	e09a      	b.n	8001758 <sm_initByDMA+0x460>
 8001622:	bf00      	nop
 8001624:	200001a3 	.word	0x200001a3
 8001628:	0800769c 	.word	0x0800769c
 800162c:	080076b0 	.word	0x080076b0
 8001630:	080076c0 	.word	0x080076c0
 8001634:	080076c8 	.word	0x080076c8
 8001638:	080076ec 	.word	0x080076ec
 800163c:	08007700 	.word	0x08007700
 8001640:	0800770c 	.word	0x0800770c
 8001644:	0800772c 	.word	0x0800772c
 8001648:	08007744 	.word	0x08007744
 800164c:	0800774c 	.word	0x0800774c
 8001650:	08007758 	.word	0x08007758
 8001654:	08007764 	.word	0x08007764
 8001658:	08007780 	.word	0x08007780
 800165c:	08007790 	.word	0x08007790
 8001660:	080077a4 	.word	0x080077a4
 8001664:	080077b8 	.word	0x080077b8
 8001668:	080077d4 	.word	0x080077d4
 800166c:	080077fc 	.word	0x080077fc
 8001670:	08007810 	.word	0x08007810
 8001674:	08007820 	.word	0x08007820
 8001678:	08007840 	.word	0x08007840
 800167c:	08007878 	.word	0x08007878
 8001680:	08007880 	.word	0x08007880
 8001684:	08007898 	.word	0x08007898
 8001688:	080078a0 	.word	0x080078a0
 800168c:	080078c8 	.word	0x080078c8
 8001690:	080078e4 	.word	0x080078e4
			case MQTTSUB:
			{
				memset(data,'\0',sizeof(data));
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	2250      	movs	r2, #80	; 0x50
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fd19 	bl	80060d4 <memset>
				sprintf((char*)data,"AT+MQTTSUB=0,\"#\",2\r\n");
 80016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a6:	4933      	ldr	r1, [pc, #204]	; (8001774 <sm_initByDMA+0x47c>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fd1b 	bl	80060e4 <siprintf>
				do
				{
					PC_Send("Sending MQTTSUB command:\r\n");
 80016ae:	4832      	ldr	r0, [pc, #200]	; (8001778 <sm_initByDMA+0x480>)
 80016b0:	f7ff fe0b 	bl	80012ca <PC_Send>
					ESP_Send(data);
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fdfb 	bl	80012b4 <ESP_Send>
					HAL_Delay(2000);
 80016be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c2:	f001 f841 	bl	8002748 <HAL_Delay>

				}while(!USART3_isFrameReady());
 80016c6:	f000 fc03 	bl	8001ed0 <USART3_isFrameReady>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1eb      	bne.n	80016ae <sm_initByDMA+0x3b6>

				USART3_getFrame(data);
 80016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fc10 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"OK\r\n"))
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	4925      	ldr	r1, [pc, #148]	; (800177c <sm_initByDMA+0x484>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 fd1c 	bl	8006124 <strstr>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d032      	beq.n	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("MQTTSUB---->OK\r\n");
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <sm_initByDMA+0x488>)
 80016f4:	f7ff fde9 	bl	80012ca <PC_Send>
					//Secuence = CONNECTED;
					Secuence = CONNECTED;
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <sm_initByDMA+0x48c>)
 80016fa:	2209      	movs	r2, #9
 80016fc:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80016fe:	e02b      	b.n	8001758 <sm_initByDMA+0x460>
			case GET_RETAIN_MESSAGES:
 8001700:	bf00      	nop
			{	/*	The idea was to get Retained messages here, but i could not make it. */
				do
				{
					PC_Send("Waiting Retained messages:\r\n");
 8001702:	4821      	ldr	r0, [pc, #132]	; (8001788 <sm_initByDMA+0x490>)
 8001704:	f7ff fde1 	bl	80012ca <PC_Send>
					HAL_Delay(2000);
 8001708:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800170c:	f001 f81c 	bl	8002748 <HAL_Delay>
				}while(!USART3_isFrameReady());
 8001710:	f000 fbde 	bl	8001ed0 <USART3_isFrameReady>
 8001714:	4603      	mov	r3, r0
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ef      	bne.n	8001700 <sm_initByDMA+0x408>
				USART3_getFrame(data);
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fbeb 	bl	8001f00 <USART3_getFrame>
				if(strstr((char*)data,"RECEIVE"))
 800172a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172e:	4917      	ldr	r1, [pc, #92]	; (800178c <sm_initByDMA+0x494>)
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fcf7 	bl	8006124 <strstr>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00d      	beq.n	8001758 <sm_initByDMA+0x460>
				{
					PC_Send("");
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <sm_initByDMA+0x498>)
 800173e:	f7ff fdc4 	bl	80012ca <PC_Send>
					//Secuence = CONNECTED;
					Secuence = CONNECTED;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <sm_initByDMA+0x48c>)
 8001744:	2209      	movs	r2, #9
 8001746:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8001748:	e006      	b.n	8001758 <sm_initByDMA+0x460>
			case CONNECTED:
			{
				PC_Send("ESP8266:Initialization finished \r\n");
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <sm_initByDMA+0x49c>)
 800174c:	f7ff fdbd 	bl	80012ca <PC_Send>
				connected = true;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} break;
 8001756:	bf00      	nop
	while(!connected)
 8001758:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800175c:	f083 0301 	eor.w	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ade1 	bne.w	800132a <sm_initByDMA+0x32>
		}
	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3780      	adds	r7, #128	; 0x80
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	080078f8 	.word	0x080078f8
 8001778:	08007910 	.word	0x08007910
 800177c:	08007878 	.word	0x08007878
 8001780:	0800792c 	.word	0x0800792c
 8001784:	200001a3 	.word	0x200001a3
 8001788:	08007940 	.word	0x08007940
 800178c:	08007960 	.word	0x08007960
 8001790:	08007968 	.word	0x08007968
 8001794:	0800796c 	.word	0x0800796c

08001798 <ESP8266_ParserMessage>:
		PC_Send("MQTTPUB---->OK\r\n");

}

void ESP8266_ParserMessage(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0a2      	sub	sp, #136	; 0x88
 800179c:	af00      	add	r7, sp, #0
	/*	Verify frame is ready from driver module	*/
	if(USART3_isFrameReady())
 800179e:	f000 fb97 	bl	8001ed0 <USART3_isFrameReady>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d050      	beq.n	800184a <ESP8266_ParserMessage+0xb2>
	{
		char buffer [64]= {'\0'};
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b0:	223c      	movs	r2, #60	; 0x3c
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fc8d 	bl	80060d4 <memset>
		USART3_getFrame(buffer);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fb9e 	bl	8001f00 <USART3_getFrame>

		MQTT_t Mqtt_Message = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	222c      	movs	r2, #44	; 0x2c
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 fc82 	bl	80060d4 <memset>
		        SpeakerNumber: 1
		        Status: 1
		    */

		   /* get the first token*/
		   token = strtok(buffer, "+");
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	491f      	ldr	r1, [pc, #124]	; (8001854 <ESP8266_ParserMessage+0xbc>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fcba 	bl	8006150 <strtok>
 80017dc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		   /* */
		   command = strtok(token, ":");
 80017e0:	491d      	ldr	r1, [pc, #116]	; (8001858 <ESP8266_ParserMessage+0xc0>)
 80017e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80017e6:	f004 fcb3 	bl	8006150 <strtok>
 80017ea:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		   LinkID = strtok(NULL, ",");
 80017ee:	491b      	ldr	r1, [pc, #108]	; (800185c <ESP8266_ParserMessage+0xc4>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f004 fcad 	bl	8006150 <strtok>
 80017f6:	67f8      	str	r0, [r7, #124]	; 0x7c
		   Topic = strtok(NULL, "\"/");
 80017f8:	4919      	ldr	r1, [pc, #100]	; (8001860 <ESP8266_ParserMessage+0xc8>)
 80017fa:	2000      	movs	r0, #0
 80017fc:	f004 fca8 	bl	8006150 <strtok>
 8001800:	67b8      	str	r0, [r7, #120]	; 0x78
		   SpeakerNumber = strtok(NULL, "\",");
 8001802:	4918      	ldr	r1, [pc, #96]	; (8001864 <ESP8266_ParserMessage+0xcc>)
 8001804:	2000      	movs	r0, #0
 8001806:	f004 fca3 	bl	8006150 <strtok>
 800180a:	6778      	str	r0, [r7, #116]	; 0x74
		   DataLen = strtok(NULL, ",");
 800180c:	4913      	ldr	r1, [pc, #76]	; (800185c <ESP8266_ParserMessage+0xc4>)
 800180e:	2000      	movs	r0, #0
 8001810:	f004 fc9e 	bl	8006150 <strtok>
 8001814:	6738      	str	r0, [r7, #112]	; 0x70
		   Status = strtok(NULL, "\r\n");
 8001816:	4914      	ldr	r1, [pc, #80]	; (8001868 <ESP8266_ParserMessage+0xd0>)
 8001818:	2000      	movs	r0, #0
 800181a:	f004 fc99 	bl	8006150 <strtok>
 800181e:	66f8      	str	r0, [r7, #108]	; 0x6c

		   Mqtt_Message.DataLen =atoi(DataLen);
 8001820:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001822:	f004 fc1a 	bl	800605a <atoi>
 8001826:	4603      	mov	r3, r0
 8001828:	623b      	str	r3, [r7, #32]
		   Mqtt_Message.SpeakerNumber =atoi(SpeakerNumber);
 800182a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800182c:	f004 fc15 	bl	800605a <atoi>
 8001830:	4603      	mov	r3, r0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
		   Mqtt_Message.Status =atoi(Status);
 8001834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001836:	f004 fc10 	bl	800605a <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
		   /*	Copy command	*/

		   ao1_control_setSpeakerState(&Mqtt_Message);
 800183e:	463b      	mov	r3, r7
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f99b 	bl	8000b7c <ao1_control_setSpeakerState>
		   USART3_FrameProcessed();
 8001846:	f000 fb4f 	bl	8001ee8 <USART3_FrameProcessed>
	}
}
 800184a:	bf00      	nop
 800184c:	3788      	adds	r7, #136	; 0x88
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	080079ec 	.word	0x080079ec
 8001858:	080079f0 	.word	0x080079f0
 800185c:	080079f4 	.word	0x080079f4
 8001860:	080079f8 	.word	0x080079f8
 8001864:	080079fc 	.word	0x080079fc
 8001868:	08007a00 	.word	0x08007a00

0800186c <HAL_IncTick>:
#include <stdbool.h>
#include "stm32f3xx_hal.h"
uint64_t g_sysTimerCounter;

void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	g_sysTimerCounter++;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_IncTick+0x30>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	1c50      	adds	r0, r2, #1
 8001878:	f143 0100 	adc.w	r1, r3, #0
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_IncTick+0x30>)
 800187e:	e9c3 0100 	strd	r0, r1, [r3]
	uwTick += uwTickFreq;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_IncTick+0x34>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x38>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_IncTick+0x38>)
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200001a8 	.word	0x200001a8
 80018a0:	20000098 	.word	0x20000098
 80018a4:	20000530 	.word	0x20000530

080018a8 <HAL_UARTEx_RxEventCallback>:
extern UART_HandleTypeDef uart3;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3 && huart->RxState == HAL_UART_STATE_READY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_UARTEx_RxEventCallback+0x50>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <HAL_UARTEx_RxEventCallback+0x28>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d104      	bne.n	80018d0 <HAL_UARTEx_RxEventCallback+0x28>
  {
	#ifdef USART_3_DMA_DRIVEN_MODE
		  USART3_HAL_UART_RxCpltCallback(&uart3, Size);
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	4619      	mov	r1, r3
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <HAL_UARTEx_RxEventCallback+0x54>)
 80018cc:	f000 fa3e 	bl	8001d4c <USART3_HAL_UART_RxCpltCallback>
	#else
		  USART3_HAL_UART_RxCpltCallback(&uart3);
	#endif
  }
  if (huart->Instance == USART1 && huart->RxState == HAL_UART_STATE_READY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_UARTEx_RxEventCallback+0x58>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d109      	bne.n	80018ee <HAL_UARTEx_RxEventCallback+0x46>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d105      	bne.n	80018ee <HAL_UARTEx_RxEventCallback+0x46>
  {
	#ifdef USART_1_DMA_DRIVEN_MODE
		  USART1_HAL_UART_RxCpltCallback(&uart1, Size);
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <HAL_UARTEx_RxEventCallback+0x5c>)
 80018ea:	f000 f8e3 	bl	8001ab4 <USART1_HAL_UART_RxCpltCallback>
	#else
		  USART1_HAL_UART_RxCpltCallback(&uart1);
	#endif
  }
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004800 	.word	0x40004800
 80018fc:	200003b4 	.word	0x200003b4
 8001900:	40013800 	.word	0x40013800
 8001904:	200001b4 	.word	0x200001b4

08001908 <get_next>:
 * \param size       the size of the ring buffer in bytes
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint16_t get_next(uint16_t cur_offset, uint16_t size)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4613      	mov	r3, r2
 8001916:	80bb      	strh	r3, [r7, #4]
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	3b01      	subs	r3, #1
 800191e:	429a      	cmp	r2, r3
 8001920:	d003      	beq.n	800192a <get_next+0x22>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	3301      	adds	r3, #1
 8001926:	b29b      	uxth	r3, r3
 8001928:	e000      	b.n	800192c <get_next+0x24>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <ring_buffer_get_next_write>:
 * \param ring pointer to a struct of type ring_buffer
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint16_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	return get_next(ring->write_offset, ring->size);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7ff ffdb 	bl	8001908 <get_next>
 8001952:	4603      	mov	r3, r0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <ring_buffer_get_next_read>:
 * \param ring pointer to a struct of type ring_buffer
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint16_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	return get_next(ring->read_offset, ring->size);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	885b      	ldrh	r3, [r3, #2]
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff ffc9 	bl	8001908 <get_next>
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ring_buffer_is_full>:
 *
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	885b      	ldrh	r3, [r3, #2]
 800198c:	b29c      	uxth	r4, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffd2 	bl	8001938 <ring_buffer_get_next_write>
 8001994:	4603      	mov	r3, r0
 8001996:	429c      	cmp	r4, r3
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <ring_buffer_is_empty>:
 *
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	return (ring->read_offset == ring->write_offset);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	885b      	ldrh	r3, [r3, #2]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	429a      	cmp	r2, r3
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <ring_buffer_init>:
 * \param size   the size of the ring buffer
 *
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint16_t size)
{
 80019d2:	b490      	push	{r4, r7}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	4613      	mov	r3, r2
 80019de:	80fb      	strh	r3, [r7, #6]
	struct ring_buffer ring;
	ring.write_offset = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	82bb      	strh	r3, [r7, #20]
	ring.read_offset = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	82fb      	strh	r3, [r7, #22]
	ring.size = size;
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	833b      	strh	r3, [r7, #24]
	ring.buffer = buffer;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	61fb      	str	r3, [r7, #28]
	return ring;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	461c      	mov	r4, r3
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc90      	pop	{r4, r7}
 8001a08:	4770      	bx	lr

08001a0a <ring_buffer_get>:
 * \param ring pointer to a struct of type ring_buffer
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	if(!ring_buffer_is_empty(ring))
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffc8 	bl	80019a8 <ring_buffer_is_empty>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f083 0301 	eor.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <ring_buffer_get+0x3c>
	{
		uint8_t data = ring->buffer[ring->read_offset];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	8852      	ldrh	r2, [r2, #2]
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	73fb      	strb	r3, [r7, #15]
		ring->read_offset = ring_buffer_get_next_read(ring);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff91 	bl	800195c <ring_buffer_get_next_read>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	805a      	strh	r2, [r3, #2]
		return data;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	e000      	b.n	8001a48 <ring_buffer_get+0x3e>
	}
	return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ring_buffer_put>:
 * \param ring pointer to a struct of type ring_buffer
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
	if(!ring_buffer_is_full(ring))
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff8f 	bl	8001980 <ring_buffer_is_full>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00e      	beq.n	8001a8c <ring_buffer_put+0x3c>
	{
		ring->buffer[ring->write_offset] = data;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	8812      	ldrh	r2, [r2, #0]
 8001a76:	b292      	uxth	r2, r2
 8001a78:	4413      	add	r3, r2
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	701a      	strb	r2, [r3, #0]
		ring->write_offset = ring_buffer_get_next_write(ring);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff5a 	bl	8001938 <ring_buffer_get_next_write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	801a      	strh	r2, [r3, #0]
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ring_buffer_clear>:
 * Call this function to reset ring buffer indexes.
 * \param ring pointer to a struct of type ring_buffer
 *
 */
static inline void ring_buffer_clear(struct ring_buffer *ring)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	ring->read_offset  = 0;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	805a      	strh	r2, [r3, #2]
	ring->write_offset = 0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	801a      	strh	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <USART1_HAL_UART_RxCpltCallback>:
	static uint8_t RxBuf[RxBuf_SIZE];
	static uint8_t MainBuf[MainBuf_SIZE];


	void USART1_HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart, uint8_t bufferLen)
	{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
		if(huart == &uart1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <USART1_HAL_UART_RxCpltCallback+0x68>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d124      	bne.n	8001b12 <USART1_HAL_UART_RxCpltCallback+0x5e>
		{
			memcpy(MainBuf,RxBuf,bufferLen);
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4914      	ldr	r1, [pc, #80]	; (8001b20 <USART1_HAL_UART_RxCpltCallback+0x6c>)
 8001ace:	4815      	ldr	r0, [pc, #84]	; (8001b24 <USART1_HAL_UART_RxCpltCallback+0x70>)
 8001ad0:	f004 faf2 	bl	80060b8 <memcpy>
			  for (int i = 0 ; i < bufferLen; i ++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e00a      	b.n	8001af0 <USART1_HAL_UART_RxCpltCallback+0x3c>
					ring_buffer_put(&g_rxBuffHandler, MainBuf[i]);
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <USART1_HAL_UART_RxCpltCallback+0x70>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <USART1_HAL_UART_RxCpltCallback+0x74>)
 8001ae6:	f7ff ffb3 	bl	8001a50 <ring_buffer_put>
			  for (int i = 0 ; i < bufferLen; i ++)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf0      	blt.n	8001ada <USART1_HAL_UART_RxCpltCallback+0x26>

		  HAL_UARTEx_ReceiveToIdle_DMA(&uart1, RxBuf, RxBuf_SIZE);
 8001af8:	2240      	movs	r2, #64	; 0x40
 8001afa:	4909      	ldr	r1, [pc, #36]	; (8001b20 <USART1_HAL_UART_RxCpltCallback+0x6c>)
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <USART1_HAL_UART_RxCpltCallback+0x68>)
 8001afe:	f004 fa51 	bl	8005fa4 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <USART1_HAL_UART_RxCpltCallback+0x78>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <USART1_HAL_UART_RxCpltCallback+0x78>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0204 	bic.w	r2, r2, #4
 8001b10:	601a      	str	r2, [r3, #0]
		}
	}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200001b4 	.word	0x200001b4
 8001b20:	200002a8 	.word	0x200002a8
 8001b24:	200002e8 	.word	0x200002e8
 8001b28:	20000238 	.word	0x20000238
 8001b2c:	20000264 	.word	0x20000264

08001b30 <USART1_Init>:
 * @param baudrate Defined baudrate - for details view conf_usarts
 * @return true 
 * @return false 
 */
bool USART1_Init(unsigned long baudrate)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6178      	str	r0, [r7, #20]


	uart1.Instance = USART1;
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <USART1_Init+0x98>)
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <USART1_Init+0x9c>)
 8001b3c:	601a      	str	r2, [r3, #0]
	uart1.Init.BaudRate = baudrate;
 8001b3e:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <USART1_Init+0x98>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	6053      	str	r3, [r2, #4]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <USART1_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
	uart1.Init.StopBits = UART_STOPBITS_1;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <USART1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
	uart1.Init.Parity = UART_PARITY_NONE;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <USART1_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
	uart1.Init.Mode = UART_MODE_TX_RX;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <USART1_Init+0x98>)
 8001b58:	220c      	movs	r2, #12
 8001b5a:	615a      	str	r2, [r3, #20]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <USART1_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
	uart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <USART1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
	uart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <USART1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
	uart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <USART1_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&uart1) != HAL_OK)
 8001b74:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <USART1_Init+0x98>)
 8001b76:	f002 ffb7 	bl	8004ae8 <HAL_UART_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <USART1_Init+0x54>
	{
		Error_Handler();
 8001b80:	f000 fafe 	bl	8002180 <Error_Handler>
	}

	#ifdef USART_1_DMA_DRIVEN_MODE
		g_rxBuffHandler = ring_buffer_init(g_rxBuffer,sizeof(g_rxBuffer));
 8001b84:	4c12      	ldr	r4, [pc, #72]	; (8001bd0 <USART1_Init+0xa0>)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4912      	ldr	r1, [pc, #72]	; (8001bd4 <USART1_Init+0xa4>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff20 	bl	80019d2 <ring_buffer_init>
 8001b92:	463b      	mov	r3, r7
 8001b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		 HAL_UARTEx_ReceiveToIdle_DMA(&uart1, RxBuf, RxBuf_SIZE);
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <USART1_Init+0xa8>)
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <USART1_Init+0x98>)
 8001ba2:	f004 f9ff 	bl	8005fa4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <USART1_Init+0xac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <USART1_Init+0xac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0204 	bic.w	r2, r2, #4
 8001bb4:	601a      	str	r2, [r3, #0]
	#else
		HAL_UART_Receive_IT(&uart1, &g_byte, 1);
		g_rxBuffHandler = ring_buffer_init(g_rxBuffer,sizeof(g_rxBuffer));
	#endif

	g_initFlag = true;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <USART1_Init+0xb0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
	
	return 	g_initFlag;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <USART1_Init+0xb0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	200001b4 	.word	0x200001b4
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	20000238 	.word	0x20000238
 8001bd4:	20000244 	.word	0x20000244
 8001bd8:	200002a8 	.word	0x200002a8
 8001bdc:	20000264 	.word	0x20000264
 8001be0:	200001b0 	.word	0x200001b0

08001be4 <USART1_Transmit>:
 * @brief Handler for transmitting data through UART
 * 
 * @param data byte
 */
void USART1_Transmit (uint8_t data)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	/* Wait for empty transmit buffer */
	HAL_UART_Transmit(&uart1, &data, 1, HAL_MAX_DELAY);
 8001bee:	1df9      	adds	r1, r7, #7
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <USART1_Transmit+0x20>)
 8001bf8:	f002 ffc4 	bl	8004b84 <HAL_UART_Transmit>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200001b4 	.word	0x200001b4

08001c08 <USART1_readByteNoWait>:
 * @param byte   Incoming byte
 * @return true  If byte was successfuly added to ring buffer.
 * @return false If ring buffer has no space.
 */
bool USART1_readByteNoWait(uint8_t* byte)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	//if (HAL_OK ==  HAL_UART_Receive(&uart1, byte, 1, HAL_MAX_DELAY))
	//	return true;
	//else
	//		return false;
	if(ring_buffer_is_empty(&g_rxBuffHandler))
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <USART1_readByteNoWait+0x30>)
 8001c12:	f7ff fec9 	bl	80019a8 <ring_buffer_is_empty>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <USART1_readByteNoWait+0x18>
		return false;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e007      	b.n	8001c30 <USART1_readByteNoWait+0x28>

	*byte = ring_buffer_get(&g_rxBuffHandler);
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <USART1_readByteNoWait+0x30>)
 8001c22:	f7ff fef2 	bl	8001a0a <ring_buffer_get>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	701a      	strb	r2, [r3, #0]

	return true;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000238 	.word	0x20000238

08001c3c <USART1_clearRingBuffer>:
 *
 * @return true
 * @return false
 */
bool USART1_clearRingBuffer(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	ring_buffer_clear(&g_rxBuffHandler);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART1_clearRingBuffer+0x10>)
 8001c42:	f7ff ff27 	bl	8001a94 <ring_buffer_clear>
	return true;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000238 	.word	0x20000238

08001c50 <USART2_Init>:
 * @param baudrate Defined baudrate - for details view conf_usarts
 * @return true
 * @return false
 */
bool USART2_Init(unsigned long baudrate)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uart2.Instance = USART2;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <USART2_Init+0x68>)
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <USART2_Init+0x6c>)
 8001c5c:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = baudrate;
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <USART2_Init+0x68>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6053      	str	r3, [r2, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <USART2_Init+0x68>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <USART2_Init+0x68>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <USART2_Init+0x68>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
	uart2.Init.Mode = UART_MODE_TX_RX;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <USART2_Init+0x68>)
 8001c78:	220c      	movs	r2, #12
 8001c7a:	615a      	str	r2, [r3, #20]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <USART2_Init+0x68>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
	uart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <USART2_Init+0x68>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
	uart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <USART2_Init+0x68>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
	uart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <USART2_Init+0x68>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&uart2) != HAL_OK)
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <USART2_Init+0x68>)
 8001c96:	f002 ff27 	bl	8004ae8 <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <USART2_Init+0x54>
	{
		Error_Handler();
 8001ca0:	f000 fa6e 	bl	8002180 <Error_Handler>

	//HAL_UART_Receive_IT(&uart2, &g_byte, 1);
	//g_rxBuffHandler = ring_buffer_init(g_rxBuffer,sizeof(g_rxBuffer));


	g_initFlag = true;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <USART2_Init+0x70>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]

	return 	g_initFlag;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <USART2_Init+0x70>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000032c 	.word	0x2000032c
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	20000328 	.word	0x20000328

08001cc4 <USART2_Transmit>:
 * @brief Handler for transmitting data through UART
 *
 * @param data byte
 */
void USART2_Transmit (uint8_t data)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	/* Wait for empty transmit buffer */
	HAL_UART_Transmit(&uart2, &data, 1, HAL_MAX_DELAY);
 8001cce:	1df9      	adds	r1, r7, #7
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <USART2_Transmit+0x20>)
 8001cd8:	f002 ff54 	bl	8004b84 <HAL_UART_Transmit>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000032c 	.word	0x2000032c

08001ce8 <_USART2_TransmitData>:
{
	/* Wait for empty transmit buffer */
	HAL_UART_Transmit(&uart2, data, dataLen, HAL_MAX_DELAY);
}
void _USART2_TransmitData (uint8_t* data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	/* Wait for empty transmit buffer */
	while(*data!='\0') USART2_Transmit(*data++);
 8001cf0:	e006      	b.n	8001d00 <_USART2_TransmitData+0x18>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffe2 	bl	8001cc4 <USART2_Transmit>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f4      	bne.n	8001cf2 <_USART2_TransmitData+0xa>
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ring_buffer_init>:
{
 8001d12:	b490      	push	{r4, r7}
 8001d14:	b088      	sub	sp, #32
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
	ring.write_offset = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	82bb      	strh	r3, [r7, #20]
	ring.read_offset = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	82fb      	strh	r3, [r7, #22]
	ring.size = size;
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	833b      	strh	r3, [r7, #24]
	ring.buffer = buffer;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	61fb      	str	r3, [r7, #28]
	return ring;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	461c      	mov	r4, r3
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc90      	pop	{r4, r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <USART3_HAL_UART_RxCpltCallback>:
static uint8_t RxBuf[RxBuf_SIZE];
static uint8_t MainBuf[MainBuf_SIZE];


void USART3_HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d4c:	b5b0      	push	{r4, r5, r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
//	if (Size < RxBuf_SIZE)
	//	{
		HAL_UART_DMAStop(&uart3);
 8001d58:	4814      	ldr	r0, [pc, #80]	; (8001dac <USART3_HAL_UART_RxCpltCallback+0x60>)
 8001d5a:	f002 ffa7 	bl	8004cac <HAL_UART_DMAStop>

		memcpy(MainBuf,RxBuf,sizeof(RxBuf));
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <USART3_HAL_UART_RxCpltCallback+0x64>)
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <USART3_HAL_UART_RxCpltCallback+0x68>)
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memset(RxBuf,'\0',sizeof(RxBuf_SIZE));
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <USART3_HAL_UART_RxCpltCallback+0x68>)
 8001d80:	f004 f9a8 	bl	80060d4 <memset>
		g_FrameisReady = true;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <USART3_HAL_UART_RxCpltCallback+0x6c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]


		HAL_UARTEx_ReceiveToIdle_DMA(&uart3, RxBuf, RxBuf_SIZE);
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	4909      	ldr	r1, [pc, #36]	; (8001db4 <USART3_HAL_UART_RxCpltCallback+0x68>)
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <USART3_HAL_UART_RxCpltCallback+0x60>)
 8001d90:	f004 f908 	bl	8005fa4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <USART3_HAL_UART_RxCpltCallback+0x70>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <USART3_HAL_UART_RxCpltCallback+0x70>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
		////}

}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	200003b4 	.word	0x200003b4
 8001db0:	200004ec 	.word	0x200004ec
 8001db4:	200004ac 	.word	0x200004ac
 8001db8:	20000464 	.word	0x20000464
 8001dbc:	20000468 	.word	0x20000468

08001dc0 <USART3_Init>:
 * @param baudrate Defined baudrate - for details view conf_usarts
 * @return true
 * @return false
 */
bool USART3_Init(unsigned long baudrate)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6178      	str	r0, [r7, #20]
	uart3.Instance = USART3;
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <USART3_Init+0xa0>)
 8001dca:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <USART3_Init+0xa4>)
 8001dcc:	601a      	str	r2, [r3, #0]
	uart3.Init.BaudRate = baudrate;
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <USART3_Init+0xa0>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	6053      	str	r3, [r2, #4]
	uart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <USART3_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
	uart3.Init.StopBits = UART_STOPBITS_1;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <USART3_Init+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
	uart3.Init.Parity = UART_PARITY_NONE;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <USART3_Init+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
	uart3.Init.Mode = UART_MODE_TX_RX;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <USART3_Init+0xa0>)
 8001de8:	220c      	movs	r2, #12
 8001dea:	615a      	str	r2, [r3, #20]
	uart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <USART3_Init+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
	uart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <USART3_Init+0xa0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
	uart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <USART3_Init+0xa0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
	uart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <USART3_Init+0xa0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&uart3) != HAL_OK)
 8001e04:	4816      	ldr	r0, [pc, #88]	; (8001e60 <USART3_Init+0xa0>)
 8001e06:	f002 fe6f 	bl	8004ae8 <HAL_UART_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <USART3_Init+0x54>
	{
		Error_Handler();
 8001e10:	f000 f9b6 	bl	8002180 <Error_Handler>
	}

#ifdef USART_3_DMA_DRIVEN_MODE
	g_FrameisReady  = false;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <USART3_Init+0xa8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
	g_rxBuffHandler = ring_buffer_init(g_rxBuffer,sizeof(g_rxBuffer));
 8001e1a:	4c14      	ldr	r4, [pc, #80]	; (8001e6c <USART3_Init+0xac>)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2220      	movs	r2, #32
 8001e20:	4913      	ldr	r1, [pc, #76]	; (8001e70 <USART3_Init+0xb0>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff75 	bl	8001d12 <ring_buffer_init>
 8001e28:	463b      	mov	r3, r7
 8001e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UARTEx_ReceiveToIdle_DMA(&uart3, RxBuf, RxBuf_SIZE);
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	490f      	ldr	r1, [pc, #60]	; (8001e74 <USART3_Init+0xb4>)
 8001e36:	480a      	ldr	r0, [pc, #40]	; (8001e60 <USART3_Init+0xa0>)
 8001e38:	f004 f8b4 	bl	8005fa4 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <USART3_Init+0xb8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <USART3_Init+0xb8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	601a      	str	r2, [r3, #0]
#endif

	g_initFlag = true;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <USART3_Init+0xbc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]

	return 	g_initFlag;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <USART3_Init+0xbc>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003b4 	.word	0x200003b4
 8001e64:	40004800 	.word	0x40004800
 8001e68:	20000464 	.word	0x20000464
 8001e6c:	20000438 	.word	0x20000438
 8001e70:	20000444 	.word	0x20000444
 8001e74:	200004ac 	.word	0x200004ac
 8001e78:	20000468 	.word	0x20000468
 8001e7c:	200003b0 	.word	0x200003b0

08001e80 <USART3_Transmitbyte>:
 * @brief Handler for transmitting data through UART
 *
 * @param data byte
 */
void USART3_Transmitbyte (uint8_t data)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	/* Wait for empty transmit buffer */
	HAL_UART_Transmit(&uart3, &data, 1, 100);
 8001e8a:	1df9      	adds	r1, r7, #7
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <USART3_Transmitbyte+0x20>)
 8001e92:	f002 fe77 	bl	8004b84 <HAL_UART_Transmit>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200003b4 	.word	0x200003b4

08001ea4 <_USART3_TransmitData>:
void _USART3_TransmitData (uint8_t* data)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	/* Wait for empty transmit buffer */
	while(*data!='\0') USART3_Transmitbyte(*data++);
 8001eac:	e006      	b.n	8001ebc <_USART3_TransmitData+0x18>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ffe2 	bl	8001e80 <USART3_Transmitbyte>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f4      	bne.n	8001eae <_USART3_TransmitData+0xa>
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <USART3_isFrameReady>:
		return true;
	else
		return false;
}
bool USART3_isFrameReady(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	return g_FrameisReady;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <USART3_isFrameReady+0x14>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000464 	.word	0x20000464

08001ee8 <USART3_FrameProcessed>:
void USART3_FrameProcessed(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
	g_FrameisReady = false;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <USART3_FrameProcessed+0x14>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000464 	.word	0x20000464

08001f00 <USART3_getFrame>:
bool USART3_getFrame(uint8_t* buffer)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAStop(&uart3);


	memcpy(buffer,MainBuf,sizeof(MainBuf));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <USART3_getFrame+0x3c>)
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	469c      	mov	ip, r3
 8001f10:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001f14:	4665      	mov	r5, ip
 8001f16:	4626      	mov	r6, r4
 8001f18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f1a:	6028      	str	r0, [r5, #0]
 8001f1c:	6069      	str	r1, [r5, #4]
 8001f1e:	60aa      	str	r2, [r5, #8]
 8001f20:	60eb      	str	r3, [r5, #12]
 8001f22:	3410      	adds	r4, #16
 8001f24:	f10c 0c10 	add.w	ip, ip, #16
 8001f28:	4574      	cmp	r4, lr
 8001f2a:	d1f3      	bne.n	8001f14 <USART3_getFrame+0x14>
	USART3_FrameProcessed();
 8001f2c:	f7ff ffdc 	bl	8001ee8 <USART3_FrameProcessed>

	//HAL_UARTEx_ReceiveToIdle_DMA(&uart3, RxBuf, RxBuf_SIZE);
	//__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	return true;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200004ec 	.word	0x200004ec

08001f40 <Error_Handler>:
#include "user_board.h"
#include "af_io.h"
#include "stm32f3xx_hal.h"

static void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <Error_Handler+0x8>
	...

08001f4c <af_io_init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

bool af_io_init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0ae      	sub	sp, #184	; 0xb8
 8001f50:	af00      	add	r7, sp, #0
	  /*	Clock Configuration	*/
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f56:	2228      	movs	r2, #40	; 0x28
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 f8ba 	bl	80060d4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	2258      	movs	r2, #88	; 0x58
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f8ab 	bl	80060d4 <memset>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 f8fc 	bl	8003198 <HAL_RCC_OscConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <af_io_init+0x5e>
	  {
	    Error_Handler();
 8001fa6:	f7ff ffcb 	bl	8001f40 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001faa:	230f      	movs	r3, #15
 8001fac:	67fb      	str	r3, [r7, #124]	; 0x7c
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 f936 	bl	8004240 <HAL_RCC_ClockConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <af_io_init+0x92>
	  {
	    Error_Handler();
 8001fda:	f7ff ffb1 	bl	8001f40 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001fde:	2307      	movs	r3, #7
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
	                              |RCC_PERIPHCLK_USART3;
	  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
	  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fb5a 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <af_io_init+0xb6>
	  {
	    Error_Handler();
 8001ffe:	f7ff ff9f 	bl	8001f40 <Error_Handler>
	  }

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <af_io_init+0x178>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <af_io_init+0x178>)
 8002018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800201c:	6153      	str	r3, [r2, #20]
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <af_io_init+0x178>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <af_io_init+0x178>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <af_io_init+0x178>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002034:	6153      	str	r3, [r2, #20]
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <af_io_init+0x178>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <af_io_init+0x178>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <af_io_init+0x178>)
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	6153      	str	r3, [r2, #20]
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <af_io_init+0x178>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <af_io_init+0x178>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <af_io_init+0x178>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <af_io_init+0x178>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2120      	movs	r1, #32
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f001 f85b 	bl	8003134 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002084:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002088:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <af_io_init+0x17c>)
 8002096:	f000 fec3 	bl	8002e20 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 800209a:	2320      	movs	r3, #32
 800209c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f000 feb4 	bl	8002e20 <HAL_GPIO_Init>

	   return true;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	37b8      	adds	r7, #184	; 0xb8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000800 	.word	0x48000800

080020cc <af_io_signalError>:

void af_io_signalError(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020d0:	2120      	movs	r1, #32
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f001 f845 	bl	8003164 <HAL_GPIO_TogglePin>
	HAL_Delay(3000);
 80020da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020de:	f000 fb33 	bl	8002748 <HAL_Delay>
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <af_init>:
 * 		  This application runs the main program.
 * @return true 
 * @return false 
 */
bool af_init(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
	
	/*	Application object initialization	*/	
	if (!ao0_appInit())
 80020ea:	f7fe fe87 	bl	8000dfc <ao0_appInit>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <af_init+0x18>
		return false;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e01f      	b.n	800213e <af_init+0x58>

	/*	Try communicating with screen	*/	
	if (!ao1_control_fetchScreen())
 80020fe:	f7fe fbfd 	bl	80008fc <ao1_control_fetchScreen>
 8002102:	4603      	mov	r3, r0
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <af_init+0x2c>
		return false;
 800210e:	2300      	movs	r3, #0
 8002110:	e015      	b.n	800213e <af_init+0x58>

	if (!ao1_control_fetchButtonStates())
 8002112:	f7fe fdbb 	bl	8000c8c <ao1_control_fetchButtonStates>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <af_init+0x3a>
		return false;
 800211c:	2300      	movs	r3, #0
 800211e:	e00e      	b.n	800213e <af_init+0x58>
	
	if (!ao1_control_requestWriteInitialText())
 8002120:	f7fe fcf0 	bl	8000b04 <ao1_control_requestWriteInitialText>
 8002124:	4603      	mov	r3, r0
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <af_init+0x4e>
		return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e004      	b.n	800213e <af_init+0x58>

	while (true)
	{
		ESP8266_ParserMessage();
 8002134:	f7ff fb30 	bl	8001798 <ESP8266_ParserMessage>
		//run_tasks();
		fetchUsertActivityTask();
 8002138:	f000 f803 	bl	8002142 <fetchUsertActivityTask>
		ESP8266_ParserMessage();
 800213c:	e7fa      	b.n	8002134 <af_init+0x4e>
		/*	Wait for user interaction */
	}
	return true;
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}

08002142 <fetchUsertActivityTask>:
void fetchUsertActivityTask (void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
	if (true == ao1_control_waitForUserInput())
 8002146:	f7fe fbd1 	bl	80008ec <ao1_control_waitForUserInput>
	{
		//ao1_control_requestApplicationValues();
	}	
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}

0800214e <af_assert>:

void af_assert(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	af00      	add	r7, sp, #0
	while(true)
	{
		/*	flag here error for example light a led */
		af_io_signalError();
 8002152:	f7ff ffbb 	bl	80020cc <af_io_signalError>
 8002156:	e7fc      	b.n	8002152 <af_assert+0x4>

08002158 <mainApp>:
#include "mainApp.h"
extern bool af_init(void);
extern void af_assert(void);

int mainApp (void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	/*	Application framework */
	if (!af_init())
 800215c:	f7ff ffc3 	bl	80020e6 <af_init>
 8002160:	4603      	mov	r3, r0
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <mainApp+0x18>
	{
		af_assert();
 800216c:	f7ff ffef 	bl	800214e <af_assert>
	}
	/* Insert application code here, after the board has been initialized. */
}
 8002170:	bf00      	nop
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}

08002176 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 mainApp();
 800217a:	f7ff ffed 	bl	8002158 <mainApp>
 800217e:	e7fc      	b.n	800217a <main+0x4>

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002188:	2120      	movs	r1, #32
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f000 ffe9 	bl	8003164 <HAL_GPIO_TogglePin>
	  HAL_Delay(1500);
 8002192:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002196:	f000 fad7 	bl	8002748 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800219a:	e7f5      	b.n	8002188 <Error_Handler+0x8>

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_MspInit+0x44>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_MspInit+0x44>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_MspInit+0x44>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_MspInit+0x44>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_MspInit+0x44>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_MspInit+0x44>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021d2:	2007      	movs	r0, #7
 80021d4:	f000 fbac 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a74      	ldr	r2, [pc, #464]	; (80023d4 <HAL_UART_MspInit+0x1f0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d156      	bne.n	80022b4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4a73      	ldr	r2, [pc, #460]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6193      	str	r3, [r2, #24]
 8002212:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b6e      	ldr	r3, [pc, #440]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a6d      	ldr	r2, [pc, #436]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002228:	6153      	str	r3, [r2, #20]
 800222a:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002236:	2330      	movs	r3, #48	; 0x30
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002246:	2307      	movs	r3, #7
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4619      	mov	r1, r3
 8002250:	4862      	ldr	r0, [pc, #392]	; (80023dc <HAL_UART_MspInit+0x1f8>)
 8002252:	f000 fde5 	bl	8002e20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002256:	4b62      	ldr	r3, [pc, #392]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002258:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_UART_MspInit+0x200>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225c:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002268:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002274:	4b5a      	ldr	r3, [pc, #360]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002286:	4856      	ldr	r0, [pc, #344]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 8002288:	f000 fb93 	bl	80029b2 <HAL_DMA_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8002292:	f7ff ff75 	bl	8002180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 800229a:	671a      	str	r2, [r3, #112]	; 0x70
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_UART_MspInit+0x1fc>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2025      	movs	r0, #37	; 0x25
 80022a8:	f000 fb4d 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ac:	2025      	movs	r0, #37	; 0x25
 80022ae:	f000 fb66 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022b2:	e08a      	b.n	80023ca <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <HAL_UART_MspInit+0x204>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d129      	bne.n	8002312 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	6153      	str	r3, [r2, #20]
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ee:	230c      	movs	r3, #12
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022fe:	2307      	movs	r3, #7
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f000 fd88 	bl	8002e20 <HAL_GPIO_Init>
}
 8002310:	e05b      	b.n	80023ca <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a35      	ldr	r2, [pc, #212]	; (80023ec <HAL_UART_MspInit+0x208>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d156      	bne.n	80023ca <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002326:	61d3      	str	r3, [r2, #28]
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 800233a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233e:	6153      	str	r3, [r2, #20]
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_UART_MspInit+0x1f4>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800234c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800235e:	2307      	movs	r3, #7
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002366:	4619      	mov	r1, r3
 8002368:	4821      	ldr	r0, [pc, #132]	; (80023f0 <HAL_UART_MspInit+0x20c>)
 800236a:	f000 fd59 	bl	8002e20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_UART_MspInit+0x210>)
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_UART_MspInit+0x214>)
 8002372:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_UART_MspInit+0x210>)
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_UART_MspInit+0x210>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_UART_MspInit+0x210>)
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x210>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_UART_MspInit+0x210>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x210>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_UART_MspInit+0x210>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x210>)
 80023a0:	f000 fb07 	bl	80029b2 <HAL_DMA_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80023aa:	f7ff fee9 	bl	8002180 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_UART_MspInit+0x210>)
 80023b2:	671a      	str	r2, [r3, #112]	; 0x70
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_UART_MspInit+0x210>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2027      	movs	r0, #39	; 0x27
 80023c0:	f000 fac1 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023c4:	2027      	movs	r0, #39	; 0x27
 80023c6:	f000 fada 	bl	800297e <HAL_NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	; 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000800 	.word	0x48000800
 80023e0:	20000264 	.word	0x20000264
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40004400 	.word	0x40004400
 80023ec:	40004800 	.word	0x40004800
 80023f0:	48000400 	.word	0x48000400
 80023f4:	20000468 	.word	0x20000468
 80023f8:	40020030 	.word	0x40020030

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <NMI_Handler+0x4>

08002402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler+0x4>

0800240e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler+0x4>

0800241a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002448:	f7ff fa10 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <DMA1_Channel3_IRQHandler+0x10>)
 8002456:	f000 fbc9 	bl	8002bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000468 	.word	0x20000468

08002464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Channel5_IRQHandler+0x10>)
 800246a:	f000 fbbf 	bl	8002bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000264 	.word	0x20000264

08002478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_IRQHandler(&uart1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <USART1_IRQHandler+0x10>)
 800247e:	f002 fca7 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200001b4 	.word	0x200001b4

0800248c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  HAL_UART_IRQHandler(&uart3);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <USART3_IRQHandler+0x10>)
 8002492:	f002 fc9d 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200003b4 	.word	0x200003b4

080024a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_kill>:

int _kill(int pid, int sig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ba:	f003 fdd3 	bl	8006064 <__errno>
 80024be:	4603      	mov	r3, r0
 80024c0:	2216      	movs	r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
	return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_exit>:

void _exit (int status)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe7 	bl	80024b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024e2:	e7fe      	b.n	80024e2 <_exit+0x12>

080024e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e00a      	b.n	800250c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f6:	f3af 8000 	nop.w
 80024fa:	4601      	mov	r1, r0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	dbf0      	blt.n	80024f6 <_read+0x12>
	}

return len;
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e009      	b.n	8002544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf1      	blt.n	8002530 <_write+0x12>
	}
	return len;
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_close>:

int _close(int file)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	return -1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257e:	605a      	str	r2, [r3, #4]
	return 0;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <_isatty>:

int _isatty(int file)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	return 1;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f003 fd38 	bl	8006064 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20010000 	.word	0x20010000
 8002620:	00000400 	.word	0x00000400
 8002624:	2000052c 	.word	0x2000052c
 8002628:	20000548 	.word	0x20000548

0800262c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002654:	480d      	ldr	r0, [pc, #52]	; (800268c <LoopForever+0x6>)
  ldr r1, =_edata
 8002656:	490e      	ldr	r1, [pc, #56]	; (8002690 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <LoopForever+0xe>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <LoopForever+0x12>)
  ldr r4, =_ebss
 800266c:	4c0b      	ldr	r4, [pc, #44]	; (800269c <LoopForever+0x16>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800267a:	f7ff ffd7 	bl	800262c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f003 fcf7 	bl	8006070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002682:	f7ff fd78 	bl	8002176 <main>

08002686 <LoopForever>:

LoopForever:
    b LoopForever
 8002686:	e7fe      	b.n	8002686 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002694:	08007cc0 	.word	0x08007cc0
  ldr r2, =_sbss
 8002698:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800269c:	20000544 	.word	0x20000544

080026a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC1_2_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x28>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x28>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f93b 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f808 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff fd6c 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f953 	bl	800299a <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 f91b 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000090 	.word	0x20000090
 8002728:	20000098 	.word	0x20000098
 800272c:	20000094 	.word	0x20000094

08002730 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;  
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000530 	.word	0x20000530

08002748 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000098 	.word	0x20000098

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e037      	b.n	8002a38 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9c4 	bl	8002da8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}  
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_DMA_Start_IT+0x20>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e04a      	b.n	8002af6 <HAL_DMA_Start_IT+0xb6>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d13a      	bne.n	8002ae8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2202      	movs	r2, #2
 8002a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f957 	bl	8002d4a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 020e 	orr.w	r2, r2, #14
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e00f      	b.n	8002ad6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 020a 	orr.w	r2, r2, #10
 8002ac4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0204 	bic.w	r2, r2, #4
 8002ad4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e005      	b.n	8002af4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d008      	beq.n	8002b22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e020      	b.n	8002b64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 020e 	bic.w	r2, r2, #14
 8002b30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d005      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e027      	b.n	8002be2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020e 	bic.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    } 
  }
  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2204      	movs	r2, #4
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d024      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x72>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01f      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	2104      	movs	r1, #4
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d06a      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	e065      	b.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2202      	movs	r2, #2
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02c      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xdc>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d027      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 020a 	bic.w	r2, r2, #10
 8002c94:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d035      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002cc6:	e030      	b.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2208      	movs	r2, #8
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d028      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d023      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 020e 	bic.w	r2, r2, #14
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
    }
  }
}  
 8002d28:	e7ff      	b.n	8002d2a <HAL_DMA_IRQHandler+0x13e>
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d108      	bne.n	8002d8a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d88:	e007      	b.n	8002d9a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <DMA_CalcBaseAndBitshift+0x60>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d80f      	bhi.n	8002ddc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <DMA_CalcBaseAndBitshift+0x64>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <DMA_CalcBaseAndBitshift+0x68>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <DMA_CalcBaseAndBitshift+0x6c>)
 8002dd8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002dda:	e00e      	b.n	8002dfa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <DMA_CalcBaseAndBitshift+0x70>)
 8002de4:	4413      	add	r3, r2
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <DMA_CalcBaseAndBitshift+0x68>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	009a      	lsls	r2, r3, #2
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <DMA_CalcBaseAndBitshift+0x74>)
 8002df8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40020407 	.word	0x40020407
 8002e0c:	bffdfff8 	.word	0xbffdfff8
 8002e10:	cccccccd 	.word	0xcccccccd
 8002e14:	40020000 	.word	0x40020000
 8002e18:	bffdfbf8 	.word	0xbffdfbf8
 8002e1c:	40020400 	.word	0x40020400

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2e:	e160      	b.n	80030f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8152 	beq.w	80030ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d005      	beq.n	8002e60 <HAL_GPIO_Init+0x40>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d130      	bne.n	8002ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e96:	2201      	movs	r2, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 0201 	and.w	r2, r3, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d017      	beq.n	8002efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d123      	bne.n	8002f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	08da      	lsrs	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3208      	adds	r2, #8
 8002f4c:	6939      	ldr	r1, [r7, #16]
 8002f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0203 	and.w	r2, r3, #3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80ac 	beq.w	80030ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f94:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6193      	str	r3, [r2, #24]
 8002fa0:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fac:	4a59      	ldr	r2, [pc, #356]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd6:	d025      	beq.n	8003024 <HAL_GPIO_Init+0x204>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_GPIO_Init+0x2f8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01f      	beq.n	8003020 <HAL_GPIO_Init+0x200>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a4e      	ldr	r2, [pc, #312]	; (800311c <HAL_GPIO_Init+0x2fc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d019      	beq.n	800301c <HAL_GPIO_Init+0x1fc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <HAL_GPIO_Init+0x300>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_GPIO_Init+0x1f8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a4c      	ldr	r2, [pc, #304]	; (8003124 <HAL_GPIO_Init+0x304>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00d      	beq.n	8003014 <HAL_GPIO_Init+0x1f4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a4b      	ldr	r2, [pc, #300]	; (8003128 <HAL_GPIO_Init+0x308>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <HAL_GPIO_Init+0x1f0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a4a      	ldr	r2, [pc, #296]	; (800312c <HAL_GPIO_Init+0x30c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_GPIO_Init+0x1ec>
 8003008:	2306      	movs	r3, #6
 800300a:	e00c      	b.n	8003026 <HAL_GPIO_Init+0x206>
 800300c:	2307      	movs	r3, #7
 800300e:	e00a      	b.n	8003026 <HAL_GPIO_Init+0x206>
 8003010:	2305      	movs	r3, #5
 8003012:	e008      	b.n	8003026 <HAL_GPIO_Init+0x206>
 8003014:	2304      	movs	r3, #4
 8003016:	e006      	b.n	8003026 <HAL_GPIO_Init+0x206>
 8003018:	2303      	movs	r3, #3
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x206>
 800301c:	2302      	movs	r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x206>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x206>
 8003024:	2300      	movs	r3, #0
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003036:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <HAL_GPIO_Init+0x310>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003068:	4a31      	ldr	r2, [pc, #196]	; (8003130 <HAL_GPIO_Init+0x310>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_GPIO_Init+0x310>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_GPIO_Init+0x310>)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <HAL_GPIO_Init+0x310>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_GPIO_Init+0x310>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_GPIO_Init+0x310>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_GPIO_Init+0x310>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f ae97 	bne.w	8002e30 <HAL_GPIO_Init+0x10>
  }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40021000 	.word	0x40021000
 8003114:	40010000 	.word	0x40010000
 8003118:	48000400 	.word	0x48000400
 800311c:	48000800 	.word	0x48000800
 8003120:	48000c00 	.word	0x48000c00
 8003124:	48001000 	.word	0x48001000
 8003128:	48001400 	.word	0x48001400
 800312c:	48001800 	.word	0x48001800
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003150:	e002      	b.n	8003158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4013      	ands	r3, r2
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43d9      	mvns	r1, r3
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	400b      	ands	r3, r1
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f001 b83a 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 816f 	beq.w	80034b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031d4:	4bb5      	ldr	r3, [pc, #724]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00c      	beq.n	80031fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e0:	4bb2      	ldr	r3, [pc, #712]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d15c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x10e>
 80031ec:	4baf      	ldr	r3, [pc, #700]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d155      	bne.n	80032a6 <HAL_RCC_OscConfig+0x10e>
 80031fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_RCC_OscConfig+0x94>
 8003226:	4ba1      	ldr	r3, [pc, #644]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0xc0>
 800322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003230:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003244:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003248:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003254:	4b95      	ldr	r3, [pc, #596]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003260:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003264:	fa92 f2a2 	rbit	r2, r2
 8003268:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800326c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f002 021f 	and.w	r2, r2, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8111 	beq.w	80034b0 <HAL_RCC_OscConfig+0x318>
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8108 	bne.w	80034b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f000 bfc6 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12e>
 80032b8:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7b      	ldr	r2, [pc, #492]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e036      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x158>
 80032d6:	4b75      	ldr	r3, [pc, #468]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a74      	ldr	r2, [pc, #464]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b72      	ldr	r3, [pc, #456]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a71      	ldr	r2, [pc, #452]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e021      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 80032f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x184>
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a66      	ldr	r2, [pc, #408]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 800331c:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a62      	ldr	r2, [pc, #392]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b60      	ldr	r3, [pc, #384]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5f      	ldr	r2, [pc, #380]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d059      	beq.n	80033f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7ff f9f4 	bl	8002730 <HAL_GetTick>
 8003348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334e:	f7ff f9ef 	bl	8002730 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d902      	bls.n	8003364 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	f000 bf67 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003378:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x1fe>
 8003390:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x22a>
 8003396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80033ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80033d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ab      	beq.n	800334e <HAL_RCC_OscConfig+0x1b6>
 80033f6:	e05c      	b.n	80034b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff f99a 	bl	8002730 <HAL_GetTick>
 80033fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003402:	f7ff f995 	bl	8002730 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d902      	bls.n	8003418 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	f000 bf0d 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800342c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x2b2>
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x2de>
 800344a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003466:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800347e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800348a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ab      	bne.n	8003402 <HAL_RCC_OscConfig+0x26a>
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_OscConfig+0x31a>
 80034ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 817f 	beq.w	80037c6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034c8:	4ba7      	ldr	r3, [pc, #668]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034d4:	4ba4      	ldr	r3, [pc, #656]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d173      	bne.n	80035c8 <HAL_RCC_OscConfig+0x430>
 80034e0:	4ba1      	ldr	r3, [pc, #644]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d16c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x430>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003500:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x386>
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e013      	b.n	8003546 <HAL_RCC_OscConfig+0x3ae>
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003530:	2302      	movs	r3, #2
 8003532:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003536:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003542:	4b89      	ldr	r3, [pc, #548]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2202      	movs	r2, #2
 8003548:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800354c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003558:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCC_OscConfig+0x3f6>
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d002      	beq.n	800358e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f000 be52 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	21f8      	movs	r1, #248	; 0xf8
 80035a4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80035ac:	fa91 f1a1 	rbit	r1, r1
 80035b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80035b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035b8:	fab1 f181 	clz	r1, r1
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	408b      	lsls	r3, r1
 80035c0:	4969      	ldr	r1, [pc, #420]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e0fe      	b.n	80037c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8088 	beq.w	80036ea <HAL_RCC_OscConfig+0x552>
 80035da:	2301      	movs	r3, #1
 80035dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80035ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	2301      	movs	r3, #1
 8003604:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7ff f893 	bl	8002730 <HAL_GetTick>
 800360a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003610:	f7ff f88e 	bl	8002730 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d902      	bls.n	8003626 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	f000 be06 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003626:	2302      	movs	r3, #2
 8003628:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003638:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_RCC_OscConfig+0x4be>
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	e013      	b.n	800367e <HAL_RCC_OscConfig+0x4e6>
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800366e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2202      	movs	r2, #2
 8003680:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003684:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003690:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0af      	beq.n	8003610 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	21f8      	movs	r1, #248	; 0xf8
 80036c6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80036ce:	fa91 f1a1 	rbit	r1, r1
 80036d2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80036d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036da:	fab1 f181 	clz	r1, r1
 80036de:	b2c9      	uxtb	r1, r1
 80036e0:	408b      	lsls	r3, r1
 80036e2:	4921      	ldr	r1, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e06d      	b.n	80037c6 <HAL_RCC_OscConfig+0x62e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80036fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7ff f80b 	bl	8002730 <HAL_GetTick>
 800371a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003720:	f7ff f806 	bl	8002730 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f000 bd7e 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x5d4>
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e016      	b.n	8003794 <HAL_RCC_OscConfig+0x5fc>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	2302      	movs	r3, #2
 800376e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003790:	4bbf      	ldr	r3, [pc, #764]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2202      	movs	r2, #2
 8003796:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800379a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80037a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f002 021f 	and.w	r2, r2, #31
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ac      	bne.n	8003720 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8113 	beq.w	8003a02 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x74e>
 80037ec:	2301      	movs	r3, #1
 80037ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80037fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	4ba2      	ldr	r3, [pc, #648]	; (8003a94 <HAL_RCC_OscConfig+0x8fc>)
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	461a      	mov	r2, r3
 8003812:	2301      	movs	r3, #1
 8003814:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe ff8b 	bl	8002730 <HAL_GetTick>
 800381a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe ff86 	bl	8002730 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d902      	bls.n	8003836 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	f000 bcfe 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003836:	2302      	movs	r3, #2
 8003838:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003856:	2202      	movs	r2, #2
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800387a:	2202      	movs	r2, #2
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003894:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038a2:	2102      	movs	r1, #2
 80038a4:	6019      	str	r1, [r3, #0]
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f1a3 	rbit	r1, r3
 80038b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038bc:	6019      	str	r1, [r3, #0]
  return result;
 80038be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d09d      	beq.n	8003820 <HAL_RCC_OscConfig+0x688>
 80038e4:	e08d      	b.n	8003a02 <HAL_RCC_OscConfig+0x86a>
 80038e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003904:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003908:	601a      	str	r2, [r3, #0]
  return result;
 800390a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003912:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_OscConfig+0x8fc>)
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fe ff02 	bl	8002730 <HAL_GetTick>
 800392c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fe fefd 	bl	8002730 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	f000 bc75 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003974:	2202      	movs	r2, #2
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003994:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 80039b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039c0:	2102      	movs	r1, #2
 80039c2:	6019      	str	r1, [r3, #0]
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f1a3 	rbit	r1, r3
 80039d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039da:	6019      	str	r1, [r3, #0]
  return result;
 80039dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d197      	bne.n	8003932 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81a5 	beq.w	8003d62 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	61d3      	str	r3, [r2, #28]
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a70:	f7fe fe5e 	bl	8002730 <HAL_GetTick>
 8003a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e010      	b.n	8003a9c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fe fe59 	bl	8002730 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d908      	bls.n	8003a9c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e3d1      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	10908120 	.word	0x10908120
 8003a98:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCC_OscConfig+0xb3c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e8      	beq.n	8003a7a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x92e>
 8003ab8:	4b87      	ldr	r3, [pc, #540]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a86      	ldr	r2, [pc, #536]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	e035      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x958>
 8003ad6:	4b80      	ldr	r3, [pc, #512]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a7f      	ldr	r2, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6213      	str	r3, [r2, #32]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	e020      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x982>
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a74      	ldr	r2, [pc, #464]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a71      	ldr	r2, [pc, #452]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a6b      	ldr	r2, [pc, #428]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8081 	beq.w	8003c46 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fe fdf4 	bl	8002730 <HAL_GetTick>
 8003b48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fdef 	bl	8002730 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e365      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fa93 f2a3 	rbit	r2, r3
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bac:	601a      	str	r2, [r3, #0]
  return result;
 8003bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f043 0302 	orr.w	r3, r3, #2
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d102      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xa3a>
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	e013      	b.n	8003bfa <HAL_RCC_OscConfig+0xa62>
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c02:	2102      	movs	r1, #2
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	fa92 f1a2 	rbit	r1, r2
 8003c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c18:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c1c:	6011      	str	r1, [r2, #0]
  return result;
 8003c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c22:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fab2 f282 	clz	r2, r2
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f002 021f 	and.w	r2, r2, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d084      	beq.n	8003b4e <HAL_RCC_OscConfig+0x9b6>
 8003c44:	e083      	b.n	8003d4e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fd73 	bl	8002730 <HAL_GetTick>
 8003c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe fd6e 	bl	8002730 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e2e4      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003caa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cae:	601a      	str	r2, [r3, #0]
  return result;
 8003cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0xb44>
 8003cce:	4b02      	ldr	r3, [pc, #8]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	e017      	b.n	8003d04 <HAL_RCC_OscConfig+0xb6c>
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	4bb3      	ldr	r3, [pc, #716]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fa92 f1a2 	rbit	r1, r2
 8003d1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d22:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d26:	6011      	str	r1, [r2, #0]
  return result;
 8003d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d180      	bne.n	8003c50 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b9e      	ldr	r3, [pc, #632]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a9d      	ldr	r2, [pc, #628]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 825e 	beq.w	8004230 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	f000 821f 	beq.w	80041c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	f040 8170 	bne.w	8004074 <HAL_RCC_OscConfig+0xedc>
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003db8:	601a      	str	r2, [r3, #0]
  return result;
 8003dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003dc2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe fca9 	bl	8002730 <HAL_GetTick>
 8003dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	e009      	b.n	8003df8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe fca4 	bl	8002730 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e21c      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fa93 f2a3 	rbit	r2, r3
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e1c:	601a      	str	r2, [r3, #0]
  return result;
 8003e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_RCC_OscConfig+0xcaa>
 8003e3c:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e027      	b.n	8003e92 <HAL_RCC_OscConfig+0xcfa>
 8003e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e54:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e88:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e9e:	6011      	str	r1, [r2, #0]
 8003ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ea4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	fa92 f1a2 	rbit	r1, r2
 8003eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eb2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003eb6:	6011      	str	r1, [r2, #0]
  return result;
 8003eb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ebc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d182      	bne.n	8003de4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ede:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 020f 	bic.w	r2, r3, #15
 8003ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	4937      	ldr	r1, [pc, #220]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a19      	ldr	r1, [r3, #32]
 8003f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	492d      	ldr	r1, [pc, #180]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
 8003f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f44:	601a      	str	r2, [r3, #0]
  return result;
 8003f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	461a      	mov	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe fbe3 	bl	8002730 <HAL_GetTick>
 8003f6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6e:	e009      	b.n	8003f84 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe fbde 	bl	8002730 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e156      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fa8:	601a      	str	r2, [r3, #0]
  return result;
 8003faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xe3c>
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	e02a      	b.n	8004024 <HAL_RCC_OscConfig+0xe8c>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004028:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800402c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004036:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	fa92 f1a2 	rbit	r1, r2
 8004040:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004044:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004048:	6011      	str	r1, [r2, #0]
  return result;
 800404a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800404e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	f042 0220 	orr.w	r2, r2, #32
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f002 021f 	and.w	r2, r2, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f43f af7f 	beq.w	8003f70 <HAL_RCC_OscConfig+0xdd8>
 8004072:	e0dd      	b.n	8004230 <HAL_RCC_OscConfig+0x1098>
 8004074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004078:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800407c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004086:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004094:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004098:	601a      	str	r2, [r3, #0]
  return result;
 800409a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fe fb39 	bl	8002730 <HAL_GetTick>
 80040be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	e009      	b.n	80040d8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fe fb34 	bl	8002730 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ac      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 80040d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa93 f2a3 	rbit	r2, r3
 80040f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040fc:	601a      	str	r2, [r3, #0]
  return result;
 80040fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004102:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004106:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0xf8a>
 800411c:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e027      	b.n	8004172 <HAL_RCC_OscConfig+0xfda>
 8004122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004126:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800412a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800412e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004134:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	fa93 f2a3 	rbit	r2, r3
 800413e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004142:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004168:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	4b33      	ldr	r3, [pc, #204]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004176:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800417a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004184:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	fa92 f1a2 	rbit	r1, r2
 800418e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004192:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004196:	6011      	str	r1, [r2, #0]
  return result;
 8004198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800419c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	fab2 f282 	clz	r2, r2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	f002 021f 	and.w	r2, r2, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d182      	bne.n	80040c4 <HAL_RCC_OscConfig+0xf2c>
 80041be:	e037      	b.n	8004230 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e02e      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80041ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d117      	bne.n	800422c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004200:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004210:	429a      	cmp	r2, r3
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b09e      	sub	sp, #120	; 0x78
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e162      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b90      	ldr	r3, [pc, #576]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b8d      	ldr	r3, [pc, #564]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	498b      	ldr	r1, [pc, #556]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e14a      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	497f      	ldr	r1, [pc, #508]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80dc 	beq.w	800446c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d13c      	bne.n	8004336 <HAL_RCC_ClockConfig+0xf6>
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xa6>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	e00f      	b.n	8004306 <HAL_RCC_ClockConfig+0xc6>
 80042e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	667b      	str	r3, [r7, #100]	; 0x64
 80042f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60
 80042fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800430a:	65ba      	str	r2, [r7, #88]	; 0x58
 800430c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d17b      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0f3      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d13c      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x178>
 800433e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800434c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_RCC_ClockConfig+0x128>
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_RCC_ClockConfig+0x148>
 8004368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	647b      	str	r3, [r7, #68]	; 0x44
 8004376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438c:	63ba      	str	r2, [r7, #56]	; 0x38
 800438e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004390:	fa92 f2a2 	rbit	r2, r2
 8004394:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004398:	fab2 f282 	clz	r2, r2
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f042 0220 	orr.w	r2, r2, #32
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	f002 021f 	and.w	r2, r2, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13a      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b2      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 80043b8:	2302      	movs	r3, #2
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x1a0>
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e00d      	b.n	80043fc <HAL_RCC_ClockConfig+0x1bc>
 80043e0:	2302      	movs	r3, #2
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	2302      	movs	r3, #2
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	61ba      	str	r2, [r7, #24]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	617a      	str	r2, [r7, #20]
  return result;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e079      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	491a      	ldr	r1, [pc, #104]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800443c:	f7fe f978 	bl	8002730 <HAL_GetTick>
 8004440:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	e00a      	b.n	800445a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004444:	f7fe f974 	bl	8002730 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e061      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 020c 	and.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	429a      	cmp	r2, r3
 800446a:	d1eb      	bne.n	8004444 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d214      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e040      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	491a      	ldr	r1, [pc, #104]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4912      	ldr	r1, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044e2:	f000 f829 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044e6:	4601      	mov	r1, r0
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	22f0      	movs	r2, #240	; 0xf0
 80044f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	fa92 f2a2 	rbit	r2, r2
 80044fa:	60fa      	str	r2, [r7, #12]
  return result;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	40d3      	lsrs	r3, r2
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x2ec>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	fa21 f303 	lsr.w	r3, r1, r3
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x2f0>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_RCC_ClockConfig+0x2f4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe f8da 	bl	80026d0 <HAL_InitTick>
  
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3778      	adds	r7, #120	; 0x78
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	08007a38 	.word	0x08007a38
 8004530:	20000090 	.word	0x20000090
 8004534:	20000094 	.word	0x20000094

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b08b      	sub	sp, #44	; 0x2c
 800453c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e03f      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 800456a:	623b      	str	r3, [r7, #32]
      break;
 800456c:	e03f      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004574:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004578:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	fa92 f2a2 	rbit	r2, r2
 8004580:	607a      	str	r2, [r7, #4]
  return result;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	40d3      	lsrs	r3, r2
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_RCC_GetSysClockFreq+0xcc>)
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	220f      	movs	r2, #15
 800459c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	60fa      	str	r2, [r7, #12]
  return result;
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	40d3      	lsrs	r3, r2
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045c0:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	e007      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	623b      	str	r3, [r7, #32]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ea:	623b      	str	r3, [r7, #32]
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	372c      	adds	r7, #44	; 0x2c
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40021000 	.word	0x40021000
 8004600:	007a1200 	.word	0x007a1200
 8004604:	08007a50 	.word	0x08007a50
 8004608:	08007a60 	.word	0x08007a60

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000090 	.word	0x20000090

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800462a:	f7ff ffef 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004638:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	08007a48 	.word	0x08007a48

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800466e:	f7ff ffcd 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004672:	4601      	mov	r1, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800467c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004680:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	603a      	str	r2, [r7, #0]
  return result;
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	40d3      	lsrs	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	08007a48 	.word	0x08007a48

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	; 0x48
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80d4 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d0:	4b4e      	ldr	r3, [pc, #312]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a4a      	ldr	r2, [pc, #296]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b45      	ldr	r3, [pc, #276]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a41      	ldr	r2, [pc, #260]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fe f80d 	bl	8002730 <HAL_GetTick>
 8004716:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fe f809 	bl	8002730 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1d6      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8084 	beq.w	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004754:	429a      	cmp	r2, r3
 8004756:	d07c      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	461a      	mov	r2, r3
 8004782:	2301      	movs	r3, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04b      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fd ffb9 	bl	8002730 <HAL_GetTick>
 80047be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd ffb5 	bl	8002730 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e180      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80047d8:	2302      	movs	r3, #2
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	2302      	movs	r3, #2
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
  return result;
 80047f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d108      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004806:	4b01      	ldr	r3, [pc, #4]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	e00d      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800480c:	40021000 	.word	0x40021000
 8004810:	40007000 	.word	0x40007000
 8004814:	10908100 	.word	0x10908100
 8004818:	2302      	movs	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	4b9a      	ldr	r3, [pc, #616]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2202      	movs	r2, #2
 800482a:	613a      	str	r2, [r7, #16]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	fa92 f2a2 	rbit	r2, r2
 8004832:	60fa      	str	r2, [r7, #12]
  return result;
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	fab2 f282 	clz	r2, r2
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f002 021f 	and.w	r2, r2, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f202 	lsl.w	r2, r1, r2
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0b7      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	498c      	ldr	r1, [pc, #560]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4a87      	ldr	r2, [pc, #540]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004876:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004884:	4b82      	ldr	r3, [pc, #520]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	497f      	ldr	r1, [pc, #508]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a2:	4b7b      	ldr	r3, [pc, #492]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4978      	ldr	r1, [pc, #480]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c0:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4970      	ldr	r1, [pc, #448]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048de:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 0210 	bic.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4969      	ldr	r1, [pc, #420]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048fc:	4b64      	ldr	r3, [pc, #400]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	4961      	ldr	r1, [pc, #388]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800491a:	4b5d      	ldr	r3, [pc, #372]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f023 0220 	bic.w	r2, r3, #32
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	495a      	ldr	r1, [pc, #360]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004938:	4b55      	ldr	r3, [pc, #340]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4952      	ldr	r1, [pc, #328]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004956:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	494b      	ldr	r1, [pc, #300]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004974:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4943      	ldr	r1, [pc, #268]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	493c      	ldr	r1, [pc, #240]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049b0:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	492d      	ldr	r1, [pc, #180]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ec:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	4925      	ldr	r1, [pc, #148]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	491e      	ldr	r1, [pc, #120]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	490f      	ldr	r1, [pc, #60]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a82:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a96:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3748      	adds	r7, #72	; 0x48
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e040      	b.n	8004b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd fb6a 	bl	80021e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2224      	movs	r2, #36	; 0x24
 8004b14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fc58 	bl	80053dc <UART_SetConfig>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e022      	b.n	8004b7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fe22 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fea9 	bl	80058cc <UART_CheckIdleState>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	f040 8082 	bne.w	8004ca2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_Transmit+0x26>
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07a      	b.n	8004ca4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Transmit+0x38>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e073      	b.n	8004ca4 <HAL_UART_Transmit+0x120>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2221      	movs	r2, #33	; 0x21
 8004bd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd2:	f7fd fdad 	bl	8002730 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d108      	bne.n	8004c04 <HAL_UART_Transmit+0x80>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e003      	b.n	8004c0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c14:	e02d      	b.n	8004c72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fe9c 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e039      	b.n	8004ca4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c42:	b292      	uxth	r2, r2
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	3302      	adds	r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e008      	b.n	8004c60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b292      	uxth	r2, r2
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1cb      	bne.n	8004c16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2140      	movs	r1, #64	; 0x40
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fe68 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e005      	b.n	8004ca4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b090      	sub	sp, #64	; 0x40
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d139      	bne.n	8004d42 <HAL_UART_DMAStop+0x96>
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	2b21      	cmp	r3, #33	; 0x21
 8004cd2:	d136      	bne.n	8004d42 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fd fef2 	bl	8002afe <HAL_DMA_Abort>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe f804 	bl	8002d32 <HAL_DMA_GetError>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d105      	bne.n	8004d3c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2210      	movs	r2, #16
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e044      	b.n	8004dc6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 ff75 	bl	8005c2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d139      	bne.n	8004dc4 <HAL_UART_DMAStop+0x118>
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	2b22      	cmp	r3, #34	; 0x22
 8004d54:	d136      	bne.n	8004dc4 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	61ba      	str	r2, [r7, #24]
 8004d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6979      	ldr	r1, [r7, #20]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	613b      	str	r3, [r7, #16]
   return(result);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d015      	beq.n	8004dbe <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd feb1 	bl	8002afe <HAL_DMA_Abort>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd ffc3 	bl	8002d32 <HAL_DMA_GetError>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d105      	bne.n	8004dbe <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2210      	movs	r2, #16
 8004db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e003      	b.n	8004dc6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 ff5a 	bl	8005c78 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3740      	adds	r7, #64	; 0x40
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b0ba      	sub	sp, #232	; 0xe8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dfe:	4013      	ands	r3, r2
 8004e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 82a3 	beq.w	8005374 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
      }
      return;
 8004e36:	e29d      	b.n	8005374 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8117 	beq.w	8005070 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e52:	4b85      	ldr	r3, [pc, #532]	; (8005068 <HAL_UART_IRQHandler+0x298>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 810a 	beq.w	8005070 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d011      	beq.n	8004e8c <HAL_UART_IRQHandler+0xbc>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <HAL_UART_IRQHandler+0xec>
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d011      	beq.n	8004eec <HAL_UART_IRQHandler+0x11c>
 8004ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee2:	f043 0202 	orr.w	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_UART_IRQHandler+0x18a>
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8209 	beq.w	8005378 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04f      	beq.n	8005052 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fe60 	bl	8005c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d141      	bne.n	800504a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800500a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d9      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	2b00      	cmp	r3, #0
 8005018:	d013      	beq.n	8005042 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_UART_IRQHandler+0x29c>)
 8005020:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fda2 	bl	8002b70 <HAL_DMA_Abort_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00f      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9c0 	bl	80053c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e00b      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9bc 	bl	80053c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e007      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9b8 	bl	80053c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005060:	e18a      	b.n	8005378 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005062:	bf00      	nop
    return;
 8005064:	e188      	b.n	8005378 <HAL_UART_IRQHandler+0x5a8>
 8005066:	bf00      	nop
 8005068:	04000120 	.word	0x04000120
 800506c:	08005f11 	.word	0x08005f11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	2b01      	cmp	r3, #1
 8005076:	f040 8143 	bne.w	8005300 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 813c 	beq.w	8005300 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8135 	beq.w	8005300 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2210      	movs	r2, #16
 800509c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	f040 80b1 	bne.w	8005210 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 815c 	beq.w	800537c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ce:	429a      	cmp	r2, r3
 80050d0:	f080 8154 	bcs.w	800537c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	f000 8085 	beq.w	80051f4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005118:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800512c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1da      	bne.n	80050ea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005158:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800515c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005160:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800516a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e1      	bne.n	8005134 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005194:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800519a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e3      	bne.n	8005170 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c4:	f023 0310 	bic.w	r3, r3, #16
 80051c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80051d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e4      	bne.n	80051b4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fc85 	bl	8002afe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005200:	b29b      	uxth	r3, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	b29b      	uxth	r3, r3
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fc fb4d 	bl	80018a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800520e:	e0b5      	b.n	800537c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800521c:	b29b      	uxth	r3, r3
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80a7 	beq.w	8005380 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80a2 	beq.w	8005380 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800525e:	647b      	str	r3, [r7, #68]	; 0x44
 8005260:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e4      	bne.n	800523c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3308      	adds	r3, #8
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	623b      	str	r3, [r7, #32]
   return(result);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005296:	633a      	str	r2, [r7, #48]	; 0x30
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800529c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	617b      	str	r3, [r7, #20]
   return(result);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e4      	bne.n	80052bc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fc fad5 	bl	80018a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052fe:	e03f      	b.n	8005380 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00e      	beq.n	800532a <HAL_UART_IRQHandler+0x55a>
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fe34 	bl	8005f90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005328:	e02d      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00e      	beq.n	8005354 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01c      	beq.n	8005384 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
    }
    return;
 8005352:	e017      	b.n	8005384 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <HAL_UART_IRQHandler+0x5b6>
 8005360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fde5 	bl	8005f3c <UART_EndTransmit_IT>
    return;
 8005372:	e008      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005374:	bf00      	nop
 8005376:	e006      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005378:	bf00      	nop
 800537a:	e004      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
      return;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005384:	bf00      	nop
  }

}
 8005386:	37e8      	adds	r7, #232	; 0xe8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b92      	ldr	r3, [pc, #584]	; (8005650 <UART_SetConfig+0x274>)
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	430b      	orrs	r3, r1
 8005412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	430a      	orrs	r2, r1
 800544c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a80      	ldr	r2, [pc, #512]	; (8005654 <UART_SetConfig+0x278>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d120      	bne.n	800549a <UART_SetConfig+0xbe>
 8005458:	4b7f      	ldr	r3, [pc, #508]	; (8005658 <UART_SetConfig+0x27c>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b03      	cmp	r3, #3
 8005462:	d817      	bhi.n	8005494 <UART_SetConfig+0xb8>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x90>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800547d 	.word	0x0800547d
 8005470:	08005489 	.word	0x08005489
 8005474:	0800548f 	.word	0x0800548f
 8005478:	08005483 	.word	0x08005483
 800547c:	2301      	movs	r3, #1
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e0b5      	b.n	80055ee <UART_SetConfig+0x212>
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e0b2      	b.n	80055ee <UART_SetConfig+0x212>
 8005488:	2304      	movs	r3, #4
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e0af      	b.n	80055ee <UART_SetConfig+0x212>
 800548e:	2308      	movs	r3, #8
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e0ac      	b.n	80055ee <UART_SetConfig+0x212>
 8005494:	2310      	movs	r3, #16
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e0a9      	b.n	80055ee <UART_SetConfig+0x212>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6f      	ldr	r2, [pc, #444]	; (800565c <UART_SetConfig+0x280>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d124      	bne.n	80054ee <UART_SetConfig+0x112>
 80054a4:	4b6c      	ldr	r3, [pc, #432]	; (8005658 <UART_SetConfig+0x27c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b0:	d011      	beq.n	80054d6 <UART_SetConfig+0xfa>
 80054b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b6:	d817      	bhi.n	80054e8 <UART_SetConfig+0x10c>
 80054b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054bc:	d011      	beq.n	80054e2 <UART_SetConfig+0x106>
 80054be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c2:	d811      	bhi.n	80054e8 <UART_SetConfig+0x10c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <UART_SetConfig+0xf4>
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d006      	beq.n	80054dc <UART_SetConfig+0x100>
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x10c>
 80054d0:	2300      	movs	r3, #0
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e08b      	b.n	80055ee <UART_SetConfig+0x212>
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e088      	b.n	80055ee <UART_SetConfig+0x212>
 80054dc:	2304      	movs	r3, #4
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e085      	b.n	80055ee <UART_SetConfig+0x212>
 80054e2:	2308      	movs	r3, #8
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e082      	b.n	80055ee <UART_SetConfig+0x212>
 80054e8:	2310      	movs	r3, #16
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e07f      	b.n	80055ee <UART_SetConfig+0x212>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5b      	ldr	r2, [pc, #364]	; (8005660 <UART_SetConfig+0x284>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d124      	bne.n	8005542 <UART_SetConfig+0x166>
 80054f8:	4b57      	ldr	r3, [pc, #348]	; (8005658 <UART_SetConfig+0x27c>)
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005504:	d011      	beq.n	800552a <UART_SetConfig+0x14e>
 8005506:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800550a:	d817      	bhi.n	800553c <UART_SetConfig+0x160>
 800550c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005510:	d011      	beq.n	8005536 <UART_SetConfig+0x15a>
 8005512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005516:	d811      	bhi.n	800553c <UART_SetConfig+0x160>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <UART_SetConfig+0x148>
 800551c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005520:	d006      	beq.n	8005530 <UART_SetConfig+0x154>
 8005522:	e00b      	b.n	800553c <UART_SetConfig+0x160>
 8005524:	2300      	movs	r3, #0
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e061      	b.n	80055ee <UART_SetConfig+0x212>
 800552a:	2302      	movs	r3, #2
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e05e      	b.n	80055ee <UART_SetConfig+0x212>
 8005530:	2304      	movs	r3, #4
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e05b      	b.n	80055ee <UART_SetConfig+0x212>
 8005536:	2308      	movs	r3, #8
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e058      	b.n	80055ee <UART_SetConfig+0x212>
 800553c:	2310      	movs	r3, #16
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e055      	b.n	80055ee <UART_SetConfig+0x212>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a47      	ldr	r2, [pc, #284]	; (8005664 <UART_SetConfig+0x288>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d124      	bne.n	8005596 <UART_SetConfig+0x1ba>
 800554c:	4b42      	ldr	r3, [pc, #264]	; (8005658 <UART_SetConfig+0x27c>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005558:	d011      	beq.n	800557e <UART_SetConfig+0x1a2>
 800555a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800555e:	d817      	bhi.n	8005590 <UART_SetConfig+0x1b4>
 8005560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005564:	d011      	beq.n	800558a <UART_SetConfig+0x1ae>
 8005566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556a:	d811      	bhi.n	8005590 <UART_SetConfig+0x1b4>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <UART_SetConfig+0x19c>
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005574:	d006      	beq.n	8005584 <UART_SetConfig+0x1a8>
 8005576:	e00b      	b.n	8005590 <UART_SetConfig+0x1b4>
 8005578:	2300      	movs	r3, #0
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e037      	b.n	80055ee <UART_SetConfig+0x212>
 800557e:	2302      	movs	r3, #2
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e034      	b.n	80055ee <UART_SetConfig+0x212>
 8005584:	2304      	movs	r3, #4
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e031      	b.n	80055ee <UART_SetConfig+0x212>
 800558a:	2308      	movs	r3, #8
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e02e      	b.n	80055ee <UART_SetConfig+0x212>
 8005590:	2310      	movs	r3, #16
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e02b      	b.n	80055ee <UART_SetConfig+0x212>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a33      	ldr	r2, [pc, #204]	; (8005668 <UART_SetConfig+0x28c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d124      	bne.n	80055ea <UART_SetConfig+0x20e>
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <UART_SetConfig+0x27c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055ac:	d011      	beq.n	80055d2 <UART_SetConfig+0x1f6>
 80055ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055b2:	d817      	bhi.n	80055e4 <UART_SetConfig+0x208>
 80055b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b8:	d011      	beq.n	80055de <UART_SetConfig+0x202>
 80055ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055be:	d811      	bhi.n	80055e4 <UART_SetConfig+0x208>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <UART_SetConfig+0x1f0>
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c8:	d006      	beq.n	80055d8 <UART_SetConfig+0x1fc>
 80055ca:	e00b      	b.n	80055e4 <UART_SetConfig+0x208>
 80055cc:	2300      	movs	r3, #0
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e00d      	b.n	80055ee <UART_SetConfig+0x212>
 80055d2:	2302      	movs	r3, #2
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e00a      	b.n	80055ee <UART_SetConfig+0x212>
 80055d8:	2304      	movs	r3, #4
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e007      	b.n	80055ee <UART_SetConfig+0x212>
 80055de:	2308      	movs	r3, #8
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e004      	b.n	80055ee <UART_SetConfig+0x212>
 80055e4:	2310      	movs	r3, #16
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e001      	b.n	80055ee <UART_SetConfig+0x212>
 80055ea:	2310      	movs	r3, #16
 80055ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f6:	d16c      	bne.n	80056d2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d838      	bhi.n	8005670 <UART_SetConfig+0x294>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x228>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	08005671 	.word	0x08005671
 8005614:	0800563f 	.word	0x0800563f
 8005618:	08005671 	.word	0x08005671
 800561c:	08005671 	.word	0x08005671
 8005620:	08005671 	.word	0x08005671
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fe fffc 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 800562c:	61b8      	str	r0, [r7, #24]
        break;
 800562e:	e024      	b.n	800567a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7ff f81a 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8005634:	61b8      	str	r0, [r7, #24]
        break;
 8005636:	e020      	b.n	800567a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <UART_SetConfig+0x290>)
 800563a:	61bb      	str	r3, [r7, #24]
        break;
 800563c:	e01d      	b.n	800567a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fe ff7b 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 8005642:	61b8      	str	r0, [r7, #24]
        break;
 8005644:	e019      	b.n	800567a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e015      	b.n	800567a <UART_SetConfig+0x29e>
 800564e:	bf00      	nop
 8005650:	efff69f3 	.word	0xefff69f3
 8005654:	40013800 	.word	0x40013800
 8005658:	40021000 	.word	0x40021000
 800565c:	40004400 	.word	0x40004400
 8005660:	40004800 	.word	0x40004800
 8005664:	40004c00 	.word	0x40004c00
 8005668:	40005000 	.word	0x40005000
 800566c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	77bb      	strb	r3, [r7, #30]
        break;
 8005678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d075      	beq.n	800576c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	005a      	lsls	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	441a      	add	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	b29b      	uxth	r3, r3
 8005696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b0f      	cmp	r3, #15
 800569c:	d916      	bls.n	80056cc <UART_SetConfig+0x2f0>
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a4:	d212      	bcs.n	80056cc <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f023 030f 	bic.w	r3, r3, #15
 80056ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	89fb      	ldrh	r3, [r7, #14]
 80056be:	4313      	orrs	r3, r2
 80056c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	89fa      	ldrh	r2, [r7, #14]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e04f      	b.n	800576c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	77bb      	strb	r3, [r7, #30]
 80056d0:	e04c      	b.n	800576c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d2:	7ffb      	ldrb	r3, [r7, #31]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d828      	bhi.n	800572a <UART_SetConfig+0x34e>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x304>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe ff8e 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e013      	b.n	8005734 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fe ffac 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8005710:	61b8      	str	r0, [r7, #24]
        break;
 8005712:	e00f      	b.n	8005734 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <UART_SetConfig+0x3a8>)
 8005716:	61bb      	str	r3, [r7, #24]
        break;
 8005718:	e00c      	b.n	8005734 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe ff0d 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 800571e:	61b8      	str	r0, [r7, #24]
        break;
 8005720:	e008      	b.n	8005734 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e004      	b.n	8005734 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	77bb      	strb	r3, [r7, #30]
        break;
 8005732:	bf00      	nop
    }

    if (pclk != 0U)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	085a      	lsrs	r2, r3, #1
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	441a      	add	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d908      	bls.n	8005768 <UART_SetConfig+0x38c>
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d204      	bcs.n	8005768 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	e001      	b.n	800576c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005778:	7fbb      	ldrb	r3, [r7, #30]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	007a1200 	.word	0x007a1200

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fc ff28 	bl	8002730 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d10e      	bne.n	800590e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f82d 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e023      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d10e      	bne.n	800593a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f817 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e00d      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b09c      	sub	sp, #112	; 0x70
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e0a5      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	f000 80a1 	beq.w	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc fed9 	bl	8002730 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	2b00      	cmp	r3, #0
 800598e:	d13e      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a4:	667b      	str	r3, [r7, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	663b      	str	r3, [r7, #96]	; 0x60
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e067      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d04f      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2a:	d147      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a88:	623a      	str	r2, [r7, #32]
 8005a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e010      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f43f af4a 	beq.w	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3770      	adds	r7, #112	; 0x70
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b096      	sub	sp, #88	; 0x58
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2222      	movs	r2, #34	; 0x22
 8005b10:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02b      	beq.n	8005b72 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a40      	ldr	r2, [pc, #256]	; (8005c20 <UART_Start_Receive_DMA+0x138>)
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <UART_Start_Receive_DMA+0x13c>)
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a3e      	ldr	r2, [pc, #248]	; (8005c28 <UART_Start_Receive_DMA+0x140>)
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	2200      	movs	r2, #0
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	4619      	mov	r1, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	f7fc ff77 	bl	8002a40 <HAL_DMA_Start_IT>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e051      	b.n	8005c16 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b9a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bcc:	637a      	str	r2, [r7, #52]	; 0x34
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c00:	623a      	str	r2, [r7, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e5      	bne.n	8005be0 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3758      	adds	r7, #88	; 0x58
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08005d3f 	.word	0x08005d3f
 8005c24:	08005e5d 	.word	0x08005e5d
 8005c28:	08005e95 	.word	0x08005e95

08005c2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b089      	sub	sp, #36	; 0x24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005c6c:	bf00      	nop
 8005c6e:	3724      	adds	r7, #36	; 0x24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b095      	sub	sp, #84	; 0x54
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d118      	bne.n	8005d20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d32:	bf00      	nop
 8005d34:	3754      	adds	r7, #84	; 0x54
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b09c      	sub	sp, #112	; 0x70
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d070      	beq.n	8005e36 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	667b      	str	r3, [r7, #100]	; 0x64
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dae:	647a      	str	r2, [r7, #68]	; 0x44
 8005db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005de2:	633a      	str	r2, [r7, #48]	; 0x30
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	2220      	movs	r2, #32
 8005dfa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d118      	bne.n	8005e36 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	69b9      	ldr	r1, [r7, #24]
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e6      	bne.n	8005e04 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e44:	4619      	mov	r1, r3
 8005e46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e48:	f7fb fd2e 	bl	80018a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e4c:	e002      	b.n	8005e54 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005e4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e50:	f7ff faa6 	bl	80053a0 <HAL_UART_RxCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3770      	adds	r7, #112	; 0x70
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d109      	bne.n	8005e86 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7fb fd12 	bl	80018a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e84:	e002      	b.n	8005e8c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff fa94 	bl	80053b4 <HAL_UART_RxHalfCpltCallback>
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d109      	bne.n	8005ed0 <UART_DMAError+0x3c>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b21      	cmp	r3, #33	; 0x21
 8005ec0:	d106      	bne.n	8005ed0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f7ff feae 	bl	8005c2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d109      	bne.n	8005ef2 <UART_DMAError+0x5e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b22      	cmp	r3, #34	; 0x22
 8005ee2:	d106      	bne.n	8005ef2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f7ff fec3 	bl	8005c78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef8:	f043 0210 	orr.w	r2, r3, #16
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7ff fa60 	bl	80053c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f08:	bf00      	nop
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff fa4a 	bl	80053c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fa02 	bl	800538c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f88:	bf00      	nop
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d14a      	bne.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e043      	b.n	8006052 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e03c      	b.n	8006052 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fd7b 	bl	8005ae8 <UART_Start_Receive_DMA>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d124      	bne.n	800604a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006004:	2b01      	cmp	r3, #1
 8006006:	d11d      	bne.n	8006044 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2210      	movs	r2, #16
 800600e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f043 0310 	orr.w	r3, r3, #16
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6a39      	ldr	r1, [r7, #32]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	61fb      	str	r3, [r7, #28]
   return(result);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8006042:	e002      	b.n	800604a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800604a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800604e:	e000      	b.n	8006052 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3730      	adds	r7, #48	; 0x30
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <atoi>:
 800605a:	220a      	movs	r2, #10
 800605c:	2100      	movs	r1, #0
 800605e:	f000 b955 	b.w	800630c <strtol>
	...

08006064 <__errno>:
 8006064:	4b01      	ldr	r3, [pc, #4]	; (800606c <__errno+0x8>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	2000009c 	.word	0x2000009c

08006070 <__libc_init_array>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4d0d      	ldr	r5, [pc, #52]	; (80060a8 <__libc_init_array+0x38>)
 8006074:	4c0d      	ldr	r4, [pc, #52]	; (80060ac <__libc_init_array+0x3c>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	2600      	movs	r6, #0
 800607c:	42a6      	cmp	r6, r4
 800607e:	d109      	bne.n	8006094 <__libc_init_array+0x24>
 8006080:	4d0b      	ldr	r5, [pc, #44]	; (80060b0 <__libc_init_array+0x40>)
 8006082:	4c0c      	ldr	r4, [pc, #48]	; (80060b4 <__libc_init_array+0x44>)
 8006084:	f001 faf4 	bl	8007670 <_init>
 8006088:	1b64      	subs	r4, r4, r5
 800608a:	10a4      	asrs	r4, r4, #2
 800608c:	2600      	movs	r6, #0
 800608e:	42a6      	cmp	r6, r4
 8006090:	d105      	bne.n	800609e <__libc_init_array+0x2e>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f855 3b04 	ldr.w	r3, [r5], #4
 8006098:	4798      	blx	r3
 800609a:	3601      	adds	r6, #1
 800609c:	e7ee      	b.n	800607c <__libc_init_array+0xc>
 800609e:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a2:	4798      	blx	r3
 80060a4:	3601      	adds	r6, #1
 80060a6:	e7f2      	b.n	800608e <__libc_init_array+0x1e>
 80060a8:	08007cb8 	.word	0x08007cb8
 80060ac:	08007cb8 	.word	0x08007cb8
 80060b0:	08007cb8 	.word	0x08007cb8
 80060b4:	08007cbc 	.word	0x08007cbc

080060b8 <memcpy>:
 80060b8:	440a      	add	r2, r1
 80060ba:	4291      	cmp	r1, r2
 80060bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c0:	d100      	bne.n	80060c4 <memcpy+0xc>
 80060c2:	4770      	bx	lr
 80060c4:	b510      	push	{r4, lr}
 80060c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ce:	4291      	cmp	r1, r2
 80060d0:	d1f9      	bne.n	80060c6 <memcpy+0xe>
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <memset>:
 80060d4:	4402      	add	r2, r0
 80060d6:	4603      	mov	r3, r0
 80060d8:	4293      	cmp	r3, r2
 80060da:	d100      	bne.n	80060de <memset+0xa>
 80060dc:	4770      	bx	lr
 80060de:	f803 1b01 	strb.w	r1, [r3], #1
 80060e2:	e7f9      	b.n	80060d8 <memset+0x4>

080060e4 <siprintf>:
 80060e4:	b40e      	push	{r1, r2, r3}
 80060e6:	b500      	push	{lr}
 80060e8:	b09c      	sub	sp, #112	; 0x70
 80060ea:	ab1d      	add	r3, sp, #116	; 0x74
 80060ec:	9002      	str	r0, [sp, #8]
 80060ee:	9006      	str	r0, [sp, #24]
 80060f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060f4:	4809      	ldr	r0, [pc, #36]	; (800611c <siprintf+0x38>)
 80060f6:	9107      	str	r1, [sp, #28]
 80060f8:	9104      	str	r1, [sp, #16]
 80060fa:	4909      	ldr	r1, [pc, #36]	; (8006120 <siprintf+0x3c>)
 80060fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	a902      	add	r1, sp, #8
 8006108:	f000 fa7e 	bl	8006608 <_svfiprintf_r>
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	b01c      	add	sp, #112	; 0x70
 8006114:	f85d eb04 	ldr.w	lr, [sp], #4
 8006118:	b003      	add	sp, #12
 800611a:	4770      	bx	lr
 800611c:	2000009c 	.word	0x2000009c
 8006120:	ffff0208 	.word	0xffff0208

08006124 <strstr>:
 8006124:	780a      	ldrb	r2, [r1, #0]
 8006126:	b570      	push	{r4, r5, r6, lr}
 8006128:	b96a      	cbnz	r2, 8006146 <strstr+0x22>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	429a      	cmp	r2, r3
 800612e:	d109      	bne.n	8006144 <strstr+0x20>
 8006130:	460c      	mov	r4, r1
 8006132:	4605      	mov	r5, r0
 8006134:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f6      	beq.n	800612a <strstr+0x6>
 800613c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006140:	429e      	cmp	r6, r3
 8006142:	d0f7      	beq.n	8006134 <strstr+0x10>
 8006144:	3001      	adds	r0, #1
 8006146:	7803      	ldrb	r3, [r0, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ef      	bne.n	800612c <strstr+0x8>
 800614c:	4618      	mov	r0, r3
 800614e:	e7ec      	b.n	800612a <strstr+0x6>

08006150 <strtok>:
 8006150:	4b16      	ldr	r3, [pc, #88]	; (80061ac <strtok+0x5c>)
 8006152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006158:	4605      	mov	r5, r0
 800615a:	b9fc      	cbnz	r4, 800619c <strtok+0x4c>
 800615c:	2050      	movs	r0, #80	; 0x50
 800615e:	9101      	str	r1, [sp, #4]
 8006160:	f000 f90e 	bl	8006380 <malloc>
 8006164:	9901      	ldr	r1, [sp, #4]
 8006166:	65b0      	str	r0, [r6, #88]	; 0x58
 8006168:	4602      	mov	r2, r0
 800616a:	b920      	cbnz	r0, 8006176 <strtok+0x26>
 800616c:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <strtok+0x60>)
 800616e:	4811      	ldr	r0, [pc, #68]	; (80061b4 <strtok+0x64>)
 8006170:	2157      	movs	r1, #87	; 0x57
 8006172:	f000 f8d5 	bl	8006320 <__assert_func>
 8006176:	e9c0 4400 	strd	r4, r4, [r0]
 800617a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800617e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006182:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006186:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800618a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800618e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006192:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006196:	6184      	str	r4, [r0, #24]
 8006198:	7704      	strb	r4, [r0, #28]
 800619a:	6244      	str	r4, [r0, #36]	; 0x24
 800619c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800619e:	2301      	movs	r3, #1
 80061a0:	4628      	mov	r0, r5
 80061a2:	b002      	add	sp, #8
 80061a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061a8:	f000 b806 	b.w	80061b8 <__strtok_r>
 80061ac:	2000009c 	.word	0x2000009c
 80061b0:	08007a74 	.word	0x08007a74
 80061b4:	08007a8b 	.word	0x08007a8b

080061b8 <__strtok_r>:
 80061b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ba:	b908      	cbnz	r0, 80061c0 <__strtok_r+0x8>
 80061bc:	6810      	ldr	r0, [r2, #0]
 80061be:	b188      	cbz	r0, 80061e4 <__strtok_r+0x2c>
 80061c0:	4604      	mov	r4, r0
 80061c2:	4620      	mov	r0, r4
 80061c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80061c8:	460f      	mov	r7, r1
 80061ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80061ce:	b91e      	cbnz	r6, 80061d8 <__strtok_r+0x20>
 80061d0:	b965      	cbnz	r5, 80061ec <__strtok_r+0x34>
 80061d2:	6015      	str	r5, [r2, #0]
 80061d4:	4628      	mov	r0, r5
 80061d6:	e005      	b.n	80061e4 <__strtok_r+0x2c>
 80061d8:	42b5      	cmp	r5, r6
 80061da:	d1f6      	bne.n	80061ca <__strtok_r+0x12>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f0      	bne.n	80061c2 <__strtok_r+0xa>
 80061e0:	6014      	str	r4, [r2, #0]
 80061e2:	7003      	strb	r3, [r0, #0]
 80061e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e6:	461c      	mov	r4, r3
 80061e8:	e00c      	b.n	8006204 <__strtok_r+0x4c>
 80061ea:	b915      	cbnz	r5, 80061f2 <__strtok_r+0x3a>
 80061ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061f0:	460e      	mov	r6, r1
 80061f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80061f6:	42ab      	cmp	r3, r5
 80061f8:	d1f7      	bne.n	80061ea <__strtok_r+0x32>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f3      	beq.n	80061e6 <__strtok_r+0x2e>
 80061fe:	2300      	movs	r3, #0
 8006200:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006204:	6014      	str	r4, [r2, #0]
 8006206:	e7ed      	b.n	80061e4 <__strtok_r+0x2c>

08006208 <_strtol_l.constprop.0>:
 8006208:	2b01      	cmp	r3, #1
 800620a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620e:	d001      	beq.n	8006214 <_strtol_l.constprop.0+0xc>
 8006210:	2b24      	cmp	r3, #36	; 0x24
 8006212:	d906      	bls.n	8006222 <_strtol_l.constprop.0+0x1a>
 8006214:	f7ff ff26 	bl	8006064 <__errno>
 8006218:	2316      	movs	r3, #22
 800621a:	6003      	str	r3, [r0, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006308 <_strtol_l.constprop.0+0x100>
 8006226:	460d      	mov	r5, r1
 8006228:	462e      	mov	r6, r5
 800622a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800622e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006232:	f017 0708 	ands.w	r7, r7, #8
 8006236:	d1f7      	bne.n	8006228 <_strtol_l.constprop.0+0x20>
 8006238:	2c2d      	cmp	r4, #45	; 0x2d
 800623a:	d132      	bne.n	80062a2 <_strtol_l.constprop.0+0x9a>
 800623c:	782c      	ldrb	r4, [r5, #0]
 800623e:	2701      	movs	r7, #1
 8006240:	1cb5      	adds	r5, r6, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05b      	beq.n	80062fe <_strtol_l.constprop.0+0xf6>
 8006246:	2b10      	cmp	r3, #16
 8006248:	d109      	bne.n	800625e <_strtol_l.constprop.0+0x56>
 800624a:	2c30      	cmp	r4, #48	; 0x30
 800624c:	d107      	bne.n	800625e <_strtol_l.constprop.0+0x56>
 800624e:	782c      	ldrb	r4, [r5, #0]
 8006250:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006254:	2c58      	cmp	r4, #88	; 0x58
 8006256:	d14d      	bne.n	80062f4 <_strtol_l.constprop.0+0xec>
 8006258:	786c      	ldrb	r4, [r5, #1]
 800625a:	2310      	movs	r3, #16
 800625c:	3502      	adds	r5, #2
 800625e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006262:	f108 38ff 	add.w	r8, r8, #4294967295
 8006266:	f04f 0c00 	mov.w	ip, #0
 800626a:	fbb8 f9f3 	udiv	r9, r8, r3
 800626e:	4666      	mov	r6, ip
 8006270:	fb03 8a19 	mls	sl, r3, r9, r8
 8006274:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006278:	f1be 0f09 	cmp.w	lr, #9
 800627c:	d816      	bhi.n	80062ac <_strtol_l.constprop.0+0xa4>
 800627e:	4674      	mov	r4, lr
 8006280:	42a3      	cmp	r3, r4
 8006282:	dd24      	ble.n	80062ce <_strtol_l.constprop.0+0xc6>
 8006284:	f1bc 0f00 	cmp.w	ip, #0
 8006288:	db1e      	blt.n	80062c8 <_strtol_l.constprop.0+0xc0>
 800628a:	45b1      	cmp	r9, r6
 800628c:	d31c      	bcc.n	80062c8 <_strtol_l.constprop.0+0xc0>
 800628e:	d101      	bne.n	8006294 <_strtol_l.constprop.0+0x8c>
 8006290:	45a2      	cmp	sl, r4
 8006292:	db19      	blt.n	80062c8 <_strtol_l.constprop.0+0xc0>
 8006294:	fb06 4603 	mla	r6, r6, r3, r4
 8006298:	f04f 0c01 	mov.w	ip, #1
 800629c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062a0:	e7e8      	b.n	8006274 <_strtol_l.constprop.0+0x6c>
 80062a2:	2c2b      	cmp	r4, #43	; 0x2b
 80062a4:	bf04      	itt	eq
 80062a6:	782c      	ldrbeq	r4, [r5, #0]
 80062a8:	1cb5      	addeq	r5, r6, #2
 80062aa:	e7ca      	b.n	8006242 <_strtol_l.constprop.0+0x3a>
 80062ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80062b0:	f1be 0f19 	cmp.w	lr, #25
 80062b4:	d801      	bhi.n	80062ba <_strtol_l.constprop.0+0xb2>
 80062b6:	3c37      	subs	r4, #55	; 0x37
 80062b8:	e7e2      	b.n	8006280 <_strtol_l.constprop.0+0x78>
 80062ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80062be:	f1be 0f19 	cmp.w	lr, #25
 80062c2:	d804      	bhi.n	80062ce <_strtol_l.constprop.0+0xc6>
 80062c4:	3c57      	subs	r4, #87	; 0x57
 80062c6:	e7db      	b.n	8006280 <_strtol_l.constprop.0+0x78>
 80062c8:	f04f 3cff 	mov.w	ip, #4294967295
 80062cc:	e7e6      	b.n	800629c <_strtol_l.constprop.0+0x94>
 80062ce:	f1bc 0f00 	cmp.w	ip, #0
 80062d2:	da05      	bge.n	80062e0 <_strtol_l.constprop.0+0xd8>
 80062d4:	2322      	movs	r3, #34	; 0x22
 80062d6:	6003      	str	r3, [r0, #0]
 80062d8:	4646      	mov	r6, r8
 80062da:	b942      	cbnz	r2, 80062ee <_strtol_l.constprop.0+0xe6>
 80062dc:	4630      	mov	r0, r6
 80062de:	e79e      	b.n	800621e <_strtol_l.constprop.0+0x16>
 80062e0:	b107      	cbz	r7, 80062e4 <_strtol_l.constprop.0+0xdc>
 80062e2:	4276      	negs	r6, r6
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d0f9      	beq.n	80062dc <_strtol_l.constprop.0+0xd4>
 80062e8:	f1bc 0f00 	cmp.w	ip, #0
 80062ec:	d000      	beq.n	80062f0 <_strtol_l.constprop.0+0xe8>
 80062ee:	1e69      	subs	r1, r5, #1
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	e7f3      	b.n	80062dc <_strtol_l.constprop.0+0xd4>
 80062f4:	2430      	movs	r4, #48	; 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1b1      	bne.n	800625e <_strtol_l.constprop.0+0x56>
 80062fa:	2308      	movs	r3, #8
 80062fc:	e7af      	b.n	800625e <_strtol_l.constprop.0+0x56>
 80062fe:	2c30      	cmp	r4, #48	; 0x30
 8006300:	d0a5      	beq.n	800624e <_strtol_l.constprop.0+0x46>
 8006302:	230a      	movs	r3, #10
 8006304:	e7ab      	b.n	800625e <_strtol_l.constprop.0+0x56>
 8006306:	bf00      	nop
 8006308:	08007b25 	.word	0x08007b25

0800630c <strtol>:
 800630c:	4613      	mov	r3, r2
 800630e:	460a      	mov	r2, r1
 8006310:	4601      	mov	r1, r0
 8006312:	4802      	ldr	r0, [pc, #8]	; (800631c <strtol+0x10>)
 8006314:	6800      	ldr	r0, [r0, #0]
 8006316:	f7ff bf77 	b.w	8006208 <_strtol_l.constprop.0>
 800631a:	bf00      	nop
 800631c:	2000009c 	.word	0x2000009c

08006320 <__assert_func>:
 8006320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006322:	4614      	mov	r4, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <__assert_func+0x2c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	68d8      	ldr	r0, [r3, #12]
 800632e:	b14c      	cbz	r4, 8006344 <__assert_func+0x24>
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <__assert_func+0x30>)
 8006332:	9100      	str	r1, [sp, #0]
 8006334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006338:	4906      	ldr	r1, [pc, #24]	; (8006354 <__assert_func+0x34>)
 800633a:	462b      	mov	r3, r5
 800633c:	f000 f80e 	bl	800635c <fiprintf>
 8006340:	f000 fe20 	bl	8006f84 <abort>
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <__assert_func+0x38>)
 8006346:	461c      	mov	r4, r3
 8006348:	e7f3      	b.n	8006332 <__assert_func+0x12>
 800634a:	bf00      	nop
 800634c:	2000009c 	.word	0x2000009c
 8006350:	08007ae8 	.word	0x08007ae8
 8006354:	08007af5 	.word	0x08007af5
 8006358:	08007b23 	.word	0x08007b23

0800635c <fiprintf>:
 800635c:	b40e      	push	{r1, r2, r3}
 800635e:	b503      	push	{r0, r1, lr}
 8006360:	4601      	mov	r1, r0
 8006362:	ab03      	add	r3, sp, #12
 8006364:	4805      	ldr	r0, [pc, #20]	; (800637c <fiprintf+0x20>)
 8006366:	f853 2b04 	ldr.w	r2, [r3], #4
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f000 fa75 	bl	800685c <_vfiprintf_r>
 8006372:	b002      	add	sp, #8
 8006374:	f85d eb04 	ldr.w	lr, [sp], #4
 8006378:	b003      	add	sp, #12
 800637a:	4770      	bx	lr
 800637c:	2000009c 	.word	0x2000009c

08006380 <malloc>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <malloc+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f000 b86f 	b.w	8006468 <_malloc_r>
 800638a:	bf00      	nop
 800638c:	2000009c 	.word	0x2000009c

08006390 <_free_r>:
 8006390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006392:	2900      	cmp	r1, #0
 8006394:	d044      	beq.n	8006420 <_free_r+0x90>
 8006396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639a:	9001      	str	r0, [sp, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f1a1 0404 	sub.w	r4, r1, #4
 80063a2:	bfb8      	it	lt
 80063a4:	18e4      	addlt	r4, r4, r3
 80063a6:	f001 f82f 	bl	8007408 <__malloc_lock>
 80063aa:	4a1e      	ldr	r2, [pc, #120]	; (8006424 <_free_r+0x94>)
 80063ac:	9801      	ldr	r0, [sp, #4]
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	b933      	cbnz	r3, 80063c0 <_free_r+0x30>
 80063b2:	6063      	str	r3, [r4, #4]
 80063b4:	6014      	str	r4, [r2, #0]
 80063b6:	b003      	add	sp, #12
 80063b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063bc:	f001 b82a 	b.w	8007414 <__malloc_unlock>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d908      	bls.n	80063d6 <_free_r+0x46>
 80063c4:	6825      	ldr	r5, [r4, #0]
 80063c6:	1961      	adds	r1, r4, r5
 80063c8:	428b      	cmp	r3, r1
 80063ca:	bf01      	itttt	eq
 80063cc:	6819      	ldreq	r1, [r3, #0]
 80063ce:	685b      	ldreq	r3, [r3, #4]
 80063d0:	1949      	addeq	r1, r1, r5
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	e7ed      	b.n	80063b2 <_free_r+0x22>
 80063d6:	461a      	mov	r2, r3
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b10b      	cbz	r3, 80063e0 <_free_r+0x50>
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d9fa      	bls.n	80063d6 <_free_r+0x46>
 80063e0:	6811      	ldr	r1, [r2, #0]
 80063e2:	1855      	adds	r5, r2, r1
 80063e4:	42a5      	cmp	r5, r4
 80063e6:	d10b      	bne.n	8006400 <_free_r+0x70>
 80063e8:	6824      	ldr	r4, [r4, #0]
 80063ea:	4421      	add	r1, r4
 80063ec:	1854      	adds	r4, r2, r1
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	d1e0      	bne.n	80063b6 <_free_r+0x26>
 80063f4:	681c      	ldr	r4, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	6053      	str	r3, [r2, #4]
 80063fa:	4421      	add	r1, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	e7da      	b.n	80063b6 <_free_r+0x26>
 8006400:	d902      	bls.n	8006408 <_free_r+0x78>
 8006402:	230c      	movs	r3, #12
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	e7d6      	b.n	80063b6 <_free_r+0x26>
 8006408:	6825      	ldr	r5, [r4, #0]
 800640a:	1961      	adds	r1, r4, r5
 800640c:	428b      	cmp	r3, r1
 800640e:	bf04      	itt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	bf04      	itt	eq
 8006418:	1949      	addeq	r1, r1, r5
 800641a:	6021      	streq	r1, [r4, #0]
 800641c:	6054      	str	r4, [r2, #4]
 800641e:	e7ca      	b.n	80063b6 <_free_r+0x26>
 8006420:	b003      	add	sp, #12
 8006422:	bd30      	pop	{r4, r5, pc}
 8006424:	20000534 	.word	0x20000534

08006428 <sbrk_aligned>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4e0e      	ldr	r6, [pc, #56]	; (8006464 <sbrk_aligned+0x3c>)
 800642c:	460c      	mov	r4, r1
 800642e:	6831      	ldr	r1, [r6, #0]
 8006430:	4605      	mov	r5, r0
 8006432:	b911      	cbnz	r1, 800643a <sbrk_aligned+0x12>
 8006434:	f000 fcd6 	bl	8006de4 <_sbrk_r>
 8006438:	6030      	str	r0, [r6, #0]
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 fcd1 	bl	8006de4 <_sbrk_r>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d00a      	beq.n	800645c <sbrk_aligned+0x34>
 8006446:	1cc4      	adds	r4, r0, #3
 8006448:	f024 0403 	bic.w	r4, r4, #3
 800644c:	42a0      	cmp	r0, r4
 800644e:	d007      	beq.n	8006460 <sbrk_aligned+0x38>
 8006450:	1a21      	subs	r1, r4, r0
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fcc6 	bl	8006de4 <_sbrk_r>
 8006458:	3001      	adds	r0, #1
 800645a:	d101      	bne.n	8006460 <sbrk_aligned+0x38>
 800645c:	f04f 34ff 	mov.w	r4, #4294967295
 8006460:	4620      	mov	r0, r4
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	20000538 	.word	0x20000538

08006468 <_malloc_r>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	1ccd      	adds	r5, r1, #3
 800646e:	f025 0503 	bic.w	r5, r5, #3
 8006472:	3508      	adds	r5, #8
 8006474:	2d0c      	cmp	r5, #12
 8006476:	bf38      	it	cc
 8006478:	250c      	movcc	r5, #12
 800647a:	2d00      	cmp	r5, #0
 800647c:	4607      	mov	r7, r0
 800647e:	db01      	blt.n	8006484 <_malloc_r+0x1c>
 8006480:	42a9      	cmp	r1, r5
 8006482:	d905      	bls.n	8006490 <_malloc_r+0x28>
 8006484:	230c      	movs	r3, #12
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	2600      	movs	r6, #0
 800648a:	4630      	mov	r0, r6
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006490:	4e2e      	ldr	r6, [pc, #184]	; (800654c <_malloc_r+0xe4>)
 8006492:	f000 ffb9 	bl	8007408 <__malloc_lock>
 8006496:	6833      	ldr	r3, [r6, #0]
 8006498:	461c      	mov	r4, r3
 800649a:	bb34      	cbnz	r4, 80064ea <_malloc_r+0x82>
 800649c:	4629      	mov	r1, r5
 800649e:	4638      	mov	r0, r7
 80064a0:	f7ff ffc2 	bl	8006428 <sbrk_aligned>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	4604      	mov	r4, r0
 80064a8:	d14d      	bne.n	8006546 <_malloc_r+0xde>
 80064aa:	6834      	ldr	r4, [r6, #0]
 80064ac:	4626      	mov	r6, r4
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d140      	bne.n	8006534 <_malloc_r+0xcc>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	4631      	mov	r1, r6
 80064b6:	4638      	mov	r0, r7
 80064b8:	eb04 0803 	add.w	r8, r4, r3
 80064bc:	f000 fc92 	bl	8006de4 <_sbrk_r>
 80064c0:	4580      	cmp	r8, r0
 80064c2:	d13a      	bne.n	800653a <_malloc_r+0xd2>
 80064c4:	6821      	ldr	r1, [r4, #0]
 80064c6:	3503      	adds	r5, #3
 80064c8:	1a6d      	subs	r5, r5, r1
 80064ca:	f025 0503 	bic.w	r5, r5, #3
 80064ce:	3508      	adds	r5, #8
 80064d0:	2d0c      	cmp	r5, #12
 80064d2:	bf38      	it	cc
 80064d4:	250c      	movcc	r5, #12
 80064d6:	4629      	mov	r1, r5
 80064d8:	4638      	mov	r0, r7
 80064da:	f7ff ffa5 	bl	8006428 <sbrk_aligned>
 80064de:	3001      	adds	r0, #1
 80064e0:	d02b      	beq.n	800653a <_malloc_r+0xd2>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	442b      	add	r3, r5
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	e00e      	b.n	8006508 <_malloc_r+0xa0>
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	1b52      	subs	r2, r2, r5
 80064ee:	d41e      	bmi.n	800652e <_malloc_r+0xc6>
 80064f0:	2a0b      	cmp	r2, #11
 80064f2:	d916      	bls.n	8006522 <_malloc_r+0xba>
 80064f4:	1961      	adds	r1, r4, r5
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	6025      	str	r5, [r4, #0]
 80064fa:	bf18      	it	ne
 80064fc:	6059      	strne	r1, [r3, #4]
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	bf08      	it	eq
 8006502:	6031      	streq	r1, [r6, #0]
 8006504:	5162      	str	r2, [r4, r5]
 8006506:	604b      	str	r3, [r1, #4]
 8006508:	4638      	mov	r0, r7
 800650a:	f104 060b 	add.w	r6, r4, #11
 800650e:	f000 ff81 	bl	8007414 <__malloc_unlock>
 8006512:	f026 0607 	bic.w	r6, r6, #7
 8006516:	1d23      	adds	r3, r4, #4
 8006518:	1af2      	subs	r2, r6, r3
 800651a:	d0b6      	beq.n	800648a <_malloc_r+0x22>
 800651c:	1b9b      	subs	r3, r3, r6
 800651e:	50a3      	str	r3, [r4, r2]
 8006520:	e7b3      	b.n	800648a <_malloc_r+0x22>
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	42a3      	cmp	r3, r4
 8006526:	bf0c      	ite	eq
 8006528:	6032      	streq	r2, [r6, #0]
 800652a:	605a      	strne	r2, [r3, #4]
 800652c:	e7ec      	b.n	8006508 <_malloc_r+0xa0>
 800652e:	4623      	mov	r3, r4
 8006530:	6864      	ldr	r4, [r4, #4]
 8006532:	e7b2      	b.n	800649a <_malloc_r+0x32>
 8006534:	4634      	mov	r4, r6
 8006536:	6876      	ldr	r6, [r6, #4]
 8006538:	e7b9      	b.n	80064ae <_malloc_r+0x46>
 800653a:	230c      	movs	r3, #12
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	4638      	mov	r0, r7
 8006540:	f000 ff68 	bl	8007414 <__malloc_unlock>
 8006544:	e7a1      	b.n	800648a <_malloc_r+0x22>
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	e7de      	b.n	8006508 <_malloc_r+0xa0>
 800654a:	bf00      	nop
 800654c:	20000534 	.word	0x20000534

08006550 <__ssputs_r>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	688e      	ldr	r6, [r1, #8]
 8006556:	429e      	cmp	r6, r3
 8006558:	4682      	mov	sl, r0
 800655a:	460c      	mov	r4, r1
 800655c:	4690      	mov	r8, r2
 800655e:	461f      	mov	r7, r3
 8006560:	d838      	bhi.n	80065d4 <__ssputs_r+0x84>
 8006562:	898a      	ldrh	r2, [r1, #12]
 8006564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006568:	d032      	beq.n	80065d0 <__ssputs_r+0x80>
 800656a:	6825      	ldr	r5, [r4, #0]
 800656c:	6909      	ldr	r1, [r1, #16]
 800656e:	eba5 0901 	sub.w	r9, r5, r1
 8006572:	6965      	ldr	r5, [r4, #20]
 8006574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800657c:	3301      	adds	r3, #1
 800657e:	444b      	add	r3, r9
 8006580:	106d      	asrs	r5, r5, #1
 8006582:	429d      	cmp	r5, r3
 8006584:	bf38      	it	cc
 8006586:	461d      	movcc	r5, r3
 8006588:	0553      	lsls	r3, r2, #21
 800658a:	d531      	bpl.n	80065f0 <__ssputs_r+0xa0>
 800658c:	4629      	mov	r1, r5
 800658e:	f7ff ff6b 	bl	8006468 <_malloc_r>
 8006592:	4606      	mov	r6, r0
 8006594:	b950      	cbnz	r0, 80065ac <__ssputs_r+0x5c>
 8006596:	230c      	movs	r3, #12
 8006598:	f8ca 3000 	str.w	r3, [sl]
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	6921      	ldr	r1, [r4, #16]
 80065ae:	464a      	mov	r2, r9
 80065b0:	f7ff fd82 	bl	80060b8 <memcpy>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	6126      	str	r6, [r4, #16]
 80065c2:	6165      	str	r5, [r4, #20]
 80065c4:	444e      	add	r6, r9
 80065c6:	eba5 0509 	sub.w	r5, r5, r9
 80065ca:	6026      	str	r6, [r4, #0]
 80065cc:	60a5      	str	r5, [r4, #8]
 80065ce:	463e      	mov	r6, r7
 80065d0:	42be      	cmp	r6, r7
 80065d2:	d900      	bls.n	80065d6 <__ssputs_r+0x86>
 80065d4:	463e      	mov	r6, r7
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	4632      	mov	r2, r6
 80065da:	4641      	mov	r1, r8
 80065dc:	f000 fefa 	bl	80073d4 <memmove>
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	1b9b      	subs	r3, r3, r6
 80065e4:	60a3      	str	r3, [r4, #8]
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	4433      	add	r3, r6
 80065ea:	6023      	str	r3, [r4, #0]
 80065ec:	2000      	movs	r0, #0
 80065ee:	e7db      	b.n	80065a8 <__ssputs_r+0x58>
 80065f0:	462a      	mov	r2, r5
 80065f2:	f000 ff15 	bl	8007420 <_realloc_r>
 80065f6:	4606      	mov	r6, r0
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1e1      	bne.n	80065c0 <__ssputs_r+0x70>
 80065fc:	6921      	ldr	r1, [r4, #16]
 80065fe:	4650      	mov	r0, sl
 8006600:	f7ff fec6 	bl	8006390 <_free_r>
 8006604:	e7c7      	b.n	8006596 <__ssputs_r+0x46>
	...

08006608 <_svfiprintf_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4698      	mov	r8, r3
 800660e:	898b      	ldrh	r3, [r1, #12]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	b09d      	sub	sp, #116	; 0x74
 8006614:	4607      	mov	r7, r0
 8006616:	460d      	mov	r5, r1
 8006618:	4614      	mov	r4, r2
 800661a:	d50e      	bpl.n	800663a <_svfiprintf_r+0x32>
 800661c:	690b      	ldr	r3, [r1, #16]
 800661e:	b963      	cbnz	r3, 800663a <_svfiprintf_r+0x32>
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	f7ff ff21 	bl	8006468 <_malloc_r>
 8006626:	6028      	str	r0, [r5, #0]
 8006628:	6128      	str	r0, [r5, #16]
 800662a:	b920      	cbnz	r0, 8006636 <_svfiprintf_r+0x2e>
 800662c:	230c      	movs	r3, #12
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e0d1      	b.n	80067da <_svfiprintf_r+0x1d2>
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	616b      	str	r3, [r5, #20]
 800663a:	2300      	movs	r3, #0
 800663c:	9309      	str	r3, [sp, #36]	; 0x24
 800663e:	2320      	movs	r3, #32
 8006640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006644:	f8cd 800c 	str.w	r8, [sp, #12]
 8006648:	2330      	movs	r3, #48	; 0x30
 800664a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067f4 <_svfiprintf_r+0x1ec>
 800664e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006652:	f04f 0901 	mov.w	r9, #1
 8006656:	4623      	mov	r3, r4
 8006658:	469a      	mov	sl, r3
 800665a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665e:	b10a      	cbz	r2, 8006664 <_svfiprintf_r+0x5c>
 8006660:	2a25      	cmp	r2, #37	; 0x25
 8006662:	d1f9      	bne.n	8006658 <_svfiprintf_r+0x50>
 8006664:	ebba 0b04 	subs.w	fp, sl, r4
 8006668:	d00b      	beq.n	8006682 <_svfiprintf_r+0x7a>
 800666a:	465b      	mov	r3, fp
 800666c:	4622      	mov	r2, r4
 800666e:	4629      	mov	r1, r5
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff ff6d 	bl	8006550 <__ssputs_r>
 8006676:	3001      	adds	r0, #1
 8006678:	f000 80aa 	beq.w	80067d0 <_svfiprintf_r+0x1c8>
 800667c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667e:	445a      	add	r2, fp
 8006680:	9209      	str	r2, [sp, #36]	; 0x24
 8006682:	f89a 3000 	ldrb.w	r3, [sl]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80a2 	beq.w	80067d0 <_svfiprintf_r+0x1c8>
 800668c:	2300      	movs	r3, #0
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006696:	f10a 0a01 	add.w	sl, sl, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	9307      	str	r3, [sp, #28]
 800669e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a2:	931a      	str	r3, [sp, #104]	; 0x68
 80066a4:	4654      	mov	r4, sl
 80066a6:	2205      	movs	r2, #5
 80066a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ac:	4851      	ldr	r0, [pc, #324]	; (80067f4 <_svfiprintf_r+0x1ec>)
 80066ae:	f7f9 fd97 	bl	80001e0 <memchr>
 80066b2:	9a04      	ldr	r2, [sp, #16]
 80066b4:	b9d8      	cbnz	r0, 80066ee <_svfiprintf_r+0xe6>
 80066b6:	06d0      	lsls	r0, r2, #27
 80066b8:	bf44      	itt	mi
 80066ba:	2320      	movmi	r3, #32
 80066bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c0:	0711      	lsls	r1, r2, #28
 80066c2:	bf44      	itt	mi
 80066c4:	232b      	movmi	r3, #43	; 0x2b
 80066c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ca:	f89a 3000 	ldrb.w	r3, [sl]
 80066ce:	2b2a      	cmp	r3, #42	; 0x2a
 80066d0:	d015      	beq.n	80066fe <_svfiprintf_r+0xf6>
 80066d2:	9a07      	ldr	r2, [sp, #28]
 80066d4:	4654      	mov	r4, sl
 80066d6:	2000      	movs	r0, #0
 80066d8:	f04f 0c0a 	mov.w	ip, #10
 80066dc:	4621      	mov	r1, r4
 80066de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e2:	3b30      	subs	r3, #48	; 0x30
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	d94e      	bls.n	8006786 <_svfiprintf_r+0x17e>
 80066e8:	b1b0      	cbz	r0, 8006718 <_svfiprintf_r+0x110>
 80066ea:	9207      	str	r2, [sp, #28]
 80066ec:	e014      	b.n	8006718 <_svfiprintf_r+0x110>
 80066ee:	eba0 0308 	sub.w	r3, r0, r8
 80066f2:	fa09 f303 	lsl.w	r3, r9, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	46a2      	mov	sl, r4
 80066fc:	e7d2      	b.n	80066a4 <_svfiprintf_r+0x9c>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	1d19      	adds	r1, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9103      	str	r1, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfbb      	ittet	lt
 800670a:	425b      	neglt	r3, r3
 800670c:	f042 0202 	orrlt.w	r2, r2, #2
 8006710:	9307      	strge	r3, [sp, #28]
 8006712:	9307      	strlt	r3, [sp, #28]
 8006714:	bfb8      	it	lt
 8006716:	9204      	strlt	r2, [sp, #16]
 8006718:	7823      	ldrb	r3, [r4, #0]
 800671a:	2b2e      	cmp	r3, #46	; 0x2e
 800671c:	d10c      	bne.n	8006738 <_svfiprintf_r+0x130>
 800671e:	7863      	ldrb	r3, [r4, #1]
 8006720:	2b2a      	cmp	r3, #42	; 0x2a
 8006722:	d135      	bne.n	8006790 <_svfiprintf_r+0x188>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	9203      	str	r2, [sp, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfb8      	it	lt
 8006730:	f04f 33ff 	movlt.w	r3, #4294967295
 8006734:	3402      	adds	r4, #2
 8006736:	9305      	str	r3, [sp, #20]
 8006738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006804 <_svfiprintf_r+0x1fc>
 800673c:	7821      	ldrb	r1, [r4, #0]
 800673e:	2203      	movs	r2, #3
 8006740:	4650      	mov	r0, sl
 8006742:	f7f9 fd4d 	bl	80001e0 <memchr>
 8006746:	b140      	cbz	r0, 800675a <_svfiprintf_r+0x152>
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	eba0 000a 	sub.w	r0, r0, sl
 800674e:	fa03 f000 	lsl.w	r0, r3, r0
 8006752:	9b04      	ldr	r3, [sp, #16]
 8006754:	4303      	orrs	r3, r0
 8006756:	3401      	adds	r4, #1
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675e:	4826      	ldr	r0, [pc, #152]	; (80067f8 <_svfiprintf_r+0x1f0>)
 8006760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006764:	2206      	movs	r2, #6
 8006766:	f7f9 fd3b 	bl	80001e0 <memchr>
 800676a:	2800      	cmp	r0, #0
 800676c:	d038      	beq.n	80067e0 <_svfiprintf_r+0x1d8>
 800676e:	4b23      	ldr	r3, [pc, #140]	; (80067fc <_svfiprintf_r+0x1f4>)
 8006770:	bb1b      	cbnz	r3, 80067ba <_svfiprintf_r+0x1b2>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	3307      	adds	r3, #7
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	3308      	adds	r3, #8
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	4433      	add	r3, r6
 8006782:	9309      	str	r3, [sp, #36]	; 0x24
 8006784:	e767      	b.n	8006656 <_svfiprintf_r+0x4e>
 8006786:	fb0c 3202 	mla	r2, ip, r2, r3
 800678a:	460c      	mov	r4, r1
 800678c:	2001      	movs	r0, #1
 800678e:	e7a5      	b.n	80066dc <_svfiprintf_r+0xd4>
 8006790:	2300      	movs	r3, #0
 8006792:	3401      	adds	r4, #1
 8006794:	9305      	str	r3, [sp, #20]
 8006796:	4619      	mov	r1, r3
 8006798:	f04f 0c0a 	mov.w	ip, #10
 800679c:	4620      	mov	r0, r4
 800679e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a2:	3a30      	subs	r2, #48	; 0x30
 80067a4:	2a09      	cmp	r2, #9
 80067a6:	d903      	bls.n	80067b0 <_svfiprintf_r+0x1a8>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0c5      	beq.n	8006738 <_svfiprintf_r+0x130>
 80067ac:	9105      	str	r1, [sp, #20]
 80067ae:	e7c3      	b.n	8006738 <_svfiprintf_r+0x130>
 80067b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b4:	4604      	mov	r4, r0
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7f0      	b.n	800679c <_svfiprintf_r+0x194>
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <_svfiprintf_r+0x1f8>)
 80067c2:	a904      	add	r1, sp, #16
 80067c4:	4638      	mov	r0, r7
 80067c6:	f3af 8000 	nop.w
 80067ca:	1c42      	adds	r2, r0, #1
 80067cc:	4606      	mov	r6, r0
 80067ce:	d1d6      	bne.n	800677e <_svfiprintf_r+0x176>
 80067d0:	89ab      	ldrh	r3, [r5, #12]
 80067d2:	065b      	lsls	r3, r3, #25
 80067d4:	f53f af2c 	bmi.w	8006630 <_svfiprintf_r+0x28>
 80067d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067da:	b01d      	add	sp, #116	; 0x74
 80067dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e0:	ab03      	add	r3, sp, #12
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <_svfiprintf_r+0x1f8>)
 80067e8:	a904      	add	r1, sp, #16
 80067ea:	4638      	mov	r0, r7
 80067ec:	f000 f9d4 	bl	8006b98 <_printf_i>
 80067f0:	e7eb      	b.n	80067ca <_svfiprintf_r+0x1c2>
 80067f2:	bf00      	nop
 80067f4:	08007c25 	.word	0x08007c25
 80067f8:	08007c2f 	.word	0x08007c2f
 80067fc:	00000000 	.word	0x00000000
 8006800:	08006551 	.word	0x08006551
 8006804:	08007c2b 	.word	0x08007c2b

08006808 <__sfputc_r>:
 8006808:	6893      	ldr	r3, [r2, #8]
 800680a:	3b01      	subs	r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	b410      	push	{r4}
 8006810:	6093      	str	r3, [r2, #8]
 8006812:	da08      	bge.n	8006826 <__sfputc_r+0x1e>
 8006814:	6994      	ldr	r4, [r2, #24]
 8006816:	42a3      	cmp	r3, r4
 8006818:	db01      	blt.n	800681e <__sfputc_r+0x16>
 800681a:	290a      	cmp	r1, #10
 800681c:	d103      	bne.n	8006826 <__sfputc_r+0x1e>
 800681e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006822:	f000 baef 	b.w	8006e04 <__swbuf_r>
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	1c58      	adds	r0, r3, #1
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	7019      	strb	r1, [r3, #0]
 800682e:	4608      	mov	r0, r1
 8006830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006834:	4770      	bx	lr

08006836 <__sfputs_r>:
 8006836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006838:	4606      	mov	r6, r0
 800683a:	460f      	mov	r7, r1
 800683c:	4614      	mov	r4, r2
 800683e:	18d5      	adds	r5, r2, r3
 8006840:	42ac      	cmp	r4, r5
 8006842:	d101      	bne.n	8006848 <__sfputs_r+0x12>
 8006844:	2000      	movs	r0, #0
 8006846:	e007      	b.n	8006858 <__sfputs_r+0x22>
 8006848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684c:	463a      	mov	r2, r7
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff ffda 	bl	8006808 <__sfputc_r>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d1f3      	bne.n	8006840 <__sfputs_r+0xa>
 8006858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800685c <_vfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460d      	mov	r5, r1
 8006862:	b09d      	sub	sp, #116	; 0x74
 8006864:	4614      	mov	r4, r2
 8006866:	4698      	mov	r8, r3
 8006868:	4606      	mov	r6, r0
 800686a:	b118      	cbz	r0, 8006874 <_vfiprintf_r+0x18>
 800686c:	6983      	ldr	r3, [r0, #24]
 800686e:	b90b      	cbnz	r3, 8006874 <_vfiprintf_r+0x18>
 8006870:	f000 fcaa 	bl	80071c8 <__sinit>
 8006874:	4b89      	ldr	r3, [pc, #548]	; (8006a9c <_vfiprintf_r+0x240>)
 8006876:	429d      	cmp	r5, r3
 8006878:	d11b      	bne.n	80068b2 <_vfiprintf_r+0x56>
 800687a:	6875      	ldr	r5, [r6, #4]
 800687c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687e:	07d9      	lsls	r1, r3, #31
 8006880:	d405      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	059a      	lsls	r2, r3, #22
 8006886:	d402      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688a:	f000 fd3b 	bl	8007304 <__retarget_lock_acquire_recursive>
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	d501      	bpl.n	8006898 <_vfiprintf_r+0x3c>
 8006894:	692b      	ldr	r3, [r5, #16]
 8006896:	b9eb      	cbnz	r3, 80068d4 <_vfiprintf_r+0x78>
 8006898:	4629      	mov	r1, r5
 800689a:	4630      	mov	r0, r6
 800689c:	f000 fb04 	bl	8006ea8 <__swsetup_r>
 80068a0:	b1c0      	cbz	r0, 80068d4 <_vfiprintf_r+0x78>
 80068a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a4:	07dc      	lsls	r4, r3, #31
 80068a6:	d50e      	bpl.n	80068c6 <_vfiprintf_r+0x6a>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b01d      	add	sp, #116	; 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <_vfiprintf_r+0x244>)
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d101      	bne.n	80068bc <_vfiprintf_r+0x60>
 80068b8:	68b5      	ldr	r5, [r6, #8]
 80068ba:	e7df      	b.n	800687c <_vfiprintf_r+0x20>
 80068bc:	4b79      	ldr	r3, [pc, #484]	; (8006aa4 <_vfiprintf_r+0x248>)
 80068be:	429d      	cmp	r5, r3
 80068c0:	bf08      	it	eq
 80068c2:	68f5      	ldreq	r5, [r6, #12]
 80068c4:	e7da      	b.n	800687c <_vfiprintf_r+0x20>
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	0598      	lsls	r0, r3, #22
 80068ca:	d4ed      	bmi.n	80068a8 <_vfiprintf_r+0x4c>
 80068cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ce:	f000 fd1a 	bl	8007306 <__retarget_lock_release_recursive>
 80068d2:	e7e9      	b.n	80068a8 <_vfiprintf_r+0x4c>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	; 0x24
 80068d8:	2320      	movs	r3, #32
 80068da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	2330      	movs	r3, #48	; 0x30
 80068e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006aa8 <_vfiprintf_r+0x24c>
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	469a      	mov	sl, r3
 80068f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f8:	b10a      	cbz	r2, 80068fe <_vfiprintf_r+0xa2>
 80068fa:	2a25      	cmp	r2, #37	; 0x25
 80068fc:	d1f9      	bne.n	80068f2 <_vfiprintf_r+0x96>
 80068fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0xc0>
 8006904:	465b      	mov	r3, fp
 8006906:	4622      	mov	r2, r4
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ff93 	bl	8006836 <__sfputs_r>
 8006910:	3001      	adds	r0, #1
 8006912:	f000 80aa 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006918:	445a      	add	r2, fp
 800691a:	9209      	str	r2, [sp, #36]	; 0x24
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80a2 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006926:	2300      	movs	r3, #0
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006930:	f10a 0a01 	add.w	sl, sl, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693c:	931a      	str	r3, [sp, #104]	; 0x68
 800693e:	4654      	mov	r4, sl
 8006940:	2205      	movs	r2, #5
 8006942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006946:	4858      	ldr	r0, [pc, #352]	; (8006aa8 <_vfiprintf_r+0x24c>)
 8006948:	f7f9 fc4a 	bl	80001e0 <memchr>
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	b9d8      	cbnz	r0, 8006988 <_vfiprintf_r+0x12c>
 8006950:	06d1      	lsls	r1, r2, #27
 8006952:	bf44      	itt	mi
 8006954:	2320      	movmi	r3, #32
 8006956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695a:	0713      	lsls	r3, r2, #28
 800695c:	bf44      	itt	mi
 800695e:	232b      	movmi	r3, #43	; 0x2b
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d015      	beq.n	8006998 <_vfiprintf_r+0x13c>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	4654      	mov	r4, sl
 8006970:	2000      	movs	r0, #0
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4621      	mov	r1, r4
 8006978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697c:	3b30      	subs	r3, #48	; 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d94e      	bls.n	8006a20 <_vfiprintf_r+0x1c4>
 8006982:	b1b0      	cbz	r0, 80069b2 <_vfiprintf_r+0x156>
 8006984:	9207      	str	r2, [sp, #28]
 8006986:	e014      	b.n	80069b2 <_vfiprintf_r+0x156>
 8006988:	eba0 0308 	sub.w	r3, r0, r8
 800698c:	fa09 f303 	lsl.w	r3, r9, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	46a2      	mov	sl, r4
 8006996:	e7d2      	b.n	800693e <_vfiprintf_r+0xe2>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	f042 0202 	orrlt.w	r2, r2, #2
 80069aa:	9307      	strge	r3, [sp, #28]
 80069ac:	9307      	strlt	r3, [sp, #28]
 80069ae:	bfb8      	it	lt
 80069b0:	9204      	strlt	r2, [sp, #16]
 80069b2:	7823      	ldrb	r3, [r4, #0]
 80069b4:	2b2e      	cmp	r3, #46	; 0x2e
 80069b6:	d10c      	bne.n	80069d2 <_vfiprintf_r+0x176>
 80069b8:	7863      	ldrb	r3, [r4, #1]
 80069ba:	2b2a      	cmp	r3, #42	; 0x2a
 80069bc:	d135      	bne.n	8006a2a <_vfiprintf_r+0x1ce>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	9203      	str	r2, [sp, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfb8      	it	lt
 80069ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ce:	3402      	adds	r4, #2
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ab8 <_vfiprintf_r+0x25c>
 80069d6:	7821      	ldrb	r1, [r4, #0]
 80069d8:	2203      	movs	r2, #3
 80069da:	4650      	mov	r0, sl
 80069dc:	f7f9 fc00 	bl	80001e0 <memchr>
 80069e0:	b140      	cbz	r0, 80069f4 <_vfiprintf_r+0x198>
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	eba0 000a 	sub.w	r0, r0, sl
 80069e8:	fa03 f000 	lsl.w	r0, r3, r0
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	4303      	orrs	r3, r0
 80069f0:	3401      	adds	r4, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	482c      	ldr	r0, [pc, #176]	; (8006aac <_vfiprintf_r+0x250>)
 80069fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069fe:	2206      	movs	r2, #6
 8006a00:	f7f9 fbee 	bl	80001e0 <memchr>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d03f      	beq.n	8006a88 <_vfiprintf_r+0x22c>
 8006a08:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <_vfiprintf_r+0x254>)
 8006a0a:	bb1b      	cbnz	r3, 8006a54 <_vfiprintf_r+0x1f8>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	3308      	adds	r3, #8
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	443b      	add	r3, r7
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	e767      	b.n	80068f0 <_vfiprintf_r+0x94>
 8006a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a24:	460c      	mov	r4, r1
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7a5      	b.n	8006976 <_vfiprintf_r+0x11a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	3401      	adds	r4, #1
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f04f 0c0a 	mov.w	ip, #10
 8006a36:	4620      	mov	r0, r4
 8006a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3c:	3a30      	subs	r2, #48	; 0x30
 8006a3e:	2a09      	cmp	r2, #9
 8006a40:	d903      	bls.n	8006a4a <_vfiprintf_r+0x1ee>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c5      	beq.n	80069d2 <_vfiprintf_r+0x176>
 8006a46:	9105      	str	r1, [sp, #20]
 8006a48:	e7c3      	b.n	80069d2 <_vfiprintf_r+0x176>
 8006a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4e:	4604      	mov	r4, r0
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f0      	b.n	8006a36 <_vfiprintf_r+0x1da>
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f3af 8000 	nop.w
 8006a64:	4607      	mov	r7, r0
 8006a66:	1c78      	adds	r0, r7, #1
 8006a68:	d1d6      	bne.n	8006a18 <_vfiprintf_r+0x1bc>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07d9      	lsls	r1, r3, #31
 8006a6e:	d405      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a70:	89ab      	ldrh	r3, [r5, #12]
 8006a72:	059a      	lsls	r2, r3, #22
 8006a74:	d402      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a78:	f000 fc45 	bl	8007306 <__retarget_lock_release_recursive>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af12 	bmi.w	80068a8 <_vfiprintf_r+0x4c>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	e711      	b.n	80068ac <_vfiprintf_r+0x50>
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4630      	mov	r0, r6
 8006a94:	f000 f880 	bl	8006b98 <_printf_i>
 8006a98:	e7e4      	b.n	8006a64 <_vfiprintf_r+0x208>
 8006a9a:	bf00      	nop
 8006a9c:	08007c78 	.word	0x08007c78
 8006aa0:	08007c98 	.word	0x08007c98
 8006aa4:	08007c58 	.word	0x08007c58
 8006aa8:	08007c25 	.word	0x08007c25
 8006aac:	08007c2f 	.word	0x08007c2f
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	08006837 	.word	0x08006837
 8006ab8:	08007c2b 	.word	0x08007c2b

08006abc <_printf_common>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	4699      	mov	r9, r3
 8006ac4:	688a      	ldr	r2, [r1, #8]
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bfb8      	it	lt
 8006ad0:	4613      	movlt	r3, r2
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad8:	4607      	mov	r7, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	b10a      	cbz	r2, 8006ae2 <_printf_common+0x26>
 8006ade:	3301      	adds	r3, #1
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0699      	lsls	r1, r3, #26
 8006ae6:	bf42      	ittt	mi
 8006ae8:	6833      	ldrmi	r3, [r6, #0]
 8006aea:	3302      	addmi	r3, #2
 8006aec:	6033      	strmi	r3, [r6, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	f015 0506 	ands.w	r5, r5, #6
 8006af4:	d106      	bne.n	8006b04 <_printf_common+0x48>
 8006af6:	f104 0a19 	add.w	sl, r4, #25
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dc26      	bgt.n	8006b52 <_printf_common+0x96>
 8006b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b08:	1e13      	subs	r3, r2, #0
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	bf18      	it	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	0692      	lsls	r2, r2, #26
 8006b12:	d42b      	bmi.n	8006b6c <_printf_common+0xb0>
 8006b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	47c0      	blx	r8
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d01e      	beq.n	8006b60 <_printf_common+0xa4>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	68e5      	ldr	r5, [r4, #12]
 8006b26:	6832      	ldr	r2, [r6, #0]
 8006b28:	f003 0306 	and.w	r3, r3, #6
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	bf08      	it	eq
 8006b30:	1aad      	subeq	r5, r5, r2
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	bf0c      	ite	eq
 8006b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b3c:	2500      	movne	r5, #0
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bfc4      	itt	gt
 8006b42:	1a9b      	subgt	r3, r3, r2
 8006b44:	18ed      	addgt	r5, r5, r3
 8006b46:	2600      	movs	r6, #0
 8006b48:	341a      	adds	r4, #26
 8006b4a:	42b5      	cmp	r5, r6
 8006b4c:	d11a      	bne.n	8006b84 <_printf_common+0xc8>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e008      	b.n	8006b64 <_printf_common+0xa8>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4652      	mov	r2, sl
 8006b56:	4649      	mov	r1, r9
 8006b58:	4638      	mov	r0, r7
 8006b5a:	47c0      	blx	r8
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d103      	bne.n	8006b68 <_printf_common+0xac>
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	3501      	adds	r5, #1
 8006b6a:	e7c6      	b.n	8006afa <_printf_common+0x3e>
 8006b6c:	18e1      	adds	r1, r4, r3
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	2030      	movs	r0, #48	; 0x30
 8006b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b76:	4422      	add	r2, r4
 8006b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b80:	3302      	adds	r3, #2
 8006b82:	e7c7      	b.n	8006b14 <_printf_common+0x58>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4622      	mov	r2, r4
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c0      	blx	r8
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d0e6      	beq.n	8006b60 <_printf_common+0xa4>
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7d9      	b.n	8006b4a <_printf_common+0x8e>
	...

08006b98 <_printf_i>:
 8006b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	7e0f      	ldrb	r7, [r1, #24]
 8006b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ba0:	2f78      	cmp	r7, #120	; 0x78
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bae:	d807      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bb0:	2f62      	cmp	r7, #98	; 0x62
 8006bb2:	d80a      	bhi.n	8006bca <_printf_i+0x32>
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	f000 80d8 	beq.w	8006d6a <_printf_i+0x1d2>
 8006bba:	2f58      	cmp	r7, #88	; 0x58
 8006bbc:	f000 80a3 	beq.w	8006d06 <_printf_i+0x16e>
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc8:	e03a      	b.n	8006c40 <_printf_i+0xa8>
 8006bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bce:	2b15      	cmp	r3, #21
 8006bd0:	d8f6      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bd2:	a101      	add	r1, pc, #4	; (adr r1, 8006bd8 <_printf_i+0x40>)
 8006bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006bc1 	.word	0x08006bc1
 8006be4:	08006bc1 	.word	0x08006bc1
 8006be8:	08006bc1 	.word	0x08006bc1
 8006bec:	08006bc1 	.word	0x08006bc1
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006bc1 	.word	0x08006bc1
 8006bf8:	08006bc1 	.word	0x08006bc1
 8006bfc:	08006bc1 	.word	0x08006bc1
 8006c00:	08006bc1 	.word	0x08006bc1
 8006c04:	08006d51 	.word	0x08006d51
 8006c08:	08006c75 	.word	0x08006c75
 8006c0c:	08006d33 	.word	0x08006d33
 8006c10:	08006bc1 	.word	0x08006bc1
 8006c14:	08006bc1 	.word	0x08006bc1
 8006c18:	08006d73 	.word	0x08006d73
 8006c1c:	08006bc1 	.word	0x08006bc1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bc1 	.word	0x08006bc1
 8006c28:	08006bc1 	.word	0x08006bc1
 8006c2c:	08006d3b 	.word	0x08006d3b
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	1d1a      	adds	r2, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	602a      	str	r2, [r5, #0]
 8006c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0a3      	b.n	8006d8c <_printf_i+0x1f4>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	6829      	ldr	r1, [r5, #0]
 8006c48:	0606      	lsls	r6, r0, #24
 8006c4a:	f101 0304 	add.w	r3, r1, #4
 8006c4e:	d50a      	bpl.n	8006c66 <_printf_i+0xce>
 8006c50:	680e      	ldr	r6, [r1, #0]
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	da03      	bge.n	8006c60 <_printf_i+0xc8>
 8006c58:	232d      	movs	r3, #45	; 0x2d
 8006c5a:	4276      	negs	r6, r6
 8006c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c60:	485e      	ldr	r0, [pc, #376]	; (8006ddc <_printf_i+0x244>)
 8006c62:	230a      	movs	r3, #10
 8006c64:	e019      	b.n	8006c9a <_printf_i+0x102>
 8006c66:	680e      	ldr	r6, [r1, #0]
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c6e:	bf18      	it	ne
 8006c70:	b236      	sxthne	r6, r6
 8006c72:	e7ef      	b.n	8006c54 <_printf_i+0xbc>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	6029      	str	r1, [r5, #0]
 8006c7c:	0601      	lsls	r1, r0, #24
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0xec>
 8006c80:	681e      	ldr	r6, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <_printf_i+0xf2>
 8006c84:	0646      	lsls	r6, r0, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0xe8>
 8006c88:	881e      	ldrh	r6, [r3, #0]
 8006c8a:	4854      	ldr	r0, [pc, #336]	; (8006ddc <_printf_i+0x244>)
 8006c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c8e:	bf0c      	ite	eq
 8006c90:	2308      	moveq	r3, #8
 8006c92:	230a      	movne	r3, #10
 8006c94:	2100      	movs	r1, #0
 8006c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c9a:	6865      	ldr	r5, [r4, #4]
 8006c9c:	60a5      	str	r5, [r4, #8]
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	bfa2      	ittt	ge
 8006ca2:	6821      	ldrge	r1, [r4, #0]
 8006ca4:	f021 0104 	bicge.w	r1, r1, #4
 8006ca8:	6021      	strge	r1, [r4, #0]
 8006caa:	b90e      	cbnz	r6, 8006cb0 <_printf_i+0x118>
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d04d      	beq.n	8006d4c <_printf_i+0x1b4>
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cba:	5dc7      	ldrb	r7, [r0, r7]
 8006cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cc0:	4637      	mov	r7, r6
 8006cc2:	42bb      	cmp	r3, r7
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	d9f4      	bls.n	8006cb2 <_printf_i+0x11a>
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d10b      	bne.n	8006ce4 <_printf_i+0x14c>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07de      	lsls	r6, r3, #31
 8006cd0:	d508      	bpl.n	8006ce4 <_printf_i+0x14c>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	bfde      	ittt	le
 8006cda:	2330      	movle	r3, #48	; 0x30
 8006cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce4:	1b52      	subs	r2, r2, r5
 8006ce6:	6122      	str	r2, [r4, #16]
 8006ce8:	f8cd a000 	str.w	sl, [sp]
 8006cec:	464b      	mov	r3, r9
 8006cee:	aa03      	add	r2, sp, #12
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7ff fee2 	bl	8006abc <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d14c      	bne.n	8006d96 <_printf_i+0x1fe>
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	b004      	add	sp, #16
 8006d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d06:	4835      	ldr	r0, [pc, #212]	; (8006ddc <_printf_i+0x244>)
 8006d08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d0c:	6829      	ldr	r1, [r5, #0]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d14:	6029      	str	r1, [r5, #0]
 8006d16:	061d      	lsls	r5, r3, #24
 8006d18:	d514      	bpl.n	8006d44 <_printf_i+0x1ac>
 8006d1a:	07df      	lsls	r7, r3, #31
 8006d1c:	bf44      	itt	mi
 8006d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d22:	6023      	strmi	r3, [r4, #0]
 8006d24:	b91e      	cbnz	r6, 8006d2e <_printf_i+0x196>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	f023 0320 	bic.w	r3, r3, #32
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	2310      	movs	r3, #16
 8006d30:	e7b0      	b.n	8006c94 <_printf_i+0xfc>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	f043 0320 	orr.w	r3, r3, #32
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	2378      	movs	r3, #120	; 0x78
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <_printf_i+0x248>)
 8006d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d42:	e7e3      	b.n	8006d0c <_printf_i+0x174>
 8006d44:	0659      	lsls	r1, r3, #25
 8006d46:	bf48      	it	mi
 8006d48:	b2b6      	uxthmi	r6, r6
 8006d4a:	e7e6      	b.n	8006d1a <_printf_i+0x182>
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	e7bb      	b.n	8006cc8 <_printf_i+0x130>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	6826      	ldr	r6, [r4, #0]
 8006d54:	6961      	ldr	r1, [r4, #20]
 8006d56:	1d18      	adds	r0, r3, #4
 8006d58:	6028      	str	r0, [r5, #0]
 8006d5a:	0635      	lsls	r5, r6, #24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	d501      	bpl.n	8006d64 <_printf_i+0x1cc>
 8006d60:	6019      	str	r1, [r3, #0]
 8006d62:	e002      	b.n	8006d6a <_printf_i+0x1d2>
 8006d64:	0670      	lsls	r0, r6, #25
 8006d66:	d5fb      	bpl.n	8006d60 <_printf_i+0x1c8>
 8006d68:	8019      	strh	r1, [r3, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	4615      	mov	r5, r2
 8006d70:	e7ba      	b.n	8006ce8 <_printf_i+0x150>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	602a      	str	r2, [r5, #0]
 8006d78:	681d      	ldr	r5, [r3, #0]
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f7f9 fa2e 	bl	80001e0 <memchr>
 8006d84:	b108      	cbz	r0, 8006d8a <_printf_i+0x1f2>
 8006d86:	1b40      	subs	r0, r0, r5
 8006d88:	6060      	str	r0, [r4, #4]
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d94:	e7a8      	b.n	8006ce8 <_printf_i+0x150>
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	462a      	mov	r2, r5
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	47d0      	blx	sl
 8006da0:	3001      	adds	r0, #1
 8006da2:	d0ab      	beq.n	8006cfc <_printf_i+0x164>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	079b      	lsls	r3, r3, #30
 8006da8:	d413      	bmi.n	8006dd2 <_printf_i+0x23a>
 8006daa:	68e0      	ldr	r0, [r4, #12]
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	4298      	cmp	r0, r3
 8006db0:	bfb8      	it	lt
 8006db2:	4618      	movlt	r0, r3
 8006db4:	e7a4      	b.n	8006d00 <_printf_i+0x168>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4632      	mov	r2, r6
 8006dba:	4649      	mov	r1, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	47d0      	blx	sl
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d09b      	beq.n	8006cfc <_printf_i+0x164>
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	68e3      	ldr	r3, [r4, #12]
 8006dc8:	9903      	ldr	r1, [sp, #12]
 8006dca:	1a5b      	subs	r3, r3, r1
 8006dcc:	42ab      	cmp	r3, r5
 8006dce:	dcf2      	bgt.n	8006db6 <_printf_i+0x21e>
 8006dd0:	e7eb      	b.n	8006daa <_printf_i+0x212>
 8006dd2:	2500      	movs	r5, #0
 8006dd4:	f104 0619 	add.w	r6, r4, #25
 8006dd8:	e7f5      	b.n	8006dc6 <_printf_i+0x22e>
 8006dda:	bf00      	nop
 8006ddc:	08007c36 	.word	0x08007c36
 8006de0:	08007c47 	.word	0x08007c47

08006de4 <_sbrk_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_sbrk_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fb fbe6 	bl	80025c0 <_sbrk>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_sbrk_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_sbrk_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	20000540 	.word	0x20000540

08006e04 <__swbuf_r>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	460e      	mov	r6, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	b118      	cbz	r0, 8006e16 <__swbuf_r+0x12>
 8006e0e:	6983      	ldr	r3, [r0, #24]
 8006e10:	b90b      	cbnz	r3, 8006e16 <__swbuf_r+0x12>
 8006e12:	f000 f9d9 	bl	80071c8 <__sinit>
 8006e16:	4b21      	ldr	r3, [pc, #132]	; (8006e9c <__swbuf_r+0x98>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d12b      	bne.n	8006e74 <__swbuf_r+0x70>
 8006e1c:	686c      	ldr	r4, [r5, #4]
 8006e1e:	69a3      	ldr	r3, [r4, #24]
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	071a      	lsls	r2, r3, #28
 8006e26:	d52f      	bpl.n	8006e88 <__swbuf_r+0x84>
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	b36b      	cbz	r3, 8006e88 <__swbuf_r+0x84>
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1ac0      	subs	r0, r0, r3
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	b2f6      	uxtb	r6, r6
 8006e36:	4283      	cmp	r3, r0
 8006e38:	4637      	mov	r7, r6
 8006e3a:	dc04      	bgt.n	8006e46 <__swbuf_r+0x42>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f92e 	bl	80070a0 <_fflush_r>
 8006e44:	bb30      	cbnz	r0, 8006e94 <__swbuf_r+0x90>
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	60a3      	str	r3, [r4, #8]
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	701e      	strb	r6, [r3, #0]
 8006e54:	6963      	ldr	r3, [r4, #20]
 8006e56:	3001      	adds	r0, #1
 8006e58:	4283      	cmp	r3, r0
 8006e5a:	d004      	beq.n	8006e66 <__swbuf_r+0x62>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	07db      	lsls	r3, r3, #31
 8006e60:	d506      	bpl.n	8006e70 <__swbuf_r+0x6c>
 8006e62:	2e0a      	cmp	r6, #10
 8006e64:	d104      	bne.n	8006e70 <__swbuf_r+0x6c>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f000 f919 	bl	80070a0 <_fflush_r>
 8006e6e:	b988      	cbnz	r0, 8006e94 <__swbuf_r+0x90>
 8006e70:	4638      	mov	r0, r7
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <__swbuf_r+0x9c>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d101      	bne.n	8006e7e <__swbuf_r+0x7a>
 8006e7a:	68ac      	ldr	r4, [r5, #8]
 8006e7c:	e7cf      	b.n	8006e1e <__swbuf_r+0x1a>
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <__swbuf_r+0xa0>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	bf08      	it	eq
 8006e84:	68ec      	ldreq	r4, [r5, #12]
 8006e86:	e7ca      	b.n	8006e1e <__swbuf_r+0x1a>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f80c 	bl	8006ea8 <__swsetup_r>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0cb      	beq.n	8006e2c <__swbuf_r+0x28>
 8006e94:	f04f 37ff 	mov.w	r7, #4294967295
 8006e98:	e7ea      	b.n	8006e70 <__swbuf_r+0x6c>
 8006e9a:	bf00      	nop
 8006e9c:	08007c78 	.word	0x08007c78
 8006ea0:	08007c98 	.word	0x08007c98
 8006ea4:	08007c58 	.word	0x08007c58

08006ea8 <__swsetup_r>:
 8006ea8:	4b32      	ldr	r3, [pc, #200]	; (8006f74 <__swsetup_r+0xcc>)
 8006eaa:	b570      	push	{r4, r5, r6, lr}
 8006eac:	681d      	ldr	r5, [r3, #0]
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	b125      	cbz	r5, 8006ebe <__swsetup_r+0x16>
 8006eb4:	69ab      	ldr	r3, [r5, #24]
 8006eb6:	b913      	cbnz	r3, 8006ebe <__swsetup_r+0x16>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f985 	bl	80071c8 <__sinit>
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <__swsetup_r+0xd0>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d10f      	bne.n	8006ee4 <__swsetup_r+0x3c>
 8006ec4:	686c      	ldr	r4, [r5, #4]
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ecc:	0719      	lsls	r1, r3, #28
 8006ece:	d42c      	bmi.n	8006f2a <__swsetup_r+0x82>
 8006ed0:	06dd      	lsls	r5, r3, #27
 8006ed2:	d411      	bmi.n	8006ef8 <__swsetup_r+0x50>
 8006ed4:	2309      	movs	r3, #9
 8006ed6:	6033      	str	r3, [r6, #0]
 8006ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	e03e      	b.n	8006f62 <__swsetup_r+0xba>
 8006ee4:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <__swsetup_r+0xd4>)
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	d101      	bne.n	8006eee <__swsetup_r+0x46>
 8006eea:	68ac      	ldr	r4, [r5, #8]
 8006eec:	e7eb      	b.n	8006ec6 <__swsetup_r+0x1e>
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <__swsetup_r+0xd8>)
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf08      	it	eq
 8006ef4:	68ec      	ldreq	r4, [r5, #12]
 8006ef6:	e7e6      	b.n	8006ec6 <__swsetup_r+0x1e>
 8006ef8:	0758      	lsls	r0, r3, #29
 8006efa:	d512      	bpl.n	8006f22 <__swsetup_r+0x7a>
 8006efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006efe:	b141      	cbz	r1, 8006f12 <__swsetup_r+0x6a>
 8006f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <__swsetup_r+0x66>
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fa41 	bl	8006390 <_free_r>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6363      	str	r3, [r4, #52]	; 0x34
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f043 0308 	orr.w	r3, r3, #8
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	b94b      	cbnz	r3, 8006f42 <__swsetup_r+0x9a>
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f38:	d003      	beq.n	8006f42 <__swsetup_r+0x9a>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 fa09 	bl	8007354 <__smakebuf_r>
 8006f42:	89a0      	ldrh	r0, [r4, #12]
 8006f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f48:	f010 0301 	ands.w	r3, r0, #1
 8006f4c:	d00a      	beq.n	8006f64 <__swsetup_r+0xbc>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60a3      	str	r3, [r4, #8]
 8006f52:	6963      	ldr	r3, [r4, #20]
 8006f54:	425b      	negs	r3, r3
 8006f56:	61a3      	str	r3, [r4, #24]
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	b943      	cbnz	r3, 8006f6e <__swsetup_r+0xc6>
 8006f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f60:	d1ba      	bne.n	8006ed8 <__swsetup_r+0x30>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	0781      	lsls	r1, r0, #30
 8006f66:	bf58      	it	pl
 8006f68:	6963      	ldrpl	r3, [r4, #20]
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	e7f4      	b.n	8006f58 <__swsetup_r+0xb0>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e7f7      	b.n	8006f62 <__swsetup_r+0xba>
 8006f72:	bf00      	nop
 8006f74:	2000009c 	.word	0x2000009c
 8006f78:	08007c78 	.word	0x08007c78
 8006f7c:	08007c98 	.word	0x08007c98
 8006f80:	08007c58 	.word	0x08007c58

08006f84 <abort>:
 8006f84:	b508      	push	{r3, lr}
 8006f86:	2006      	movs	r0, #6
 8006f88:	f000 faa2 	bl	80074d0 <raise>
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f7fb fa9f 	bl	80024d0 <_exit>
	...

08006f94 <__sflush_r>:
 8006f94:	898a      	ldrh	r2, [r1, #12]
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	0710      	lsls	r0, r2, #28
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	d458      	bmi.n	8007054 <__sflush_r+0xc0>
 8006fa2:	684b      	ldr	r3, [r1, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc05      	bgt.n	8006fb4 <__sflush_r+0x20>
 8006fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dc02      	bgt.n	8006fb4 <__sflush_r+0x20>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d0f9      	beq.n	8006fae <__sflush_r+0x1a>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fc0:	682f      	ldr	r7, [r5, #0]
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	d032      	beq.n	800702c <__sflush_r+0x98>
 8006fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	075a      	lsls	r2, r3, #29
 8006fcc:	d505      	bpl.n	8006fda <__sflush_r+0x46>
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	1ac0      	subs	r0, r0, r3
 8006fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd4:	b10b      	cbz	r3, 8006fda <__sflush_r+0x46>
 8006fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fd8:	1ac0      	subs	r0, r0, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe0:	6a21      	ldr	r1, [r4, #32]
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b0      	blx	r6
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	d106      	bne.n	8006ffa <__sflush_r+0x66>
 8006fec:	6829      	ldr	r1, [r5, #0]
 8006fee:	291d      	cmp	r1, #29
 8006ff0:	d82c      	bhi.n	800704c <__sflush_r+0xb8>
 8006ff2:	4a2a      	ldr	r2, [pc, #168]	; (800709c <__sflush_r+0x108>)
 8006ff4:	40ca      	lsrs	r2, r1
 8006ff6:	07d6      	lsls	r6, r2, #31
 8006ff8:	d528      	bpl.n	800704c <__sflush_r+0xb8>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	6062      	str	r2, [r4, #4]
 8006ffe:	04d9      	lsls	r1, r3, #19
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	d504      	bpl.n	8007010 <__sflush_r+0x7c>
 8007006:	1c42      	adds	r2, r0, #1
 8007008:	d101      	bne.n	800700e <__sflush_r+0x7a>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	b903      	cbnz	r3, 8007010 <__sflush_r+0x7c>
 800700e:	6560      	str	r0, [r4, #84]	; 0x54
 8007010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007012:	602f      	str	r7, [r5, #0]
 8007014:	2900      	cmp	r1, #0
 8007016:	d0ca      	beq.n	8006fae <__sflush_r+0x1a>
 8007018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800701c:	4299      	cmp	r1, r3
 800701e:	d002      	beq.n	8007026 <__sflush_r+0x92>
 8007020:	4628      	mov	r0, r5
 8007022:	f7ff f9b5 	bl	8006390 <_free_r>
 8007026:	2000      	movs	r0, #0
 8007028:	6360      	str	r0, [r4, #52]	; 0x34
 800702a:	e7c1      	b.n	8006fb0 <__sflush_r+0x1c>
 800702c:	6a21      	ldr	r1, [r4, #32]
 800702e:	2301      	movs	r3, #1
 8007030:	4628      	mov	r0, r5
 8007032:	47b0      	blx	r6
 8007034:	1c41      	adds	r1, r0, #1
 8007036:	d1c7      	bne.n	8006fc8 <__sflush_r+0x34>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0c4      	beq.n	8006fc8 <__sflush_r+0x34>
 800703e:	2b1d      	cmp	r3, #29
 8007040:	d001      	beq.n	8007046 <__sflush_r+0xb2>
 8007042:	2b16      	cmp	r3, #22
 8007044:	d101      	bne.n	800704a <__sflush_r+0xb6>
 8007046:	602f      	str	r7, [r5, #0]
 8007048:	e7b1      	b.n	8006fae <__sflush_r+0x1a>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	e7ad      	b.n	8006fb0 <__sflush_r+0x1c>
 8007054:	690f      	ldr	r7, [r1, #16]
 8007056:	2f00      	cmp	r7, #0
 8007058:	d0a9      	beq.n	8006fae <__sflush_r+0x1a>
 800705a:	0793      	lsls	r3, r2, #30
 800705c:	680e      	ldr	r6, [r1, #0]
 800705e:	bf08      	it	eq
 8007060:	694b      	ldreq	r3, [r1, #20]
 8007062:	600f      	str	r7, [r1, #0]
 8007064:	bf18      	it	ne
 8007066:	2300      	movne	r3, #0
 8007068:	eba6 0807 	sub.w	r8, r6, r7
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	dd9c      	ble.n	8006fae <__sflush_r+0x1a>
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007078:	4643      	mov	r3, r8
 800707a:	463a      	mov	r2, r7
 800707c:	4628      	mov	r0, r5
 800707e:	47b0      	blx	r6
 8007080:	2800      	cmp	r0, #0
 8007082:	dc06      	bgt.n	8007092 <__sflush_r+0xfe>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	e78e      	b.n	8006fb0 <__sflush_r+0x1c>
 8007092:	4407      	add	r7, r0
 8007094:	eba8 0800 	sub.w	r8, r8, r0
 8007098:	e7e9      	b.n	800706e <__sflush_r+0xda>
 800709a:	bf00      	nop
 800709c:	20400001 	.word	0x20400001

080070a0 <_fflush_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	690b      	ldr	r3, [r1, #16]
 80070a4:	4605      	mov	r5, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	b913      	cbnz	r3, 80070b0 <_fflush_r+0x10>
 80070aa:	2500      	movs	r5, #0
 80070ac:	4628      	mov	r0, r5
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	b118      	cbz	r0, 80070ba <_fflush_r+0x1a>
 80070b2:	6983      	ldr	r3, [r0, #24]
 80070b4:	b90b      	cbnz	r3, 80070ba <_fflush_r+0x1a>
 80070b6:	f000 f887 	bl	80071c8 <__sinit>
 80070ba:	4b14      	ldr	r3, [pc, #80]	; (800710c <_fflush_r+0x6c>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	d11b      	bne.n	80070f8 <_fflush_r+0x58>
 80070c0:	686c      	ldr	r4, [r5, #4]
 80070c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ef      	beq.n	80070aa <_fflush_r+0xa>
 80070ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070cc:	07d0      	lsls	r0, r2, #31
 80070ce:	d404      	bmi.n	80070da <_fflush_r+0x3a>
 80070d0:	0599      	lsls	r1, r3, #22
 80070d2:	d402      	bmi.n	80070da <_fflush_r+0x3a>
 80070d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d6:	f000 f915 	bl	8007304 <__retarget_lock_acquire_recursive>
 80070da:	4628      	mov	r0, r5
 80070dc:	4621      	mov	r1, r4
 80070de:	f7ff ff59 	bl	8006f94 <__sflush_r>
 80070e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e4:	07da      	lsls	r2, r3, #31
 80070e6:	4605      	mov	r5, r0
 80070e8:	d4e0      	bmi.n	80070ac <_fflush_r+0xc>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	059b      	lsls	r3, r3, #22
 80070ee:	d4dd      	bmi.n	80070ac <_fflush_r+0xc>
 80070f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f2:	f000 f908 	bl	8007306 <__retarget_lock_release_recursive>
 80070f6:	e7d9      	b.n	80070ac <_fflush_r+0xc>
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <_fflush_r+0x70>)
 80070fa:	429c      	cmp	r4, r3
 80070fc:	d101      	bne.n	8007102 <_fflush_r+0x62>
 80070fe:	68ac      	ldr	r4, [r5, #8]
 8007100:	e7df      	b.n	80070c2 <_fflush_r+0x22>
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <_fflush_r+0x74>)
 8007104:	429c      	cmp	r4, r3
 8007106:	bf08      	it	eq
 8007108:	68ec      	ldreq	r4, [r5, #12]
 800710a:	e7da      	b.n	80070c2 <_fflush_r+0x22>
 800710c:	08007c78 	.word	0x08007c78
 8007110:	08007c98 	.word	0x08007c98
 8007114:	08007c58 	.word	0x08007c58

08007118 <std>:
 8007118:	2300      	movs	r3, #0
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	e9c0 3300 	strd	r3, r3, [r0]
 8007122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007126:	6083      	str	r3, [r0, #8]
 8007128:	8181      	strh	r1, [r0, #12]
 800712a:	6643      	str	r3, [r0, #100]	; 0x64
 800712c:	81c2      	strh	r2, [r0, #14]
 800712e:	6183      	str	r3, [r0, #24]
 8007130:	4619      	mov	r1, r3
 8007132:	2208      	movs	r2, #8
 8007134:	305c      	adds	r0, #92	; 0x5c
 8007136:	f7fe ffcd 	bl	80060d4 <memset>
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <std+0x38>)
 800713c:	6263      	str	r3, [r4, #36]	; 0x24
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x3c>)
 8007140:	62a3      	str	r3, [r4, #40]	; 0x28
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x40>)
 8007144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x44>)
 8007148:	6224      	str	r4, [r4, #32]
 800714a:	6323      	str	r3, [r4, #48]	; 0x30
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	08007509 	.word	0x08007509
 8007154:	0800752b 	.word	0x0800752b
 8007158:	08007563 	.word	0x08007563
 800715c:	08007587 	.word	0x08007587

08007160 <_cleanup_r>:
 8007160:	4901      	ldr	r1, [pc, #4]	; (8007168 <_cleanup_r+0x8>)
 8007162:	f000 b8af 	b.w	80072c4 <_fwalk_reent>
 8007166:	bf00      	nop
 8007168:	080070a1 	.word	0x080070a1

0800716c <__sfmoreglue>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	2268      	movs	r2, #104	; 0x68
 8007170:	1e4d      	subs	r5, r1, #1
 8007172:	4355      	muls	r5, r2
 8007174:	460e      	mov	r6, r1
 8007176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800717a:	f7ff f975 	bl	8006468 <_malloc_r>
 800717e:	4604      	mov	r4, r0
 8007180:	b140      	cbz	r0, 8007194 <__sfmoreglue+0x28>
 8007182:	2100      	movs	r1, #0
 8007184:	e9c0 1600 	strd	r1, r6, [r0]
 8007188:	300c      	adds	r0, #12
 800718a:	60a0      	str	r0, [r4, #8]
 800718c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007190:	f7fe ffa0 	bl	80060d4 <memset>
 8007194:	4620      	mov	r0, r4
 8007196:	bd70      	pop	{r4, r5, r6, pc}

08007198 <__sfp_lock_acquire>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__sfp_lock_acquire+0x8>)
 800719a:	f000 b8b3 	b.w	8007304 <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	2000053d 	.word	0x2000053d

080071a4 <__sfp_lock_release>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__sfp_lock_release+0x8>)
 80071a6:	f000 b8ae 	b.w	8007306 <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	2000053d 	.word	0x2000053d

080071b0 <__sinit_lock_acquire>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__sinit_lock_acquire+0x8>)
 80071b2:	f000 b8a7 	b.w	8007304 <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	2000053e 	.word	0x2000053e

080071bc <__sinit_lock_release>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sinit_lock_release+0x8>)
 80071be:	f000 b8a2 	b.w	8007306 <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	2000053e 	.word	0x2000053e

080071c8 <__sinit>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	4604      	mov	r4, r0
 80071cc:	f7ff fff0 	bl	80071b0 <__sinit_lock_acquire>
 80071d0:	69a3      	ldr	r3, [r4, #24]
 80071d2:	b11b      	cbz	r3, 80071dc <__sinit+0x14>
 80071d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d8:	f7ff bff0 	b.w	80071bc <__sinit_lock_release>
 80071dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071e0:	6523      	str	r3, [r4, #80]	; 0x50
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <__sinit+0x68>)
 80071e4:	4a13      	ldr	r2, [pc, #76]	; (8007234 <__sinit+0x6c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	bf04      	itt	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	61a3      	streq	r3, [r4, #24]
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 f820 	bl	8007238 <__sfp>
 80071f8:	6060      	str	r0, [r4, #4]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f81c 	bl	8007238 <__sfp>
 8007200:	60a0      	str	r0, [r4, #8]
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f818 	bl	8007238 <__sfp>
 8007208:	2200      	movs	r2, #0
 800720a:	60e0      	str	r0, [r4, #12]
 800720c:	2104      	movs	r1, #4
 800720e:	6860      	ldr	r0, [r4, #4]
 8007210:	f7ff ff82 	bl	8007118 <std>
 8007214:	68a0      	ldr	r0, [r4, #8]
 8007216:	2201      	movs	r2, #1
 8007218:	2109      	movs	r1, #9
 800721a:	f7ff ff7d 	bl	8007118 <std>
 800721e:	68e0      	ldr	r0, [r4, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	2112      	movs	r1, #18
 8007224:	f7ff ff78 	bl	8007118 <std>
 8007228:	2301      	movs	r3, #1
 800722a:	61a3      	str	r3, [r4, #24]
 800722c:	e7d2      	b.n	80071d4 <__sinit+0xc>
 800722e:	bf00      	nop
 8007230:	08007a70 	.word	0x08007a70
 8007234:	08007161 	.word	0x08007161

08007238 <__sfp>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	4607      	mov	r7, r0
 800723c:	f7ff ffac 	bl	8007198 <__sfp_lock_acquire>
 8007240:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <__sfp+0x84>)
 8007242:	681e      	ldr	r6, [r3, #0]
 8007244:	69b3      	ldr	r3, [r6, #24]
 8007246:	b913      	cbnz	r3, 800724e <__sfp+0x16>
 8007248:	4630      	mov	r0, r6
 800724a:	f7ff ffbd 	bl	80071c8 <__sinit>
 800724e:	3648      	adds	r6, #72	; 0x48
 8007250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007254:	3b01      	subs	r3, #1
 8007256:	d503      	bpl.n	8007260 <__sfp+0x28>
 8007258:	6833      	ldr	r3, [r6, #0]
 800725a:	b30b      	cbz	r3, 80072a0 <__sfp+0x68>
 800725c:	6836      	ldr	r6, [r6, #0]
 800725e:	e7f7      	b.n	8007250 <__sfp+0x18>
 8007260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007264:	b9d5      	cbnz	r5, 800729c <__sfp+0x64>
 8007266:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <__sfp+0x88>)
 8007268:	60e3      	str	r3, [r4, #12]
 800726a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800726e:	6665      	str	r5, [r4, #100]	; 0x64
 8007270:	f000 f847 	bl	8007302 <__retarget_lock_init_recursive>
 8007274:	f7ff ff96 	bl	80071a4 <__sfp_lock_release>
 8007278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800727c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007280:	6025      	str	r5, [r4, #0]
 8007282:	61a5      	str	r5, [r4, #24]
 8007284:	2208      	movs	r2, #8
 8007286:	4629      	mov	r1, r5
 8007288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800728c:	f7fe ff22 	bl	80060d4 <memset>
 8007290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007298:	4620      	mov	r0, r4
 800729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800729c:	3468      	adds	r4, #104	; 0x68
 800729e:	e7d9      	b.n	8007254 <__sfp+0x1c>
 80072a0:	2104      	movs	r1, #4
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff ff62 	bl	800716c <__sfmoreglue>
 80072a8:	4604      	mov	r4, r0
 80072aa:	6030      	str	r0, [r6, #0]
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1d5      	bne.n	800725c <__sfp+0x24>
 80072b0:	f7ff ff78 	bl	80071a4 <__sfp_lock_release>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	e7ee      	b.n	8007298 <__sfp+0x60>
 80072ba:	bf00      	nop
 80072bc:	08007a70 	.word	0x08007a70
 80072c0:	ffff0001 	.word	0xffff0001

080072c4 <_fwalk_reent>:
 80072c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c8:	4606      	mov	r6, r0
 80072ca:	4688      	mov	r8, r1
 80072cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072d0:	2700      	movs	r7, #0
 80072d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072d6:	f1b9 0901 	subs.w	r9, r9, #1
 80072da:	d505      	bpl.n	80072e8 <_fwalk_reent+0x24>
 80072dc:	6824      	ldr	r4, [r4, #0]
 80072de:	2c00      	cmp	r4, #0
 80072e0:	d1f7      	bne.n	80072d2 <_fwalk_reent+0xe>
 80072e2:	4638      	mov	r0, r7
 80072e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d907      	bls.n	80072fe <_fwalk_reent+0x3a>
 80072ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072f2:	3301      	adds	r3, #1
 80072f4:	d003      	beq.n	80072fe <_fwalk_reent+0x3a>
 80072f6:	4629      	mov	r1, r5
 80072f8:	4630      	mov	r0, r6
 80072fa:	47c0      	blx	r8
 80072fc:	4307      	orrs	r7, r0
 80072fe:	3568      	adds	r5, #104	; 0x68
 8007300:	e7e9      	b.n	80072d6 <_fwalk_reent+0x12>

08007302 <__retarget_lock_init_recursive>:
 8007302:	4770      	bx	lr

08007304 <__retarget_lock_acquire_recursive>:
 8007304:	4770      	bx	lr

08007306 <__retarget_lock_release_recursive>:
 8007306:	4770      	bx	lr

08007308 <__swhatbuf_r>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	460e      	mov	r6, r1
 800730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007310:	2900      	cmp	r1, #0
 8007312:	b096      	sub	sp, #88	; 0x58
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	da08      	bge.n	800732c <__swhatbuf_r+0x24>
 800731a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	602a      	str	r2, [r5, #0]
 8007322:	061a      	lsls	r2, r3, #24
 8007324:	d410      	bmi.n	8007348 <__swhatbuf_r+0x40>
 8007326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732a:	e00e      	b.n	800734a <__swhatbuf_r+0x42>
 800732c:	466a      	mov	r2, sp
 800732e:	f000 f951 	bl	80075d4 <_fstat_r>
 8007332:	2800      	cmp	r0, #0
 8007334:	dbf1      	blt.n	800731a <__swhatbuf_r+0x12>
 8007336:	9a01      	ldr	r2, [sp, #4]
 8007338:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800733c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007340:	425a      	negs	r2, r3
 8007342:	415a      	adcs	r2, r3
 8007344:	602a      	str	r2, [r5, #0]
 8007346:	e7ee      	b.n	8007326 <__swhatbuf_r+0x1e>
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	2000      	movs	r0, #0
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	b016      	add	sp, #88	; 0x58
 8007350:	bd70      	pop	{r4, r5, r6, pc}
	...

08007354 <__smakebuf_r>:
 8007354:	898b      	ldrh	r3, [r1, #12]
 8007356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007358:	079d      	lsls	r5, r3, #30
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	d507      	bpl.n	8007370 <__smakebuf_r+0x1c>
 8007360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	2301      	movs	r3, #1
 800736a:	6163      	str	r3, [r4, #20]
 800736c:	b002      	add	sp, #8
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	ab01      	add	r3, sp, #4
 8007372:	466a      	mov	r2, sp
 8007374:	f7ff ffc8 	bl	8007308 <__swhatbuf_r>
 8007378:	9900      	ldr	r1, [sp, #0]
 800737a:	4605      	mov	r5, r0
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff f873 	bl	8006468 <_malloc_r>
 8007382:	b948      	cbnz	r0, 8007398 <__smakebuf_r+0x44>
 8007384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007388:	059a      	lsls	r2, r3, #22
 800738a:	d4ef      	bmi.n	800736c <__smakebuf_r+0x18>
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	f043 0302 	orr.w	r3, r3, #2
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e7e3      	b.n	8007360 <__smakebuf_r+0xc>
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <__smakebuf_r+0x7c>)
 800739a:	62b3      	str	r3, [r6, #40]	; 0x28
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	6163      	str	r3, [r4, #20]
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	6120      	str	r0, [r4, #16]
 80073ae:	b15b      	cbz	r3, 80073c8 <__smakebuf_r+0x74>
 80073b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 f91f 	bl	80075f8 <_isatty_r>
 80073ba:	b128      	cbz	r0, 80073c8 <__smakebuf_r+0x74>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	89a0      	ldrh	r0, [r4, #12]
 80073ca:	4305      	orrs	r5, r0
 80073cc:	81a5      	strh	r5, [r4, #12]
 80073ce:	e7cd      	b.n	800736c <__smakebuf_r+0x18>
 80073d0:	08007161 	.word	0x08007161

080073d4 <memmove>:
 80073d4:	4288      	cmp	r0, r1
 80073d6:	b510      	push	{r4, lr}
 80073d8:	eb01 0402 	add.w	r4, r1, r2
 80073dc:	d902      	bls.n	80073e4 <memmove+0x10>
 80073de:	4284      	cmp	r4, r0
 80073e0:	4623      	mov	r3, r4
 80073e2:	d807      	bhi.n	80073f4 <memmove+0x20>
 80073e4:	1e43      	subs	r3, r0, #1
 80073e6:	42a1      	cmp	r1, r4
 80073e8:	d008      	beq.n	80073fc <memmove+0x28>
 80073ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073f2:	e7f8      	b.n	80073e6 <memmove+0x12>
 80073f4:	4402      	add	r2, r0
 80073f6:	4601      	mov	r1, r0
 80073f8:	428a      	cmp	r2, r1
 80073fa:	d100      	bne.n	80073fe <memmove+0x2a>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007406:	e7f7      	b.n	80073f8 <memmove+0x24>

08007408 <__malloc_lock>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__malloc_lock+0x8>)
 800740a:	f7ff bf7b 	b.w	8007304 <__retarget_lock_acquire_recursive>
 800740e:	bf00      	nop
 8007410:	2000053c 	.word	0x2000053c

08007414 <__malloc_unlock>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__malloc_unlock+0x8>)
 8007416:	f7ff bf76 	b.w	8007306 <__retarget_lock_release_recursive>
 800741a:	bf00      	nop
 800741c:	2000053c 	.word	0x2000053c

08007420 <_realloc_r>:
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	4680      	mov	r8, r0
 8007426:	4614      	mov	r4, r2
 8007428:	460e      	mov	r6, r1
 800742a:	b921      	cbnz	r1, 8007436 <_realloc_r+0x16>
 800742c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007430:	4611      	mov	r1, r2
 8007432:	f7ff b819 	b.w	8006468 <_malloc_r>
 8007436:	b92a      	cbnz	r2, 8007444 <_realloc_r+0x24>
 8007438:	f7fe ffaa 	bl	8006390 <_free_r>
 800743c:	4625      	mov	r5, r4
 800743e:	4628      	mov	r0, r5
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007444:	f000 f8fa 	bl	800763c <_malloc_usable_size_r>
 8007448:	4284      	cmp	r4, r0
 800744a:	4607      	mov	r7, r0
 800744c:	d802      	bhi.n	8007454 <_realloc_r+0x34>
 800744e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007452:	d812      	bhi.n	800747a <_realloc_r+0x5a>
 8007454:	4621      	mov	r1, r4
 8007456:	4640      	mov	r0, r8
 8007458:	f7ff f806 	bl	8006468 <_malloc_r>
 800745c:	4605      	mov	r5, r0
 800745e:	2800      	cmp	r0, #0
 8007460:	d0ed      	beq.n	800743e <_realloc_r+0x1e>
 8007462:	42bc      	cmp	r4, r7
 8007464:	4622      	mov	r2, r4
 8007466:	4631      	mov	r1, r6
 8007468:	bf28      	it	cs
 800746a:	463a      	movcs	r2, r7
 800746c:	f7fe fe24 	bl	80060b8 <memcpy>
 8007470:	4631      	mov	r1, r6
 8007472:	4640      	mov	r0, r8
 8007474:	f7fe ff8c 	bl	8006390 <_free_r>
 8007478:	e7e1      	b.n	800743e <_realloc_r+0x1e>
 800747a:	4635      	mov	r5, r6
 800747c:	e7df      	b.n	800743e <_realloc_r+0x1e>

0800747e <_raise_r>:
 800747e:	291f      	cmp	r1, #31
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
 8007486:	d904      	bls.n	8007492 <_raise_r+0x14>
 8007488:	2316      	movs	r3, #22
 800748a:	6003      	str	r3, [r0, #0]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007494:	b112      	cbz	r2, 800749c <_raise_r+0x1e>
 8007496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800749a:	b94b      	cbnz	r3, 80074b0 <_raise_r+0x32>
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f831 	bl	8007504 <_getpid_r>
 80074a2:	462a      	mov	r2, r5
 80074a4:	4601      	mov	r1, r0
 80074a6:	4620      	mov	r0, r4
 80074a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ac:	f000 b818 	b.w	80074e0 <_kill_r>
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d00a      	beq.n	80074ca <_raise_r+0x4c>
 80074b4:	1c59      	adds	r1, r3, #1
 80074b6:	d103      	bne.n	80074c0 <_raise_r+0x42>
 80074b8:	2316      	movs	r3, #22
 80074ba:	6003      	str	r3, [r0, #0]
 80074bc:	2001      	movs	r0, #1
 80074be:	e7e7      	b.n	8007490 <_raise_r+0x12>
 80074c0:	2400      	movs	r4, #0
 80074c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074c6:	4628      	mov	r0, r5
 80074c8:	4798      	blx	r3
 80074ca:	2000      	movs	r0, #0
 80074cc:	e7e0      	b.n	8007490 <_raise_r+0x12>
	...

080074d0 <raise>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <raise+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7ff bfd2 	b.w	800747e <_raise_r>
 80074da:	bf00      	nop
 80074dc:	2000009c 	.word	0x2000009c

080074e0 <_kill_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_kill_r+0x20>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	f7fa ffdf 	bl	80024b0 <_kill>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d102      	bne.n	80074fc <_kill_r+0x1c>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	b103      	cbz	r3, 80074fc <_kill_r+0x1c>
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	20000540 	.word	0x20000540

08007504 <_getpid_r>:
 8007504:	f7fa bfcc 	b.w	80024a0 <_getpid>

08007508 <__sread>:
 8007508:	b510      	push	{r4, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	f000 f89c 	bl	800764c <_read_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	bfab      	itete	ge
 8007518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800751a:	89a3      	ldrhlt	r3, [r4, #12]
 800751c:	181b      	addge	r3, r3, r0
 800751e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007522:	bfac      	ite	ge
 8007524:	6563      	strge	r3, [r4, #84]	; 0x54
 8007526:	81a3      	strhlt	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__swrite>:
 800752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	461f      	mov	r7, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	05db      	lsls	r3, r3, #23
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	4616      	mov	r6, r2
 800753a:	d505      	bpl.n	8007548 <__swrite+0x1e>
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	2302      	movs	r3, #2
 8007542:	2200      	movs	r2, #0
 8007544:	f000 f868 	bl	8007618 <_lseek_r>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f000 b817 	b.w	8007590 <_write_r>

08007562 <__sseek>:
 8007562:	b510      	push	{r4, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 f855 	bl	8007618 <_lseek_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	bf15      	itete	ne
 8007574:	6560      	strne	r0, [r4, #84]	; 0x54
 8007576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800757a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800757e:	81a3      	strheq	r3, [r4, #12]
 8007580:	bf18      	it	ne
 8007582:	81a3      	strhne	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__sclose>:
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 b813 	b.w	80075b4 <_close_r>
	...

08007590 <_write_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_write_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7fa ffbd 	bl	800251e <_write>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_write_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_write_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000540 	.word	0x20000540

080075b4 <_close_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	; (80075d0 <_close_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fa ffc9 	bl	8002556 <_close>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_close_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_close_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000540 	.word	0x20000540

080075d4 <_fstat_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_fstat_r+0x20>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	f7fa ffc4 	bl	800256e <_fstat>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d102      	bne.n	80075f0 <_fstat_r+0x1c>
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	b103      	cbz	r3, 80075f0 <_fstat_r+0x1c>
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	bd38      	pop	{r3, r4, r5, pc}
 80075f2:	bf00      	nop
 80075f4:	20000540 	.word	0x20000540

080075f8 <_isatty_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d06      	ldr	r5, [pc, #24]	; (8007614 <_isatty_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	f7fa ffc3 	bl	800258e <_isatty>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_isatty_r+0x1a>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_isatty_r+0x1a>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000540 	.word	0x20000540

08007618 <_lseek_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	; (8007638 <_lseek_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fa ffbc 	bl	80025a4 <_lseek>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_lseek_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_lseek_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20000540 	.word	0x20000540

0800763c <_malloc_usable_size_r>:
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f18      	subs	r0, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfbc      	itt	lt
 8007646:	580b      	ldrlt	r3, [r1, r0]
 8007648:	18c0      	addlt	r0, r0, r3
 800764a:	4770      	bx	lr

0800764c <_read_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d07      	ldr	r5, [pc, #28]	; (800766c <_read_r+0x20>)
 8007650:	4604      	mov	r4, r0
 8007652:	4608      	mov	r0, r1
 8007654:	4611      	mov	r1, r2
 8007656:	2200      	movs	r2, #0
 8007658:	602a      	str	r2, [r5, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f7fa ff42 	bl	80024e4 <_read>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_read_r+0x1e>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_read_r+0x1e>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20000540 	.word	0x20000540

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
